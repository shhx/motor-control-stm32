
motor_control_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a00  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08004b98  08004b98  00014b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08004bb8  08004bb8  00014bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08004bc0  08004bc0  00014bc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08004bc4  08004bc4  00014bc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08004bc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000027c  2000000c  08004bd4  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00006000  20000288  08004bd4  00020288  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00010ae0  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002174  00000000  00000000  00030b1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000d20  00000000  00000000  00032c90  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000ca0  00000000  00000000  000339b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000764d  00000000  00000000  00034650  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000040ac  00000000  00000000  0003bc9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003fd49  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003608  00000000  00000000  0003fdc8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004b80 	.word	0x08004b80

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08004b80 	.word	0x08004b80

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b97a 	b.w	80004e4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	468c      	mov	ip, r1
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	9e08      	ldr	r6, [sp, #32]
 8000214:	2b00      	cmp	r3, #0
 8000216:	d151      	bne.n	80002bc <__udivmoddi4+0xb4>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d96d      	bls.n	80002fa <__udivmoddi4+0xf2>
 800021e:	fab2 fe82 	clz	lr, r2
 8000222:	f1be 0f00 	cmp.w	lr, #0
 8000226:	d00b      	beq.n	8000240 <__udivmoddi4+0x38>
 8000228:	f1ce 0c20 	rsb	ip, lr, #32
 800022c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000230:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000234:	fa02 f70e 	lsl.w	r7, r2, lr
 8000238:	ea4c 0c05 	orr.w	ip, ip, r5
 800023c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000240:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000244:	0c25      	lsrs	r5, r4, #16
 8000246:	fbbc f8fa 	udiv	r8, ip, sl
 800024a:	fa1f f987 	uxth.w	r9, r7
 800024e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000252:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000256:	fb08 f309 	mul.w	r3, r8, r9
 800025a:	42ab      	cmp	r3, r5
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x6c>
 800025e:	19ed      	adds	r5, r5, r7
 8000260:	f108 32ff 	add.w	r2, r8, #4294967295
 8000264:	f080 8123 	bcs.w	80004ae <__udivmoddi4+0x2a6>
 8000268:	42ab      	cmp	r3, r5
 800026a:	f240 8120 	bls.w	80004ae <__udivmoddi4+0x2a6>
 800026e:	f1a8 0802 	sub.w	r8, r8, #2
 8000272:	443d      	add	r5, r7
 8000274:	1aed      	subs	r5, r5, r3
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb5 f0fa 	udiv	r0, r5, sl
 800027c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000280:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000284:	fb00 f909 	mul.w	r9, r0, r9
 8000288:	45a1      	cmp	r9, r4
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x98>
 800028c:	19e4      	adds	r4, r4, r7
 800028e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000292:	f080 810a 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 8000296:	45a1      	cmp	r9, r4
 8000298:	f240 8107 	bls.w	80004aa <__udivmoddi4+0x2a2>
 800029c:	3802      	subs	r0, #2
 800029e:	443c      	add	r4, r7
 80002a0:	eba4 0409 	sub.w	r4, r4, r9
 80002a4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002a8:	2100      	movs	r1, #0
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	d061      	beq.n	8000372 <__udivmoddi4+0x16a>
 80002ae:	fa24 f40e 	lsr.w	r4, r4, lr
 80002b2:	2300      	movs	r3, #0
 80002b4:	6034      	str	r4, [r6, #0]
 80002b6:	6073      	str	r3, [r6, #4]
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	428b      	cmp	r3, r1
 80002be:	d907      	bls.n	80002d0 <__udivmoddi4+0xc8>
 80002c0:	2e00      	cmp	r6, #0
 80002c2:	d054      	beq.n	800036e <__udivmoddi4+0x166>
 80002c4:	2100      	movs	r1, #0
 80002c6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ca:	4608      	mov	r0, r1
 80002cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d0:	fab3 f183 	clz	r1, r3
 80002d4:	2900      	cmp	r1, #0
 80002d6:	f040 808e 	bne.w	80003f6 <__udivmoddi4+0x1ee>
 80002da:	42ab      	cmp	r3, r5
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xdc>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80fa 	bhi.w	80004d8 <__udivmoddi4+0x2d0>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb65 0503 	sbc.w	r5, r5, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	46ac      	mov	ip, r5
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	d03f      	beq.n	8000372 <__udivmoddi4+0x16a>
 80002f2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	b912      	cbnz	r2, 8000302 <__udivmoddi4+0xfa>
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb7 f7f2 	udiv	r7, r7, r2
 8000302:	fab7 fe87 	clz	lr, r7
 8000306:	f1be 0f00 	cmp.w	lr, #0
 800030a:	d134      	bne.n	8000376 <__udivmoddi4+0x16e>
 800030c:	1beb      	subs	r3, r5, r7
 800030e:	0c3a      	lsrs	r2, r7, #16
 8000310:	fa1f fc87 	uxth.w	ip, r7
 8000314:	2101      	movs	r1, #1
 8000316:	fbb3 f8f2 	udiv	r8, r3, r2
 800031a:	0c25      	lsrs	r5, r4, #16
 800031c:	fb02 3318 	mls	r3, r2, r8, r3
 8000320:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000324:	fb0c f308 	mul.w	r3, ip, r8
 8000328:	42ab      	cmp	r3, r5
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x134>
 800032c:	19ed      	adds	r5, r5, r7
 800032e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x132>
 8000334:	42ab      	cmp	r3, r5
 8000336:	f200 80d1 	bhi.w	80004dc <__udivmoddi4+0x2d4>
 800033a:	4680      	mov	r8, r0
 800033c:	1aed      	subs	r5, r5, r3
 800033e:	b2a3      	uxth	r3, r4
 8000340:	fbb5 f0f2 	udiv	r0, r5, r2
 8000344:	fb02 5510 	mls	r5, r2, r0, r5
 8000348:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800034c:	fb0c fc00 	mul.w	ip, ip, r0
 8000350:	45a4      	cmp	ip, r4
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x15c>
 8000354:	19e4      	adds	r4, r4, r7
 8000356:	f100 33ff 	add.w	r3, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x15a>
 800035c:	45a4      	cmp	ip, r4
 800035e:	f200 80b8 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 8000362:	4618      	mov	r0, r3
 8000364:	eba4 040c 	sub.w	r4, r4, ip
 8000368:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800036c:	e79d      	b.n	80002aa <__udivmoddi4+0xa2>
 800036e:	4631      	mov	r1, r6
 8000370:	4630      	mov	r0, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	f1ce 0420 	rsb	r4, lr, #32
 800037a:	fa05 f30e 	lsl.w	r3, r5, lr
 800037e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000382:	fa20 f804 	lsr.w	r8, r0, r4
 8000386:	0c3a      	lsrs	r2, r7, #16
 8000388:	fa25 f404 	lsr.w	r4, r5, r4
 800038c:	ea48 0803 	orr.w	r8, r8, r3
 8000390:	fbb4 f1f2 	udiv	r1, r4, r2
 8000394:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000398:	fb02 4411 	mls	r4, r2, r1, r4
 800039c:	fa1f fc87 	uxth.w	ip, r7
 80003a0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003a4:	fb01 f30c 	mul.w	r3, r1, ip
 80003a8:	42ab      	cmp	r3, r5
 80003aa:	fa00 f40e 	lsl.w	r4, r0, lr
 80003ae:	d909      	bls.n	80003c4 <__udivmoddi4+0x1bc>
 80003b0:	19ed      	adds	r5, r5, r7
 80003b2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003b6:	f080 808a 	bcs.w	80004ce <__udivmoddi4+0x2c6>
 80003ba:	42ab      	cmp	r3, r5
 80003bc:	f240 8087 	bls.w	80004ce <__udivmoddi4+0x2c6>
 80003c0:	3902      	subs	r1, #2
 80003c2:	443d      	add	r5, r7
 80003c4:	1aeb      	subs	r3, r5, r3
 80003c6:	fa1f f588 	uxth.w	r5, r8
 80003ca:	fbb3 f0f2 	udiv	r0, r3, r2
 80003ce:	fb02 3310 	mls	r3, r2, r0, r3
 80003d2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003d6:	fb00 f30c 	mul.w	r3, r0, ip
 80003da:	42ab      	cmp	r3, r5
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1e6>
 80003de:	19ed      	adds	r5, r5, r7
 80003e0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003e4:	d26f      	bcs.n	80004c6 <__udivmoddi4+0x2be>
 80003e6:	42ab      	cmp	r3, r5
 80003e8:	d96d      	bls.n	80004c6 <__udivmoddi4+0x2be>
 80003ea:	3802      	subs	r0, #2
 80003ec:	443d      	add	r5, r7
 80003ee:	1aeb      	subs	r3, r5, r3
 80003f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f4:	e78f      	b.n	8000316 <__udivmoddi4+0x10e>
 80003f6:	f1c1 0720 	rsb	r7, r1, #32
 80003fa:	fa22 f807 	lsr.w	r8, r2, r7
 80003fe:	408b      	lsls	r3, r1
 8000400:	fa05 f401 	lsl.w	r4, r5, r1
 8000404:	ea48 0303 	orr.w	r3, r8, r3
 8000408:	fa20 fe07 	lsr.w	lr, r0, r7
 800040c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000410:	40fd      	lsrs	r5, r7
 8000412:	ea4e 0e04 	orr.w	lr, lr, r4
 8000416:	fbb5 f9fc 	udiv	r9, r5, ip
 800041a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800041e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000422:	fa1f f883 	uxth.w	r8, r3
 8000426:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800042a:	fb09 f408 	mul.w	r4, r9, r8
 800042e:	42ac      	cmp	r4, r5
 8000430:	fa02 f201 	lsl.w	r2, r2, r1
 8000434:	fa00 fa01 	lsl.w	sl, r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x244>
 800043a:	18ed      	adds	r5, r5, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	d243      	bcs.n	80004ca <__udivmoddi4+0x2c2>
 8000442:	42ac      	cmp	r4, r5
 8000444:	d941      	bls.n	80004ca <__udivmoddi4+0x2c2>
 8000446:	f1a9 0902 	sub.w	r9, r9, #2
 800044a:	441d      	add	r5, r3
 800044c:	1b2d      	subs	r5, r5, r4
 800044e:	fa1f fe8e 	uxth.w	lr, lr
 8000452:	fbb5 f0fc 	udiv	r0, r5, ip
 8000456:	fb0c 5510 	mls	r5, ip, r0, r5
 800045a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800045e:	fb00 f808 	mul.w	r8, r0, r8
 8000462:	45a0      	cmp	r8, r4
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x26e>
 8000466:	18e4      	adds	r4, r4, r3
 8000468:	f100 35ff 	add.w	r5, r0, #4294967295
 800046c:	d229      	bcs.n	80004c2 <__udivmoddi4+0x2ba>
 800046e:	45a0      	cmp	r8, r4
 8000470:	d927      	bls.n	80004c2 <__udivmoddi4+0x2ba>
 8000472:	3802      	subs	r0, #2
 8000474:	441c      	add	r4, r3
 8000476:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047a:	eba4 0408 	sub.w	r4, r4, r8
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	454c      	cmp	r4, r9
 8000484:	46c6      	mov	lr, r8
 8000486:	464d      	mov	r5, r9
 8000488:	d315      	bcc.n	80004b6 <__udivmoddi4+0x2ae>
 800048a:	d012      	beq.n	80004b2 <__udivmoddi4+0x2aa>
 800048c:	b156      	cbz	r6, 80004a4 <__udivmoddi4+0x29c>
 800048e:	ebba 030e 	subs.w	r3, sl, lr
 8000492:	eb64 0405 	sbc.w	r4, r4, r5
 8000496:	fa04 f707 	lsl.w	r7, r4, r7
 800049a:	40cb      	lsrs	r3, r1
 800049c:	431f      	orrs	r7, r3
 800049e:	40cc      	lsrs	r4, r1
 80004a0:	6037      	str	r7, [r6, #0]
 80004a2:	6074      	str	r4, [r6, #4]
 80004a4:	2100      	movs	r1, #0
 80004a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004aa:	4618      	mov	r0, r3
 80004ac:	e6f8      	b.n	80002a0 <__udivmoddi4+0x98>
 80004ae:	4690      	mov	r8, r2
 80004b0:	e6e0      	b.n	8000274 <__udivmoddi4+0x6c>
 80004b2:	45c2      	cmp	sl, r8
 80004b4:	d2ea      	bcs.n	800048c <__udivmoddi4+0x284>
 80004b6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ba:	eb69 0503 	sbc.w	r5, r9, r3
 80004be:	3801      	subs	r0, #1
 80004c0:	e7e4      	b.n	800048c <__udivmoddi4+0x284>
 80004c2:	4628      	mov	r0, r5
 80004c4:	e7d7      	b.n	8000476 <__udivmoddi4+0x26e>
 80004c6:	4640      	mov	r0, r8
 80004c8:	e791      	b.n	80003ee <__udivmoddi4+0x1e6>
 80004ca:	4681      	mov	r9, r0
 80004cc:	e7be      	b.n	800044c <__udivmoddi4+0x244>
 80004ce:	4601      	mov	r1, r0
 80004d0:	e778      	b.n	80003c4 <__udivmoddi4+0x1bc>
 80004d2:	3802      	subs	r0, #2
 80004d4:	443c      	add	r4, r7
 80004d6:	e745      	b.n	8000364 <__udivmoddi4+0x15c>
 80004d8:	4608      	mov	r0, r1
 80004da:	e708      	b.n	80002ee <__udivmoddi4+0xe6>
 80004dc:	f1a8 0802 	sub.w	r8, r8, #2
 80004e0:	443d      	add	r5, r7
 80004e2:	e72b      	b.n	800033c <__udivmoddi4+0x134>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004ec:	4a0e      	ldr	r2, [pc, #56]	; (8000528 <HAL_Init+0x40>)
 80004ee:	4b0e      	ldr	r3, [pc, #56]	; (8000528 <HAL_Init+0x40>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004f8:	4a0b      	ldr	r2, [pc, #44]	; (8000528 <HAL_Init+0x40>)
 80004fa:	4b0b      	ldr	r3, [pc, #44]	; (8000528 <HAL_Init+0x40>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000502:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000504:	4a08      	ldr	r2, [pc, #32]	; (8000528 <HAL_Init+0x40>)
 8000506:	4b08      	ldr	r3, [pc, #32]	; (8000528 <HAL_Init+0x40>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800050e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000510:	2003      	movs	r0, #3
 8000512:	f000 f94b 	bl	80007ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000516:	200f      	movs	r0, #15
 8000518:	f000 f808 	bl	800052c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800051c:	f003 fcde 	bl	8003edc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000520:	2300      	movs	r3, #0
}
 8000522:	4618      	mov	r0, r3
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	40023c00 	.word	0x40023c00

0800052c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000534:	4b12      	ldr	r3, [pc, #72]	; (8000580 <HAL_InitTick+0x54>)
 8000536:	681a      	ldr	r2, [r3, #0]
 8000538:	4b12      	ldr	r3, [pc, #72]	; (8000584 <HAL_InitTick+0x58>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	4619      	mov	r1, r3
 800053e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000542:	fbb3 f3f1 	udiv	r3, r3, r1
 8000546:	fbb2 f3f3 	udiv	r3, r2, r3
 800054a:	4618      	mov	r0, r3
 800054c:	f000 f963 	bl	8000816 <HAL_SYSTICK_Config>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d001      	beq.n	800055a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000556:	2301      	movs	r3, #1
 8000558:	e00e      	b.n	8000578 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	2b0f      	cmp	r3, #15
 800055e:	d80a      	bhi.n	8000576 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000560:	2200      	movs	r2, #0
 8000562:	6879      	ldr	r1, [r7, #4]
 8000564:	f04f 30ff 	mov.w	r0, #4294967295
 8000568:	f000 f92b 	bl	80007c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800056c:	4a06      	ldr	r2, [pc, #24]	; (8000588 <HAL_InitTick+0x5c>)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000572:	2300      	movs	r3, #0
 8000574:	e000      	b.n	8000578 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000576:	2301      	movs	r3, #1
}
 8000578:	4618      	mov	r0, r3
 800057a:	3708      	adds	r7, #8
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	20000008 	.word	0x20000008
 8000584:	20000004 	.word	0x20000004
 8000588:	20000000 	.word	0x20000000

0800058c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000590:	4b06      	ldr	r3, [pc, #24]	; (80005ac <HAL_IncTick+0x20>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	461a      	mov	r2, r3
 8000596:	4b06      	ldr	r3, [pc, #24]	; (80005b0 <HAL_IncTick+0x24>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	4413      	add	r3, r2
 800059c:	4a04      	ldr	r2, [pc, #16]	; (80005b0 <HAL_IncTick+0x24>)
 800059e:	6013      	str	r3, [r2, #0]
}
 80005a0:	bf00      	nop
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	20000004 	.word	0x20000004
 80005b0:	20000028 	.word	0x20000028

080005b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  return uwTick;
 80005b8:	4b03      	ldr	r3, [pc, #12]	; (80005c8 <HAL_GetTick+0x14>)
 80005ba:	681b      	ldr	r3, [r3, #0]
}
 80005bc:	4618      	mov	r0, r3
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	20000028 	.word	0x20000028

080005cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005d4:	f7ff ffee 	bl	80005b4 <HAL_GetTick>
 80005d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005e4:	d005      	beq.n	80005f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005e6:	4b09      	ldr	r3, [pc, #36]	; (800060c <HAL_Delay+0x40>)
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	461a      	mov	r2, r3
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	4413      	add	r3, r2
 80005f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005f2:	bf00      	nop
 80005f4:	f7ff ffde 	bl	80005b4 <HAL_GetTick>
 80005f8:	4602      	mov	r2, r0
 80005fa:	68bb      	ldr	r3, [r7, #8]
 80005fc:	1ad2      	subs	r2, r2, r3
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	429a      	cmp	r2, r3
 8000602:	d3f7      	bcc.n	80005f4 <HAL_Delay+0x28>
  {
  }
}
 8000604:	bf00      	nop
 8000606:	3710      	adds	r7, #16
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	20000004 	.word	0x20000004

08000610 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000610:	b480      	push	{r7}
 8000612:	b085      	sub	sp, #20
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	f003 0307 	and.w	r3, r3, #7
 800061e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000620:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <__NVIC_SetPriorityGrouping+0x44>)
 8000622:	68db      	ldr	r3, [r3, #12]
 8000624:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000626:	68ba      	ldr	r2, [r7, #8]
 8000628:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800062c:	4013      	ands	r3, r2
 800062e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000634:	68bb      	ldr	r3, [r7, #8]
 8000636:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000638:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800063c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000640:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000642:	4a04      	ldr	r2, [pc, #16]	; (8000654 <__NVIC_SetPriorityGrouping+0x44>)
 8000644:	68bb      	ldr	r3, [r7, #8]
 8000646:	60d3      	str	r3, [r2, #12]
}
 8000648:	bf00      	nop
 800064a:	3714      	adds	r7, #20
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr
 8000654:	e000ed00 	.word	0xe000ed00

08000658 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800065c:	4b04      	ldr	r3, [pc, #16]	; (8000670 <__NVIC_GetPriorityGrouping+0x18>)
 800065e:	68db      	ldr	r3, [r3, #12]
 8000660:	0a1b      	lsrs	r3, r3, #8
 8000662:	f003 0307 	and.w	r3, r3, #7
}
 8000666:	4618      	mov	r0, r3
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr
 8000670:	e000ed00 	.word	0xe000ed00

08000674 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	4603      	mov	r3, r0
 800067c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800067e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000682:	2b00      	cmp	r3, #0
 8000684:	db0b      	blt.n	800069e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000686:	4909      	ldr	r1, [pc, #36]	; (80006ac <__NVIC_EnableIRQ+0x38>)
 8000688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800068c:	095b      	lsrs	r3, r3, #5
 800068e:	79fa      	ldrb	r2, [r7, #7]
 8000690:	f002 021f 	and.w	r2, r2, #31
 8000694:	2001      	movs	r0, #1
 8000696:	fa00 f202 	lsl.w	r2, r0, r2
 800069a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800069e:	bf00      	nop
 80006a0:	370c      	adds	r7, #12
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	e000e100 	.word	0xe000e100

080006b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	4603      	mov	r3, r0
 80006b8:	6039      	str	r1, [r7, #0]
 80006ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	db0a      	blt.n	80006da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c4:	490d      	ldr	r1, [pc, #52]	; (80006fc <__NVIC_SetPriority+0x4c>)
 80006c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ca:	683a      	ldr	r2, [r7, #0]
 80006cc:	b2d2      	uxtb	r2, r2
 80006ce:	0112      	lsls	r2, r2, #4
 80006d0:	b2d2      	uxtb	r2, r2
 80006d2:	440b      	add	r3, r1
 80006d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006d8:	e00a      	b.n	80006f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006da:	4909      	ldr	r1, [pc, #36]	; (8000700 <__NVIC_SetPriority+0x50>)
 80006dc:	79fb      	ldrb	r3, [r7, #7]
 80006de:	f003 030f 	and.w	r3, r3, #15
 80006e2:	3b04      	subs	r3, #4
 80006e4:	683a      	ldr	r2, [r7, #0]
 80006e6:	b2d2      	uxtb	r2, r2
 80006e8:	0112      	lsls	r2, r2, #4
 80006ea:	b2d2      	uxtb	r2, r2
 80006ec:	440b      	add	r3, r1
 80006ee:	761a      	strb	r2, [r3, #24]
}
 80006f0:	bf00      	nop
 80006f2:	370c      	adds	r7, #12
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr
 80006fc:	e000e100 	.word	0xe000e100
 8000700:	e000ed00 	.word	0xe000ed00

08000704 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000704:	b480      	push	{r7}
 8000706:	b089      	sub	sp, #36	; 0x24
 8000708:	af00      	add	r7, sp, #0
 800070a:	60f8      	str	r0, [r7, #12]
 800070c:	60b9      	str	r1, [r7, #8]
 800070e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	f003 0307 	and.w	r3, r3, #7
 8000716:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000718:	69fb      	ldr	r3, [r7, #28]
 800071a:	f1c3 0307 	rsb	r3, r3, #7
 800071e:	2b04      	cmp	r3, #4
 8000720:	bf28      	it	cs
 8000722:	2304      	movcs	r3, #4
 8000724:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000726:	69fb      	ldr	r3, [r7, #28]
 8000728:	3304      	adds	r3, #4
 800072a:	2b06      	cmp	r3, #6
 800072c:	d902      	bls.n	8000734 <NVIC_EncodePriority+0x30>
 800072e:	69fb      	ldr	r3, [r7, #28]
 8000730:	3b03      	subs	r3, #3
 8000732:	e000      	b.n	8000736 <NVIC_EncodePriority+0x32>
 8000734:	2300      	movs	r3, #0
 8000736:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000738:	2201      	movs	r2, #1
 800073a:	69bb      	ldr	r3, [r7, #24]
 800073c:	fa02 f303 	lsl.w	r3, r2, r3
 8000740:	1e5a      	subs	r2, r3, #1
 8000742:	68bb      	ldr	r3, [r7, #8]
 8000744:	401a      	ands	r2, r3
 8000746:	697b      	ldr	r3, [r7, #20]
 8000748:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800074a:	2101      	movs	r1, #1
 800074c:	697b      	ldr	r3, [r7, #20]
 800074e:	fa01 f303 	lsl.w	r3, r1, r3
 8000752:	1e59      	subs	r1, r3, #1
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000758:	4313      	orrs	r3, r2
         );
}
 800075a:	4618      	mov	r0, r3
 800075c:	3724      	adds	r7, #36	; 0x24
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
	...

08000768 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	3b01      	subs	r3, #1
 8000774:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000778:	d301      	bcc.n	800077e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800077a:	2301      	movs	r3, #1
 800077c:	e00f      	b.n	800079e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800077e:	4a0a      	ldr	r2, [pc, #40]	; (80007a8 <SysTick_Config+0x40>)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	3b01      	subs	r3, #1
 8000784:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000786:	210f      	movs	r1, #15
 8000788:	f04f 30ff 	mov.w	r0, #4294967295
 800078c:	f7ff ff90 	bl	80006b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000790:	4b05      	ldr	r3, [pc, #20]	; (80007a8 <SysTick_Config+0x40>)
 8000792:	2200      	movs	r2, #0
 8000794:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000796:	4b04      	ldr	r3, [pc, #16]	; (80007a8 <SysTick_Config+0x40>)
 8000798:	2207      	movs	r2, #7
 800079a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800079c:	2300      	movs	r3, #0
}
 800079e:	4618      	mov	r0, r3
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	e000e010 	.word	0xe000e010

080007ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007b4:	6878      	ldr	r0, [r7, #4]
 80007b6:	f7ff ff2b 	bl	8000610 <__NVIC_SetPriorityGrouping>
}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}

080007c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007c2:	b580      	push	{r7, lr}
 80007c4:	b086      	sub	sp, #24
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	4603      	mov	r3, r0
 80007ca:	60b9      	str	r1, [r7, #8]
 80007cc:	607a      	str	r2, [r7, #4]
 80007ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007d0:	2300      	movs	r3, #0
 80007d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007d4:	f7ff ff40 	bl	8000658 <__NVIC_GetPriorityGrouping>
 80007d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007da:	687a      	ldr	r2, [r7, #4]
 80007dc:	68b9      	ldr	r1, [r7, #8]
 80007de:	6978      	ldr	r0, [r7, #20]
 80007e0:	f7ff ff90 	bl	8000704 <NVIC_EncodePriority>
 80007e4:	4602      	mov	r2, r0
 80007e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007ea:	4611      	mov	r1, r2
 80007ec:	4618      	mov	r0, r3
 80007ee:	f7ff ff5f 	bl	80006b0 <__NVIC_SetPriority>
}
 80007f2:	bf00      	nop
 80007f4:	3718      	adds	r7, #24
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}

080007fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007fa:	b580      	push	{r7, lr}
 80007fc:	b082      	sub	sp, #8
 80007fe:	af00      	add	r7, sp, #0
 8000800:	4603      	mov	r3, r0
 8000802:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000808:	4618      	mov	r0, r3
 800080a:	f7ff ff33 	bl	8000674 <__NVIC_EnableIRQ>
}
 800080e:	bf00      	nop
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}

08000816 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000816:	b580      	push	{r7, lr}
 8000818:	b082      	sub	sp, #8
 800081a:	af00      	add	r7, sp, #0
 800081c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800081e:	6878      	ldr	r0, [r7, #4]
 8000820:	f7ff ffa2 	bl	8000768 <SysTick_Config>
 8000824:	4603      	mov	r3, r0
}
 8000826:	4618      	mov	r0, r3
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
	...

08000830 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b086      	sub	sp, #24
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000838:	2300      	movs	r3, #0
 800083a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800083c:	f7ff feba 	bl	80005b4 <HAL_GetTick>
 8000840:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d101      	bne.n	800084c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000848:	2301      	movs	r3, #1
 800084a:	e099      	b.n	8000980 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2202      	movs	r2, #2
 8000850:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	2200      	movs	r2, #0
 8000858:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	687a      	ldr	r2, [r7, #4]
 8000862:	6812      	ldr	r2, [r2, #0]
 8000864:	6812      	ldr	r2, [r2, #0]
 8000866:	f022 0201 	bic.w	r2, r2, #1
 800086a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800086c:	e00f      	b.n	800088e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800086e:	f7ff fea1 	bl	80005b4 <HAL_GetTick>
 8000872:	4602      	mov	r2, r0
 8000874:	693b      	ldr	r3, [r7, #16]
 8000876:	1ad3      	subs	r3, r2, r3
 8000878:	2b05      	cmp	r3, #5
 800087a:	d908      	bls.n	800088e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	2220      	movs	r2, #32
 8000880:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	2203      	movs	r2, #3
 8000886:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800088a:	2303      	movs	r3, #3
 800088c:	e078      	b.n	8000980 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	f003 0301 	and.w	r3, r3, #1
 8000898:	2b00      	cmp	r3, #0
 800089a:	d1e8      	bne.n	800086e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80008a4:	697a      	ldr	r2, [r7, #20]
 80008a6:	4b38      	ldr	r3, [pc, #224]	; (8000988 <HAL_DMA_Init+0x158>)
 80008a8:	4013      	ands	r3, r2
 80008aa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	685a      	ldr	r2, [r3, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	689b      	ldr	r3, [r3, #8]
 80008b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80008ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	691b      	ldr	r3, [r3, #16]
 80008c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	699b      	ldr	r3, [r3, #24]
 80008cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	6a1b      	ldr	r3, [r3, #32]
 80008d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80008da:	697a      	ldr	r2, [r7, #20]
 80008dc:	4313      	orrs	r3, r2
 80008de:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008e4:	2b04      	cmp	r3, #4
 80008e6:	d107      	bne.n	80008f8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f0:	4313      	orrs	r3, r2
 80008f2:	697a      	ldr	r2, [r7, #20]
 80008f4:	4313      	orrs	r3, r2
 80008f6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	697a      	ldr	r2, [r7, #20]
 80008fe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	695b      	ldr	r3, [r3, #20]
 8000906:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	f023 0307 	bic.w	r3, r3, #7
 800090e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000914:	697a      	ldr	r2, [r7, #20]
 8000916:	4313      	orrs	r3, r2
 8000918:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800091e:	2b04      	cmp	r3, #4
 8000920:	d117      	bne.n	8000952 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000926:	697a      	ldr	r2, [r7, #20]
 8000928:	4313      	orrs	r3, r2
 800092a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000930:	2b00      	cmp	r3, #0
 8000932:	d00e      	beq.n	8000952 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000934:	6878      	ldr	r0, [r7, #4]
 8000936:	f000 fa6f 	bl	8000e18 <DMA_CheckFifoParam>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d008      	beq.n	8000952 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	2240      	movs	r2, #64	; 0x40
 8000944:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	2201      	movs	r2, #1
 800094a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800094e:	2301      	movs	r3, #1
 8000950:	e016      	b.n	8000980 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	697a      	ldr	r2, [r7, #20]
 8000958:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800095a:	6878      	ldr	r0, [r7, #4]
 800095c:	f000 fa26 	bl	8000dac <DMA_CalcBaseAndBitshift>
 8000960:	4603      	mov	r3, r0
 8000962:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000968:	223f      	movs	r2, #63	; 0x3f
 800096a:	409a      	lsls	r2, r3
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	2200      	movs	r2, #0
 8000974:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	2201      	movs	r2, #1
 800097a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800097e:	2300      	movs	r3, #0
}
 8000980:	4618      	mov	r0, r3
 8000982:	3718      	adds	r7, #24
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	f010803f 	.word	0xf010803f

0800098c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b086      	sub	sp, #24
 8000990:	af00      	add	r7, sp, #0
 8000992:	60f8      	str	r0, [r7, #12]
 8000994:	60b9      	str	r1, [r7, #8]
 8000996:	607a      	str	r2, [r7, #4]
 8000998:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800099a:	2300      	movs	r3, #0
 800099c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009a2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80009aa:	2b01      	cmp	r3, #1
 80009ac:	d101      	bne.n	80009b2 <HAL_DMA_Start_IT+0x26>
 80009ae:	2302      	movs	r3, #2
 80009b0:	e040      	b.n	8000a34 <HAL_DMA_Start_IT+0xa8>
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	2201      	movs	r2, #1
 80009b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	2b01      	cmp	r3, #1
 80009c4:	d12f      	bne.n	8000a26 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	2202      	movs	r2, #2
 80009ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	2200      	movs	r2, #0
 80009d2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	687a      	ldr	r2, [r7, #4]
 80009d8:	68b9      	ldr	r1, [r7, #8]
 80009da:	68f8      	ldr	r0, [r7, #12]
 80009dc:	f000 f9b8 	bl	8000d50 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009e4:	223f      	movs	r2, #63	; 0x3f
 80009e6:	409a      	lsls	r2, r3
 80009e8:	693b      	ldr	r3, [r7, #16]
 80009ea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	68fa      	ldr	r2, [r7, #12]
 80009f2:	6812      	ldr	r2, [r2, #0]
 80009f4:	6812      	ldr	r2, [r2, #0]
 80009f6:	f042 0216 	orr.w	r2, r2, #22
 80009fa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d007      	beq.n	8000a14 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	68fa      	ldr	r2, [r7, #12]
 8000a0a:	6812      	ldr	r2, [r2, #0]
 8000a0c:	6812      	ldr	r2, [r2, #0]
 8000a0e:	f042 0208 	orr.w	r2, r2, #8
 8000a12:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	68fa      	ldr	r2, [r7, #12]
 8000a1a:	6812      	ldr	r2, [r2, #0]
 8000a1c:	6812      	ldr	r2, [r2, #0]
 8000a1e:	f042 0201 	orr.w	r2, r2, #1
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	e005      	b.n	8000a32 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	2200      	movs	r2, #0
 8000a2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8000a32:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	3718      	adds	r7, #24
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b086      	sub	sp, #24
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000a44:	2300      	movs	r3, #0
 8000a46:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000a48:	4b92      	ldr	r3, [pc, #584]	; (8000c94 <HAL_DMA_IRQHandler+0x258>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a92      	ldr	r2, [pc, #584]	; (8000c98 <HAL_DMA_IRQHandler+0x25c>)
 8000a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a52:	0a9b      	lsrs	r3, r3, #10
 8000a54:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a5a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000a5c:	693b      	ldr	r3, [r7, #16]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a66:	2208      	movs	r2, #8
 8000a68:	409a      	lsls	r2, r3
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d01a      	beq.n	8000aa8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	f003 0304 	and.w	r3, r3, #4
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d013      	beq.n	8000aa8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	687a      	ldr	r2, [r7, #4]
 8000a86:	6812      	ldr	r2, [r2, #0]
 8000a88:	6812      	ldr	r2, [r2, #0]
 8000a8a:	f022 0204 	bic.w	r2, r2, #4
 8000a8e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a94:	2208      	movs	r2, #8
 8000a96:	409a      	lsls	r2, r3
 8000a98:	693b      	ldr	r3, [r7, #16]
 8000a9a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000aa0:	f043 0201 	orr.w	r2, r3, #1
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000aac:	2201      	movs	r2, #1
 8000aae:	409a      	lsls	r2, r3
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	4013      	ands	r3, r2
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d012      	beq.n	8000ade <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	695b      	ldr	r3, [r3, #20]
 8000abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d00b      	beq.n	8000ade <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000aca:	2201      	movs	r2, #1
 8000acc:	409a      	lsls	r2, r3
 8000ace:	693b      	ldr	r3, [r7, #16]
 8000ad0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ad6:	f043 0202 	orr.w	r2, r3, #2
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ae2:	2204      	movs	r2, #4
 8000ae4:	409a      	lsls	r2, r3
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	4013      	ands	r3, r2
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d012      	beq.n	8000b14 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	f003 0302 	and.w	r3, r3, #2
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d00b      	beq.n	8000b14 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b00:	2204      	movs	r2, #4
 8000b02:	409a      	lsls	r2, r3
 8000b04:	693b      	ldr	r3, [r7, #16]
 8000b06:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b0c:	f043 0204 	orr.w	r2, r3, #4
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b18:	2210      	movs	r2, #16
 8000b1a:	409a      	lsls	r2, r3
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	4013      	ands	r3, r2
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d043      	beq.n	8000bac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	f003 0308 	and.w	r3, r3, #8
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d03c      	beq.n	8000bac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b36:	2210      	movs	r2, #16
 8000b38:	409a      	lsls	r2, r3
 8000b3a:	693b      	ldr	r3, [r7, #16]
 8000b3c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d018      	beq.n	8000b7e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d108      	bne.n	8000b6c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d024      	beq.n	8000bac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b66:	6878      	ldr	r0, [r7, #4]
 8000b68:	4798      	blx	r3
 8000b6a:	e01f      	b.n	8000bac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d01b      	beq.n	8000bac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b78:	6878      	ldr	r0, [r7, #4]
 8000b7a:	4798      	blx	r3
 8000b7c:	e016      	b.n	8000bac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d107      	bne.n	8000b9c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	687a      	ldr	r2, [r7, #4]
 8000b92:	6812      	ldr	r2, [r2, #0]
 8000b94:	6812      	ldr	r2, [r2, #0]
 8000b96:	f022 0208 	bic.w	r2, r2, #8
 8000b9a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d003      	beq.n	8000bac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba8:	6878      	ldr	r0, [r7, #4]
 8000baa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bb0:	2220      	movs	r2, #32
 8000bb2:	409a      	lsls	r2, r3
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	4013      	ands	r3, r2
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	f000 808e 	beq.w	8000cda <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f003 0310 	and.w	r3, r3, #16
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	f000 8086 	beq.w	8000cda <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bd2:	2220      	movs	r2, #32
 8000bd4:	409a      	lsls	r2, r3
 8000bd6:	693b      	ldr	r3, [r7, #16]
 8000bd8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000be0:	b2db      	uxtb	r3, r3
 8000be2:	2b05      	cmp	r3, #5
 8000be4:	d136      	bne.n	8000c54 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	687a      	ldr	r2, [r7, #4]
 8000bec:	6812      	ldr	r2, [r2, #0]
 8000bee:	6812      	ldr	r2, [r2, #0]
 8000bf0:	f022 0216 	bic.w	r2, r2, #22
 8000bf4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	687a      	ldr	r2, [r7, #4]
 8000bfc:	6812      	ldr	r2, [r2, #0]
 8000bfe:	6952      	ldr	r2, [r2, #20]
 8000c00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000c04:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d103      	bne.n	8000c16 <HAL_DMA_IRQHandler+0x1da>
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d007      	beq.n	8000c26 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	687a      	ldr	r2, [r7, #4]
 8000c1c:	6812      	ldr	r2, [r2, #0]
 8000c1e:	6812      	ldr	r2, [r2, #0]
 8000c20:	f022 0208 	bic.w	r2, r2, #8
 8000c24:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c2a:	223f      	movs	r2, #63	; 0x3f
 8000c2c:	409a      	lsls	r2, r3
 8000c2e:	693b      	ldr	r3, [r7, #16]
 8000c30:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2201      	movs	r2, #1
 8000c36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d07d      	beq.n	8000d46 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000c4e:	6878      	ldr	r0, [r7, #4]
 8000c50:	4798      	blx	r3
        }
        return;
 8000c52:	e078      	b.n	8000d46 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d01c      	beq.n	8000c9c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d108      	bne.n	8000c82 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d030      	beq.n	8000cda <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7c:	6878      	ldr	r0, [r7, #4]
 8000c7e:	4798      	blx	r3
 8000c80:	e02b      	b.n	8000cda <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d027      	beq.n	8000cda <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c8e:	6878      	ldr	r0, [r7, #4]
 8000c90:	4798      	blx	r3
 8000c92:	e022      	b.n	8000cda <HAL_DMA_IRQHandler+0x29e>
 8000c94:	20000008 	.word	0x20000008
 8000c98:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d10f      	bne.n	8000cca <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	687a      	ldr	r2, [r7, #4]
 8000cb0:	6812      	ldr	r2, [r2, #0]
 8000cb2:	6812      	ldr	r2, [r2, #0]
 8000cb4:	f022 0210 	bic.w	r2, r2, #16
 8000cb8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d003      	beq.n	8000cda <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cd6:	6878      	ldr	r0, [r7, #4]
 8000cd8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d032      	beq.n	8000d48 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d022      	beq.n	8000d34 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2205      	movs	r2, #5
 8000cf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	687a      	ldr	r2, [r7, #4]
 8000cfc:	6812      	ldr	r2, [r2, #0]
 8000cfe:	6812      	ldr	r2, [r2, #0]
 8000d00:	f022 0201 	bic.w	r2, r2, #1
 8000d04:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8000d06:	68bb      	ldr	r3, [r7, #8]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	60bb      	str	r3, [r7, #8]
 8000d0c:	697a      	ldr	r2, [r7, #20]
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d807      	bhi.n	8000d22 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f003 0301 	and.w	r3, r3, #1
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d1f2      	bne.n	8000d06 <HAL_DMA_IRQHandler+0x2ca>
 8000d20:	e000      	b.n	8000d24 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8000d22:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2201      	movs	r2, #1
 8000d28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2200      	movs	r2, #0
 8000d30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d005      	beq.n	8000d48 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d40:	6878      	ldr	r0, [r7, #4]
 8000d42:	4798      	blx	r3
 8000d44:	e000      	b.n	8000d48 <HAL_DMA_IRQHandler+0x30c>
        return;
 8000d46:	bf00      	nop
    }
  }
}
 8000d48:	3718      	adds	r7, #24
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop

08000d50 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	60f8      	str	r0, [r7, #12]
 8000d58:	60b9      	str	r1, [r7, #8]
 8000d5a:	607a      	str	r2, [r7, #4]
 8000d5c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	68fa      	ldr	r2, [r7, #12]
 8000d64:	6812      	ldr	r2, [r2, #0]
 8000d66:	6812      	ldr	r2, [r2, #0]
 8000d68:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000d6c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	683a      	ldr	r2, [r7, #0]
 8000d74:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	689b      	ldr	r3, [r3, #8]
 8000d7a:	2b40      	cmp	r3, #64	; 0x40
 8000d7c:	d108      	bne.n	8000d90 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	68ba      	ldr	r2, [r7, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8000d8e:	e007      	b.n	8000da0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	68ba      	ldr	r2, [r7, #8]
 8000d96:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	687a      	ldr	r2, [r7, #4]
 8000d9e:	60da      	str	r2, [r3, #12]
}
 8000da0:	bf00      	nop
 8000da2:	3714      	adds	r7, #20
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr

08000dac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	3b10      	subs	r3, #16
 8000dbc:	4a14      	ldr	r2, [pc, #80]	; (8000e10 <DMA_CalcBaseAndBitshift+0x64>)
 8000dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8000dc2:	091b      	lsrs	r3, r3, #4
 8000dc4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000dc6:	4a13      	ldr	r2, [pc, #76]	; (8000e14 <DMA_CalcBaseAndBitshift+0x68>)
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	4413      	add	r3, r2
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	461a      	mov	r2, r3
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	2b03      	cmp	r3, #3
 8000dd8:	d909      	bls.n	8000dee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000de2:	f023 0303 	bic.w	r3, r3, #3
 8000de6:	1d1a      	adds	r2, r3, #4
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	659a      	str	r2, [r3, #88]	; 0x58
 8000dec:	e007      	b.n	8000dfe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000df6:	f023 0303 	bic.w	r3, r3, #3
 8000dfa:	687a      	ldr	r2, [r7, #4]
 8000dfc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3714      	adds	r7, #20
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	aaaaaaab 	.word	0xaaaaaaab
 8000e14:	08004b98 	.word	0x08004b98

08000e18 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b085      	sub	sp, #20
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e20:	2300      	movs	r3, #0
 8000e22:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e28:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	699b      	ldr	r3, [r3, #24]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d11f      	bne.n	8000e72 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	2b03      	cmp	r3, #3
 8000e36:	d855      	bhi.n	8000ee4 <DMA_CheckFifoParam+0xcc>
 8000e38:	a201      	add	r2, pc, #4	; (adr r2, 8000e40 <DMA_CheckFifoParam+0x28>)
 8000e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e3e:	bf00      	nop
 8000e40:	08000e51 	.word	0x08000e51
 8000e44:	08000e63 	.word	0x08000e63
 8000e48:	08000e51 	.word	0x08000e51
 8000e4c:	08000ee5 	.word	0x08000ee5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d045      	beq.n	8000ee8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000e60:	e042      	b.n	8000ee8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e66:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000e6a:	d13f      	bne.n	8000eec <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000e70:	e03c      	b.n	8000eec <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	699b      	ldr	r3, [r3, #24]
 8000e76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e7a:	d121      	bne.n	8000ec0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	2b03      	cmp	r3, #3
 8000e80:	d836      	bhi.n	8000ef0 <DMA_CheckFifoParam+0xd8>
 8000e82:	a201      	add	r2, pc, #4	; (adr r2, 8000e88 <DMA_CheckFifoParam+0x70>)
 8000e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e88:	08000e99 	.word	0x08000e99
 8000e8c:	08000e9f 	.word	0x08000e9f
 8000e90:	08000e99 	.word	0x08000e99
 8000e94:	08000eb1 	.word	0x08000eb1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	73fb      	strb	r3, [r7, #15]
      break;
 8000e9c:	e02f      	b.n	8000efe <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ea2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d024      	beq.n	8000ef4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000eae:	e021      	b.n	8000ef4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eb4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000eb8:	d11e      	bne.n	8000ef8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8000ebe:	e01b      	b.n	8000ef8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	2b02      	cmp	r3, #2
 8000ec4:	d902      	bls.n	8000ecc <DMA_CheckFifoParam+0xb4>
 8000ec6:	2b03      	cmp	r3, #3
 8000ec8:	d003      	beq.n	8000ed2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8000eca:	e018      	b.n	8000efe <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	73fb      	strb	r3, [r7, #15]
      break;
 8000ed0:	e015      	b.n	8000efe <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ed6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d00e      	beq.n	8000efc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	73fb      	strb	r3, [r7, #15]
      break;
 8000ee2:	e00b      	b.n	8000efc <DMA_CheckFifoParam+0xe4>
      break;
 8000ee4:	bf00      	nop
 8000ee6:	e00a      	b.n	8000efe <DMA_CheckFifoParam+0xe6>
      break;
 8000ee8:	bf00      	nop
 8000eea:	e008      	b.n	8000efe <DMA_CheckFifoParam+0xe6>
      break;
 8000eec:	bf00      	nop
 8000eee:	e006      	b.n	8000efe <DMA_CheckFifoParam+0xe6>
      break;
 8000ef0:	bf00      	nop
 8000ef2:	e004      	b.n	8000efe <DMA_CheckFifoParam+0xe6>
      break;
 8000ef4:	bf00      	nop
 8000ef6:	e002      	b.n	8000efe <DMA_CheckFifoParam+0xe6>
      break;   
 8000ef8:	bf00      	nop
 8000efa:	e000      	b.n	8000efe <DMA_CheckFifoParam+0xe6>
      break;
 8000efc:	bf00      	nop
    }
  } 
  
  return status; 
 8000efe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3714      	adds	r7, #20
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b089      	sub	sp, #36	; 0x24
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f16:	2300      	movs	r3, #0
 8000f18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f22:	2300      	movs	r3, #0
 8000f24:	61fb      	str	r3, [r7, #28]
 8000f26:	e159      	b.n	80011dc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f28:	2201      	movs	r2, #1
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f3c:	693a      	ldr	r2, [r7, #16]
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	f040 8148 	bne.w	80011d6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f003 0303 	and.w	r3, r3, #3
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d005      	beq.n	8000f5e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f5a:	2b02      	cmp	r3, #2
 8000f5c:	d130      	bne.n	8000fc0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	2203      	movs	r2, #3
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	43db      	mvns	r3, r3
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	4013      	ands	r3, r2
 8000f74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	68da      	ldr	r2, [r3, #12]
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f94:	2201      	movs	r2, #1
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	091b      	lsrs	r3, r3, #4
 8000faa:	f003 0201 	and.w	r2, r3, #1
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f003 0303 	and.w	r3, r3, #3
 8000fc8:	2b03      	cmp	r3, #3
 8000fca:	d017      	beq.n	8000ffc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	2203      	movs	r2, #3
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	689a      	ldr	r2, [r3, #8]
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f003 0303 	and.w	r3, r3, #3
 8001004:	2b02      	cmp	r3, #2
 8001006:	d123      	bne.n	8001050 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	08da      	lsrs	r2, r3, #3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	3208      	adds	r2, #8
 8001010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001014:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	f003 0307 	and.w	r3, r3, #7
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	220f      	movs	r2, #15
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	43db      	mvns	r3, r3
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	4013      	ands	r3, r2
 800102a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	691a      	ldr	r2, [r3, #16]
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	f003 0307 	and.w	r3, r3, #7
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	4313      	orrs	r3, r2
 8001040:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	08da      	lsrs	r2, r3, #3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	3208      	adds	r2, #8
 800104a:	69b9      	ldr	r1, [r7, #24]
 800104c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	2203      	movs	r2, #3
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	43db      	mvns	r3, r3
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4013      	ands	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f003 0203 	and.w	r2, r3, #3
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	4313      	orrs	r3, r2
 800107c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800108c:	2b00      	cmp	r3, #0
 800108e:	f000 80a2 	beq.w	80011d6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	4a56      	ldr	r2, [pc, #344]	; (80011f0 <HAL_GPIO_Init+0x2e4>)
 8001098:	4b55      	ldr	r3, [pc, #340]	; (80011f0 <HAL_GPIO_Init+0x2e4>)
 800109a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010a0:	6453      	str	r3, [r2, #68]	; 0x44
 80010a2:	4b53      	ldr	r3, [pc, #332]	; (80011f0 <HAL_GPIO_Init+0x2e4>)
 80010a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010ae:	4a51      	ldr	r2, [pc, #324]	; (80011f4 <HAL_GPIO_Init+0x2e8>)
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	089b      	lsrs	r3, r3, #2
 80010b4:	3302      	adds	r3, #2
 80010b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	f003 0303 	and.w	r3, r3, #3
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	220f      	movs	r2, #15
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	43db      	mvns	r3, r3
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	4013      	ands	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a48      	ldr	r2, [pc, #288]	; (80011f8 <HAL_GPIO_Init+0x2ec>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d019      	beq.n	800110e <HAL_GPIO_Init+0x202>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a47      	ldr	r2, [pc, #284]	; (80011fc <HAL_GPIO_Init+0x2f0>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d013      	beq.n	800110a <HAL_GPIO_Init+0x1fe>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a46      	ldr	r2, [pc, #280]	; (8001200 <HAL_GPIO_Init+0x2f4>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d00d      	beq.n	8001106 <HAL_GPIO_Init+0x1fa>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a45      	ldr	r2, [pc, #276]	; (8001204 <HAL_GPIO_Init+0x2f8>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d007      	beq.n	8001102 <HAL_GPIO_Init+0x1f6>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a44      	ldr	r2, [pc, #272]	; (8001208 <HAL_GPIO_Init+0x2fc>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d101      	bne.n	80010fe <HAL_GPIO_Init+0x1f2>
 80010fa:	2304      	movs	r3, #4
 80010fc:	e008      	b.n	8001110 <HAL_GPIO_Init+0x204>
 80010fe:	2307      	movs	r3, #7
 8001100:	e006      	b.n	8001110 <HAL_GPIO_Init+0x204>
 8001102:	2303      	movs	r3, #3
 8001104:	e004      	b.n	8001110 <HAL_GPIO_Init+0x204>
 8001106:	2302      	movs	r3, #2
 8001108:	e002      	b.n	8001110 <HAL_GPIO_Init+0x204>
 800110a:	2301      	movs	r3, #1
 800110c:	e000      	b.n	8001110 <HAL_GPIO_Init+0x204>
 800110e:	2300      	movs	r3, #0
 8001110:	69fa      	ldr	r2, [r7, #28]
 8001112:	f002 0203 	and.w	r2, r2, #3
 8001116:	0092      	lsls	r2, r2, #2
 8001118:	4093      	lsls	r3, r2
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	4313      	orrs	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001120:	4934      	ldr	r1, [pc, #208]	; (80011f4 <HAL_GPIO_Init+0x2e8>)
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	089b      	lsrs	r3, r3, #2
 8001126:	3302      	adds	r3, #2
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800112e:	4b37      	ldr	r3, [pc, #220]	; (800120c <HAL_GPIO_Init+0x300>)
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	43db      	mvns	r3, r3
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	4013      	ands	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001146:	2b00      	cmp	r3, #0
 8001148:	d003      	beq.n	8001152 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	4313      	orrs	r3, r2
 8001150:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001152:	4a2e      	ldr	r2, [pc, #184]	; (800120c <HAL_GPIO_Init+0x300>)
 8001154:	69bb      	ldr	r3, [r7, #24]
 8001156:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001158:	4b2c      	ldr	r3, [pc, #176]	; (800120c <HAL_GPIO_Init+0x300>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	43db      	mvns	r3, r3
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	4013      	ands	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001170:	2b00      	cmp	r3, #0
 8001172:	d003      	beq.n	800117c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	4313      	orrs	r3, r2
 800117a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800117c:	4a23      	ldr	r2, [pc, #140]	; (800120c <HAL_GPIO_Init+0x300>)
 800117e:	69bb      	ldr	r3, [r7, #24]
 8001180:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001182:	4b22      	ldr	r3, [pc, #136]	; (800120c <HAL_GPIO_Init+0x300>)
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	43db      	mvns	r3, r3
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	4013      	ands	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d003      	beq.n	80011a6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011a6:	4a19      	ldr	r2, [pc, #100]	; (800120c <HAL_GPIO_Init+0x300>)
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011ac:	4b17      	ldr	r3, [pc, #92]	; (800120c <HAL_GPIO_Init+0x300>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	43db      	mvns	r3, r3
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	4013      	ands	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d003      	beq.n	80011d0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011d0:	4a0e      	ldr	r2, [pc, #56]	; (800120c <HAL_GPIO_Init+0x300>)
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	3301      	adds	r3, #1
 80011da:	61fb      	str	r3, [r7, #28]
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	2b0f      	cmp	r3, #15
 80011e0:	f67f aea2 	bls.w	8000f28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011e4:	bf00      	nop
 80011e6:	3724      	adds	r7, #36	; 0x24
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	40023800 	.word	0x40023800
 80011f4:	40013800 	.word	0x40013800
 80011f8:	40020000 	.word	0x40020000
 80011fc:	40020400 	.word	0x40020400
 8001200:	40020800 	.word	0x40020800
 8001204:	40020c00 	.word	0x40020c00
 8001208:	40021000 	.word	0x40021000
 800120c:	40013c00 	.word	0x40013c00

08001210 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b086      	sub	sp, #24
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d101      	bne.n	8001222 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e264      	b.n	80016ec <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	2b00      	cmp	r3, #0
 800122c:	d075      	beq.n	800131a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800122e:	4ba3      	ldr	r3, [pc, #652]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	f003 030c 	and.w	r3, r3, #12
 8001236:	2b04      	cmp	r3, #4
 8001238:	d00c      	beq.n	8001254 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800123a:	4ba0      	ldr	r3, [pc, #640]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001242:	2b08      	cmp	r3, #8
 8001244:	d112      	bne.n	800126c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001246:	4b9d      	ldr	r3, [pc, #628]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800124e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001252:	d10b      	bne.n	800126c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001254:	4b99      	ldr	r3, [pc, #612]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125c:	2b00      	cmp	r3, #0
 800125e:	d05b      	beq.n	8001318 <HAL_RCC_OscConfig+0x108>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d157      	bne.n	8001318 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	e23f      	b.n	80016ec <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001274:	d106      	bne.n	8001284 <HAL_RCC_OscConfig+0x74>
 8001276:	4a91      	ldr	r2, [pc, #580]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 8001278:	4b90      	ldr	r3, [pc, #576]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001280:	6013      	str	r3, [r2, #0]
 8001282:	e01d      	b.n	80012c0 <HAL_RCC_OscConfig+0xb0>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800128c:	d10c      	bne.n	80012a8 <HAL_RCC_OscConfig+0x98>
 800128e:	4a8b      	ldr	r2, [pc, #556]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 8001290:	4b8a      	ldr	r3, [pc, #552]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001298:	6013      	str	r3, [r2, #0]
 800129a:	4a88      	ldr	r2, [pc, #544]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 800129c:	4b87      	ldr	r3, [pc, #540]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012a4:	6013      	str	r3, [r2, #0]
 80012a6:	e00b      	b.n	80012c0 <HAL_RCC_OscConfig+0xb0>
 80012a8:	4a84      	ldr	r2, [pc, #528]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 80012aa:	4b84      	ldr	r3, [pc, #528]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012b2:	6013      	str	r3, [r2, #0]
 80012b4:	4a81      	ldr	r2, [pc, #516]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 80012b6:	4b81      	ldr	r3, [pc, #516]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d013      	beq.n	80012f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c8:	f7ff f974 	bl	80005b4 <HAL_GetTick>
 80012cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ce:	e008      	b.n	80012e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012d0:	f7ff f970 	bl	80005b4 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	2b64      	cmp	r3, #100	; 0x64
 80012dc:	d901      	bls.n	80012e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	e204      	b.n	80016ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012e2:	4b76      	ldr	r3, [pc, #472]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d0f0      	beq.n	80012d0 <HAL_RCC_OscConfig+0xc0>
 80012ee:	e014      	b.n	800131a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f0:	f7ff f960 	bl	80005b4 <HAL_GetTick>
 80012f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012f6:	e008      	b.n	800130a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012f8:	f7ff f95c 	bl	80005b4 <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	2b64      	cmp	r3, #100	; 0x64
 8001304:	d901      	bls.n	800130a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	e1f0      	b.n	80016ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800130a:	4b6c      	ldr	r3, [pc, #432]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d1f0      	bne.n	80012f8 <HAL_RCC_OscConfig+0xe8>
 8001316:	e000      	b.n	800131a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001318:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 0302 	and.w	r3, r3, #2
 8001322:	2b00      	cmp	r3, #0
 8001324:	d063      	beq.n	80013ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001326:	4b65      	ldr	r3, [pc, #404]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	f003 030c 	and.w	r3, r3, #12
 800132e:	2b00      	cmp	r3, #0
 8001330:	d00b      	beq.n	800134a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001332:	4b62      	ldr	r3, [pc, #392]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800133a:	2b08      	cmp	r3, #8
 800133c:	d11c      	bne.n	8001378 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800133e:	4b5f      	ldr	r3, [pc, #380]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d116      	bne.n	8001378 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800134a:	4b5c      	ldr	r3, [pc, #368]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 0302 	and.w	r3, r3, #2
 8001352:	2b00      	cmp	r3, #0
 8001354:	d005      	beq.n	8001362 <HAL_RCC_OscConfig+0x152>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	68db      	ldr	r3, [r3, #12]
 800135a:	2b01      	cmp	r3, #1
 800135c:	d001      	beq.n	8001362 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e1c4      	b.n	80016ec <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001362:	4956      	ldr	r1, [pc, #344]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 8001364:	4b55      	ldr	r3, [pc, #340]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	691b      	ldr	r3, [r3, #16]
 8001370:	00db      	lsls	r3, r3, #3
 8001372:	4313      	orrs	r3, r2
 8001374:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001376:	e03a      	b.n	80013ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d020      	beq.n	80013c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001380:	4b4f      	ldr	r3, [pc, #316]	; (80014c0 <HAL_RCC_OscConfig+0x2b0>)
 8001382:	2201      	movs	r2, #1
 8001384:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001386:	f7ff f915 	bl	80005b4 <HAL_GetTick>
 800138a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800138c:	e008      	b.n	80013a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800138e:	f7ff f911 	bl	80005b4 <HAL_GetTick>
 8001392:	4602      	mov	r2, r0
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	2b02      	cmp	r3, #2
 800139a:	d901      	bls.n	80013a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800139c:	2303      	movs	r3, #3
 800139e:	e1a5      	b.n	80016ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013a0:	4b46      	ldr	r3, [pc, #280]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 0302 	and.w	r3, r3, #2
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d0f0      	beq.n	800138e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ac:	4943      	ldr	r1, [pc, #268]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 80013ae:	4b43      	ldr	r3, [pc, #268]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	691b      	ldr	r3, [r3, #16]
 80013ba:	00db      	lsls	r3, r3, #3
 80013bc:	4313      	orrs	r3, r2
 80013be:	600b      	str	r3, [r1, #0]
 80013c0:	e015      	b.n	80013ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013c2:	4b3f      	ldr	r3, [pc, #252]	; (80014c0 <HAL_RCC_OscConfig+0x2b0>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013c8:	f7ff f8f4 	bl	80005b4 <HAL_GetTick>
 80013cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ce:	e008      	b.n	80013e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013d0:	f7ff f8f0 	bl	80005b4 <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d901      	bls.n	80013e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e184      	b.n	80016ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013e2:	4b36      	ldr	r3, [pc, #216]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d1f0      	bne.n	80013d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 0308 	and.w	r3, r3, #8
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d030      	beq.n	800145c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	695b      	ldr	r3, [r3, #20]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d016      	beq.n	8001430 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001402:	4b30      	ldr	r3, [pc, #192]	; (80014c4 <HAL_RCC_OscConfig+0x2b4>)
 8001404:	2201      	movs	r2, #1
 8001406:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001408:	f7ff f8d4 	bl	80005b4 <HAL_GetTick>
 800140c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800140e:	e008      	b.n	8001422 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001410:	f7ff f8d0 	bl	80005b4 <HAL_GetTick>
 8001414:	4602      	mov	r2, r0
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	2b02      	cmp	r3, #2
 800141c:	d901      	bls.n	8001422 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	e164      	b.n	80016ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001422:	4b26      	ldr	r3, [pc, #152]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 8001424:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	2b00      	cmp	r3, #0
 800142c:	d0f0      	beq.n	8001410 <HAL_RCC_OscConfig+0x200>
 800142e:	e015      	b.n	800145c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001430:	4b24      	ldr	r3, [pc, #144]	; (80014c4 <HAL_RCC_OscConfig+0x2b4>)
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001436:	f7ff f8bd 	bl	80005b4 <HAL_GetTick>
 800143a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800143c:	e008      	b.n	8001450 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800143e:	f7ff f8b9 	bl	80005b4 <HAL_GetTick>
 8001442:	4602      	mov	r2, r0
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	2b02      	cmp	r3, #2
 800144a:	d901      	bls.n	8001450 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800144c:	2303      	movs	r3, #3
 800144e:	e14d      	b.n	80016ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001450:	4b1a      	ldr	r3, [pc, #104]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 8001452:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001454:	f003 0302 	and.w	r3, r3, #2
 8001458:	2b00      	cmp	r3, #0
 800145a:	d1f0      	bne.n	800143e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 0304 	and.w	r3, r3, #4
 8001464:	2b00      	cmp	r3, #0
 8001466:	f000 80a0 	beq.w	80015aa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800146a:	2300      	movs	r3, #0
 800146c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800146e:	4b13      	ldr	r3, [pc, #76]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 8001470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d10f      	bne.n	800149a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	60bb      	str	r3, [r7, #8]
 800147e:	4a0f      	ldr	r2, [pc, #60]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 8001480:	4b0e      	ldr	r3, [pc, #56]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 8001482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001488:	6413      	str	r3, [r2, #64]	; 0x40
 800148a:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 800148c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001492:	60bb      	str	r3, [r7, #8]
 8001494:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001496:	2301      	movs	r3, #1
 8001498:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800149a:	4b0b      	ldr	r3, [pc, #44]	; (80014c8 <HAL_RCC_OscConfig+0x2b8>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d121      	bne.n	80014ea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014a6:	4a08      	ldr	r2, [pc, #32]	; (80014c8 <HAL_RCC_OscConfig+0x2b8>)
 80014a8:	4b07      	ldr	r3, [pc, #28]	; (80014c8 <HAL_RCC_OscConfig+0x2b8>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014b2:	f7ff f87f 	bl	80005b4 <HAL_GetTick>
 80014b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014b8:	e011      	b.n	80014de <HAL_RCC_OscConfig+0x2ce>
 80014ba:	bf00      	nop
 80014bc:	40023800 	.word	0x40023800
 80014c0:	42470000 	.word	0x42470000
 80014c4:	42470e80 	.word	0x42470e80
 80014c8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014cc:	f7ff f872 	bl	80005b4 <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d901      	bls.n	80014de <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e106      	b.n	80016ec <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014de:	4b85      	ldr	r3, [pc, #532]	; (80016f4 <HAL_RCC_OscConfig+0x4e4>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d0f0      	beq.n	80014cc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d106      	bne.n	8001500 <HAL_RCC_OscConfig+0x2f0>
 80014f2:	4a81      	ldr	r2, [pc, #516]	; (80016f8 <HAL_RCC_OscConfig+0x4e8>)
 80014f4:	4b80      	ldr	r3, [pc, #512]	; (80016f8 <HAL_RCC_OscConfig+0x4e8>)
 80014f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014f8:	f043 0301 	orr.w	r3, r3, #1
 80014fc:	6713      	str	r3, [r2, #112]	; 0x70
 80014fe:	e01c      	b.n	800153a <HAL_RCC_OscConfig+0x32a>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	2b05      	cmp	r3, #5
 8001506:	d10c      	bne.n	8001522 <HAL_RCC_OscConfig+0x312>
 8001508:	4a7b      	ldr	r2, [pc, #492]	; (80016f8 <HAL_RCC_OscConfig+0x4e8>)
 800150a:	4b7b      	ldr	r3, [pc, #492]	; (80016f8 <HAL_RCC_OscConfig+0x4e8>)
 800150c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800150e:	f043 0304 	orr.w	r3, r3, #4
 8001512:	6713      	str	r3, [r2, #112]	; 0x70
 8001514:	4a78      	ldr	r2, [pc, #480]	; (80016f8 <HAL_RCC_OscConfig+0x4e8>)
 8001516:	4b78      	ldr	r3, [pc, #480]	; (80016f8 <HAL_RCC_OscConfig+0x4e8>)
 8001518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800151a:	f043 0301 	orr.w	r3, r3, #1
 800151e:	6713      	str	r3, [r2, #112]	; 0x70
 8001520:	e00b      	b.n	800153a <HAL_RCC_OscConfig+0x32a>
 8001522:	4a75      	ldr	r2, [pc, #468]	; (80016f8 <HAL_RCC_OscConfig+0x4e8>)
 8001524:	4b74      	ldr	r3, [pc, #464]	; (80016f8 <HAL_RCC_OscConfig+0x4e8>)
 8001526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001528:	f023 0301 	bic.w	r3, r3, #1
 800152c:	6713      	str	r3, [r2, #112]	; 0x70
 800152e:	4a72      	ldr	r2, [pc, #456]	; (80016f8 <HAL_RCC_OscConfig+0x4e8>)
 8001530:	4b71      	ldr	r3, [pc, #452]	; (80016f8 <HAL_RCC_OscConfig+0x4e8>)
 8001532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001534:	f023 0304 	bic.w	r3, r3, #4
 8001538:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d015      	beq.n	800156e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001542:	f7ff f837 	bl	80005b4 <HAL_GetTick>
 8001546:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001548:	e00a      	b.n	8001560 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800154a:	f7ff f833 	bl	80005b4 <HAL_GetTick>
 800154e:	4602      	mov	r2, r0
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	f241 3288 	movw	r2, #5000	; 0x1388
 8001558:	4293      	cmp	r3, r2
 800155a:	d901      	bls.n	8001560 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800155c:	2303      	movs	r3, #3
 800155e:	e0c5      	b.n	80016ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001560:	4b65      	ldr	r3, [pc, #404]	; (80016f8 <HAL_RCC_OscConfig+0x4e8>)
 8001562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001564:	f003 0302 	and.w	r3, r3, #2
 8001568:	2b00      	cmp	r3, #0
 800156a:	d0ee      	beq.n	800154a <HAL_RCC_OscConfig+0x33a>
 800156c:	e014      	b.n	8001598 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800156e:	f7ff f821 	bl	80005b4 <HAL_GetTick>
 8001572:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001574:	e00a      	b.n	800158c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001576:	f7ff f81d 	bl	80005b4 <HAL_GetTick>
 800157a:	4602      	mov	r2, r0
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	f241 3288 	movw	r2, #5000	; 0x1388
 8001584:	4293      	cmp	r3, r2
 8001586:	d901      	bls.n	800158c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001588:	2303      	movs	r3, #3
 800158a:	e0af      	b.n	80016ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800158c:	4b5a      	ldr	r3, [pc, #360]	; (80016f8 <HAL_RCC_OscConfig+0x4e8>)
 800158e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001590:	f003 0302 	and.w	r3, r3, #2
 8001594:	2b00      	cmp	r3, #0
 8001596:	d1ee      	bne.n	8001576 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001598:	7dfb      	ldrb	r3, [r7, #23]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d105      	bne.n	80015aa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800159e:	4a56      	ldr	r2, [pc, #344]	; (80016f8 <HAL_RCC_OscConfig+0x4e8>)
 80015a0:	4b55      	ldr	r3, [pc, #340]	; (80016f8 <HAL_RCC_OscConfig+0x4e8>)
 80015a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	699b      	ldr	r3, [r3, #24]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	f000 809b 	beq.w	80016ea <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015b4:	4b50      	ldr	r3, [pc, #320]	; (80016f8 <HAL_RCC_OscConfig+0x4e8>)
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	f003 030c 	and.w	r3, r3, #12
 80015bc:	2b08      	cmp	r3, #8
 80015be:	d05c      	beq.n	800167a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	699b      	ldr	r3, [r3, #24]
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d141      	bne.n	800164c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015c8:	4b4c      	ldr	r3, [pc, #304]	; (80016fc <HAL_RCC_OscConfig+0x4ec>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ce:	f7fe fff1 	bl	80005b4 <HAL_GetTick>
 80015d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015d4:	e008      	b.n	80015e8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015d6:	f7fe ffed 	bl	80005b4 <HAL_GetTick>
 80015da:	4602      	mov	r2, r0
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d901      	bls.n	80015e8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e081      	b.n	80016ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015e8:	4b43      	ldr	r3, [pc, #268]	; (80016f8 <HAL_RCC_OscConfig+0x4e8>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d1f0      	bne.n	80015d6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015f4:	4940      	ldr	r1, [pc, #256]	; (80016f8 <HAL_RCC_OscConfig+0x4e8>)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	69da      	ldr	r2, [r3, #28]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6a1b      	ldr	r3, [r3, #32]
 80015fe:	431a      	orrs	r2, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001604:	019b      	lsls	r3, r3, #6
 8001606:	431a      	orrs	r2, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800160c:	085b      	lsrs	r3, r3, #1
 800160e:	3b01      	subs	r3, #1
 8001610:	041b      	lsls	r3, r3, #16
 8001612:	431a      	orrs	r2, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001618:	061b      	lsls	r3, r3, #24
 800161a:	4313      	orrs	r3, r2
 800161c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800161e:	4b37      	ldr	r3, [pc, #220]	; (80016fc <HAL_RCC_OscConfig+0x4ec>)
 8001620:	2201      	movs	r2, #1
 8001622:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001624:	f7fe ffc6 	bl	80005b4 <HAL_GetTick>
 8001628:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800162a:	e008      	b.n	800163e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800162c:	f7fe ffc2 	bl	80005b4 <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	2b02      	cmp	r3, #2
 8001638:	d901      	bls.n	800163e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e056      	b.n	80016ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800163e:	4b2e      	ldr	r3, [pc, #184]	; (80016f8 <HAL_RCC_OscConfig+0x4e8>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d0f0      	beq.n	800162c <HAL_RCC_OscConfig+0x41c>
 800164a:	e04e      	b.n	80016ea <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800164c:	4b2b      	ldr	r3, [pc, #172]	; (80016fc <HAL_RCC_OscConfig+0x4ec>)
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001652:	f7fe ffaf 	bl	80005b4 <HAL_GetTick>
 8001656:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001658:	e008      	b.n	800166c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800165a:	f7fe ffab 	bl	80005b4 <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	2b02      	cmp	r3, #2
 8001666:	d901      	bls.n	800166c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	e03f      	b.n	80016ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800166c:	4b22      	ldr	r3, [pc, #136]	; (80016f8 <HAL_RCC_OscConfig+0x4e8>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d1f0      	bne.n	800165a <HAL_RCC_OscConfig+0x44a>
 8001678:	e037      	b.n	80016ea <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	699b      	ldr	r3, [r3, #24]
 800167e:	2b01      	cmp	r3, #1
 8001680:	d101      	bne.n	8001686 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e032      	b.n	80016ec <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001686:	4b1c      	ldr	r3, [pc, #112]	; (80016f8 <HAL_RCC_OscConfig+0x4e8>)
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	699b      	ldr	r3, [r3, #24]
 8001690:	2b01      	cmp	r3, #1
 8001692:	d028      	beq.n	80016e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800169e:	429a      	cmp	r2, r3
 80016a0:	d121      	bne.n	80016e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d11a      	bne.n	80016e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016b0:	68fa      	ldr	r2, [r7, #12]
 80016b2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016b6:	4013      	ands	r3, r2
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016bc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016be:	4293      	cmp	r3, r2
 80016c0:	d111      	bne.n	80016e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016cc:	085b      	lsrs	r3, r3, #1
 80016ce:	3b01      	subs	r3, #1
 80016d0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d107      	bne.n	80016e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d001      	beq.n	80016ea <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e000      	b.n	80016ec <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80016ea:	2300      	movs	r3, #0
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3718      	adds	r7, #24
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	40007000 	.word	0x40007000
 80016f8:	40023800 	.word	0x40023800
 80016fc:	42470060 	.word	0x42470060

08001700 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d101      	bne.n	8001714 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e0cc      	b.n	80018ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001714:	4b68      	ldr	r3, [pc, #416]	; (80018b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0207 	and.w	r2, r3, #7
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	429a      	cmp	r2, r3
 8001720:	d20c      	bcs.n	800173c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001722:	4b65      	ldr	r3, [pc, #404]	; (80018b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001724:	683a      	ldr	r2, [r7, #0]
 8001726:	b2d2      	uxtb	r2, r2
 8001728:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800172a:	4b63      	ldr	r3, [pc, #396]	; (80018b8 <HAL_RCC_ClockConfig+0x1b8>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0207 	and.w	r2, r3, #7
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	429a      	cmp	r2, r3
 8001736:	d001      	beq.n	800173c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e0b8      	b.n	80018ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0302 	and.w	r3, r3, #2
 8001744:	2b00      	cmp	r3, #0
 8001746:	d020      	beq.n	800178a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0304 	and.w	r3, r3, #4
 8001750:	2b00      	cmp	r3, #0
 8001752:	d005      	beq.n	8001760 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001754:	4a59      	ldr	r2, [pc, #356]	; (80018bc <HAL_RCC_ClockConfig+0x1bc>)
 8001756:	4b59      	ldr	r3, [pc, #356]	; (80018bc <HAL_RCC_ClockConfig+0x1bc>)
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800175e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0308 	and.w	r3, r3, #8
 8001768:	2b00      	cmp	r3, #0
 800176a:	d005      	beq.n	8001778 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800176c:	4a53      	ldr	r2, [pc, #332]	; (80018bc <HAL_RCC_ClockConfig+0x1bc>)
 800176e:	4b53      	ldr	r3, [pc, #332]	; (80018bc <HAL_RCC_ClockConfig+0x1bc>)
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001776:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001778:	4950      	ldr	r1, [pc, #320]	; (80018bc <HAL_RCC_ClockConfig+0x1bc>)
 800177a:	4b50      	ldr	r3, [pc, #320]	; (80018bc <HAL_RCC_ClockConfig+0x1bc>)
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	4313      	orrs	r3, r2
 8001788:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	2b00      	cmp	r3, #0
 8001794:	d044      	beq.n	8001820 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	2b01      	cmp	r3, #1
 800179c:	d107      	bne.n	80017ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800179e:	4b47      	ldr	r3, [pc, #284]	; (80018bc <HAL_RCC_ClockConfig+0x1bc>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d119      	bne.n	80017de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e07f      	b.n	80018ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d003      	beq.n	80017be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017ba:	2b03      	cmp	r3, #3
 80017bc:	d107      	bne.n	80017ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017be:	4b3f      	ldr	r3, [pc, #252]	; (80018bc <HAL_RCC_ClockConfig+0x1bc>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d109      	bne.n	80017de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e06f      	b.n	80018ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ce:	4b3b      	ldr	r3, [pc, #236]	; (80018bc <HAL_RCC_ClockConfig+0x1bc>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0302 	and.w	r3, r3, #2
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d101      	bne.n	80017de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e067      	b.n	80018ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017de:	4937      	ldr	r1, [pc, #220]	; (80018bc <HAL_RCC_ClockConfig+0x1bc>)
 80017e0:	4b36      	ldr	r3, [pc, #216]	; (80018bc <HAL_RCC_ClockConfig+0x1bc>)
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	f023 0203 	bic.w	r2, r3, #3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017f0:	f7fe fee0 	bl	80005b4 <HAL_GetTick>
 80017f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017f6:	e00a      	b.n	800180e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017f8:	f7fe fedc 	bl	80005b4 <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	f241 3288 	movw	r2, #5000	; 0x1388
 8001806:	4293      	cmp	r3, r2
 8001808:	d901      	bls.n	800180e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e04f      	b.n	80018ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800180e:	4b2b      	ldr	r3, [pc, #172]	; (80018bc <HAL_RCC_ClockConfig+0x1bc>)
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	f003 020c 	and.w	r2, r3, #12
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	429a      	cmp	r2, r3
 800181e:	d1eb      	bne.n	80017f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001820:	4b25      	ldr	r3, [pc, #148]	; (80018b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0207 	and.w	r2, r3, #7
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	429a      	cmp	r2, r3
 800182c:	d90c      	bls.n	8001848 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800182e:	4b22      	ldr	r3, [pc, #136]	; (80018b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001830:	683a      	ldr	r2, [r7, #0]
 8001832:	b2d2      	uxtb	r2, r2
 8001834:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001836:	4b20      	ldr	r3, [pc, #128]	; (80018b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0207 	and.w	r2, r3, #7
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	429a      	cmp	r2, r3
 8001842:	d001      	beq.n	8001848 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e032      	b.n	80018ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0304 	and.w	r3, r3, #4
 8001850:	2b00      	cmp	r3, #0
 8001852:	d008      	beq.n	8001866 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001854:	4919      	ldr	r1, [pc, #100]	; (80018bc <HAL_RCC_ClockConfig+0x1bc>)
 8001856:	4b19      	ldr	r3, [pc, #100]	; (80018bc <HAL_RCC_ClockConfig+0x1bc>)
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	68db      	ldr	r3, [r3, #12]
 8001862:	4313      	orrs	r3, r2
 8001864:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0308 	and.w	r3, r3, #8
 800186e:	2b00      	cmp	r3, #0
 8001870:	d009      	beq.n	8001886 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001872:	4912      	ldr	r1, [pc, #72]	; (80018bc <HAL_RCC_ClockConfig+0x1bc>)
 8001874:	4b11      	ldr	r3, [pc, #68]	; (80018bc <HAL_RCC_ClockConfig+0x1bc>)
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	691b      	ldr	r3, [r3, #16]
 8001880:	00db      	lsls	r3, r3, #3
 8001882:	4313      	orrs	r3, r2
 8001884:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001886:	f000 f821 	bl	80018cc <HAL_RCC_GetSysClockFreq>
 800188a:	4601      	mov	r1, r0
 800188c:	4b0b      	ldr	r3, [pc, #44]	; (80018bc <HAL_RCC_ClockConfig+0x1bc>)
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	091b      	lsrs	r3, r3, #4
 8001892:	f003 030f 	and.w	r3, r3, #15
 8001896:	4a0a      	ldr	r2, [pc, #40]	; (80018c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001898:	5cd3      	ldrb	r3, [r2, r3]
 800189a:	fa21 f303 	lsr.w	r3, r1, r3
 800189e:	4a09      	ldr	r2, [pc, #36]	; (80018c4 <HAL_RCC_ClockConfig+0x1c4>)
 80018a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018a2:	4b09      	ldr	r3, [pc, #36]	; (80018c8 <HAL_RCC_ClockConfig+0x1c8>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7fe fe40 	bl	800052c <HAL_InitTick>

  return HAL_OK;
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3710      	adds	r7, #16
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	40023c00 	.word	0x40023c00
 80018bc:	40023800 	.word	0x40023800
 80018c0:	08004ba0 	.word	0x08004ba0
 80018c4:	20000008 	.word	0x20000008
 80018c8:	20000000 	.word	0x20000000

080018cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018d0:	b08f      	sub	sp, #60	; 0x3c
 80018d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80018d4:	2300      	movs	r3, #0
 80018d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018d8:	2300      	movs	r3, #0
 80018da:	637b      	str	r3, [r7, #52]	; 0x34
 80018dc:	2300      	movs	r3, #0
 80018de:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0U;
 80018e0:	2300      	movs	r3, #0
 80018e2:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018e4:	4b62      	ldr	r3, [pc, #392]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	f003 030c 	and.w	r3, r3, #12
 80018ec:	2b04      	cmp	r3, #4
 80018ee:	d007      	beq.n	8001900 <HAL_RCC_GetSysClockFreq+0x34>
 80018f0:	2b08      	cmp	r3, #8
 80018f2:	d008      	beq.n	8001906 <HAL_RCC_GetSysClockFreq+0x3a>
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	f040 80b2 	bne.w	8001a5e <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018fa:	4b5e      	ldr	r3, [pc, #376]	; (8001a74 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80018fc:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 80018fe:	e0b1      	b.n	8001a64 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001900:	4b5d      	ldr	r3, [pc, #372]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001902:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001904:	e0ae      	b.n	8001a64 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001906:	4b5a      	ldr	r3, [pc, #360]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800190e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001910:	4b57      	ldr	r3, [pc, #348]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d04e      	beq.n	80019ba <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800191c:	4b54      	ldr	r3, [pc, #336]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	099b      	lsrs	r3, r3, #6
 8001922:	f04f 0400 	mov.w	r4, #0
 8001926:	f240 11ff 	movw	r1, #511	; 0x1ff
 800192a:	f04f 0200 	mov.w	r2, #0
 800192e:	ea01 0103 	and.w	r1, r1, r3
 8001932:	ea02 0204 	and.w	r2, r2, r4
 8001936:	460b      	mov	r3, r1
 8001938:	4614      	mov	r4, r2
 800193a:	0160      	lsls	r0, r4, #5
 800193c:	6278      	str	r0, [r7, #36]	; 0x24
 800193e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001940:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8001944:	6278      	str	r0, [r7, #36]	; 0x24
 8001946:	015b      	lsls	r3, r3, #5
 8001948:	623b      	str	r3, [r7, #32]
 800194a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800194e:	1a5b      	subs	r3, r3, r1
 8001950:	eb64 0402 	sbc.w	r4, r4, r2
 8001954:	ea4f 1984 	mov.w	r9, r4, lsl #6
 8001958:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 800195c:	ea4f 1883 	mov.w	r8, r3, lsl #6
 8001960:	ebb8 0803 	subs.w	r8, r8, r3
 8001964:	eb69 0904 	sbc.w	r9, r9, r4
 8001968:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800196c:	61fb      	str	r3, [r7, #28]
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001974:	61fb      	str	r3, [r7, #28]
 8001976:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800197a:	61bb      	str	r3, [r7, #24]
 800197c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001980:	eb18 0801 	adds.w	r8, r8, r1
 8001984:	eb49 0902 	adc.w	r9, r9, r2
 8001988:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800198c:	617b      	str	r3, [r7, #20]
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001994:	617b      	str	r3, [r7, #20]
 8001996:	ea4f 2348 	mov.w	r3, r8, lsl #9
 800199a:	613b      	str	r3, [r7, #16]
 800199c:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80019a0:	4640      	mov	r0, r8
 80019a2:	4649      	mov	r1, r9
 80019a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019a6:	f04f 0400 	mov.w	r4, #0
 80019aa:	461a      	mov	r2, r3
 80019ac:	4623      	mov	r3, r4
 80019ae:	f7fe fc13 	bl	80001d8 <__aeabi_uldivmod>
 80019b2:	4603      	mov	r3, r0
 80019b4:	460c      	mov	r4, r1
 80019b6:	637b      	str	r3, [r7, #52]	; 0x34
 80019b8:	e043      	b.n	8001a42 <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019ba:	4b2d      	ldr	r3, [pc, #180]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	099b      	lsrs	r3, r3, #6
 80019c0:	f04f 0400 	mov.w	r4, #0
 80019c4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80019c8:	f04f 0200 	mov.w	r2, #0
 80019cc:	ea01 0103 	and.w	r1, r1, r3
 80019d0:	ea02 0204 	and.w	r2, r2, r4
 80019d4:	460b      	mov	r3, r1
 80019d6:	4614      	mov	r4, r2
 80019d8:	0160      	lsls	r0, r4, #5
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	68f8      	ldr	r0, [r7, #12]
 80019de:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	015b      	lsls	r3, r3, #5
 80019e6:	60bb      	str	r3, [r7, #8]
 80019e8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80019ec:	1a5b      	subs	r3, r3, r1
 80019ee:	eb64 0402 	sbc.w	r4, r4, r2
 80019f2:	01a6      	lsls	r6, r4, #6
 80019f4:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 80019f8:	019d      	lsls	r5, r3, #6
 80019fa:	1aed      	subs	r5, r5, r3
 80019fc:	eb66 0604 	sbc.w	r6, r6, r4
 8001a00:	00f3      	lsls	r3, r6, #3
 8001a02:	607b      	str	r3, [r7, #4]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8001a0a:	607b      	str	r3, [r7, #4]
 8001a0c:	00eb      	lsls	r3, r5, #3
 8001a0e:	603b      	str	r3, [r7, #0]
 8001a10:	e897 0060 	ldmia.w	r7, {r5, r6}
 8001a14:	186d      	adds	r5, r5, r1
 8001a16:	eb46 0602 	adc.w	r6, r6, r2
 8001a1a:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 8001a1e:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 8001a22:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 8001a26:	4655      	mov	r5, sl
 8001a28:	465e      	mov	r6, fp
 8001a2a:	4628      	mov	r0, r5
 8001a2c:	4631      	mov	r1, r6
 8001a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a30:	f04f 0400 	mov.w	r4, #0
 8001a34:	461a      	mov	r2, r3
 8001a36:	4623      	mov	r3, r4
 8001a38:	f7fe fbce 	bl	80001d8 <__aeabi_uldivmod>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	460c      	mov	r4, r1
 8001a40:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a42:	4b0b      	ldr	r3, [pc, #44]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	0c1b      	lsrs	r3, r3, #16
 8001a48:	f003 0303 	and.w	r3, r3, #3
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 8001a52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a5a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a5c:	e002      	b.n	8001a64 <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a5e:	4b05      	ldr	r3, [pc, #20]	; (8001a74 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001a60:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a62:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	373c      	adds	r7, #60	; 0x3c
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a70:	40023800 	.word	0x40023800
 8001a74:	00f42400 	.word	0x00f42400
 8001a78:	007a1200 	.word	0x007a1200

08001a7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a80:	4b03      	ldr	r3, [pc, #12]	; (8001a90 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a82:	681b      	ldr	r3, [r3, #0]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	20000008 	.word	0x20000008

08001a94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a98:	f7ff fff0 	bl	8001a7c <HAL_RCC_GetHCLKFreq>
 8001a9c:	4601      	mov	r1, r0
 8001a9e:	4b05      	ldr	r3, [pc, #20]	; (8001ab4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	0a9b      	lsrs	r3, r3, #10
 8001aa4:	f003 0307 	and.w	r3, r3, #7
 8001aa8:	4a03      	ldr	r2, [pc, #12]	; (8001ab8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001aaa:	5cd3      	ldrb	r3, [r2, r3]
 8001aac:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	40023800 	.word	0x40023800
 8001ab8:	08004bb0 	.word	0x08004bb0

08001abc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ac0:	f7ff ffdc 	bl	8001a7c <HAL_RCC_GetHCLKFreq>
 8001ac4:	4601      	mov	r1, r0
 8001ac6:	4b05      	ldr	r3, [pc, #20]	; (8001adc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	0b5b      	lsrs	r3, r3, #13
 8001acc:	f003 0307 	and.w	r3, r3, #7
 8001ad0:	4a03      	ldr	r2, [pc, #12]	; (8001ae0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ad2:	5cd3      	ldrb	r3, [r2, r3]
 8001ad4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	40023800 	.word	0x40023800
 8001ae0:	08004bb0 	.word	0x08004bb0

08001ae4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d101      	bne.n	8001af6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e041      	b.n	8001b7a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d106      	bne.n	8001b10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f002 fda4 	bl	8004658 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2202      	movs	r2, #2
 8001b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	3304      	adds	r3, #4
 8001b20:	4619      	mov	r1, r3
 8001b22:	4610      	mov	r0, r2
 8001b24:	f000 fb5a 	bl	80021dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2201      	movs	r2, #1
 8001b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2201      	movs	r2, #1
 8001b44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2201      	movs	r2, #1
 8001b54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2201      	movs	r2, #1
 8001b64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2201      	movs	r2, #1
 8001b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b082      	sub	sp, #8
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d101      	bne.n	8001b94 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e041      	b.n	8001c18 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d106      	bne.n	8001bae <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f000 f839 	bl	8001c20 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2202      	movs	r2, #2
 8001bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	3304      	adds	r3, #4
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4610      	mov	r0, r2
 8001bc2:	f000 fb0b 	bl	80021dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2201      	movs	r2, #1
 8001bca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2201      	movs	r2, #1
 8001bda:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2201      	movs	r2, #1
 8001be2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2201      	movs	r2, #1
 8001bea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2201      	movs	r2, #1
 8001c02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2201      	movs	r2, #1
 8001c0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2201      	movs	r2, #1
 8001c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c16:	2300      	movs	r3, #0
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3708      	adds	r7, #8
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001c28:	bf00      	nop
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d109      	bne.n	8001c58 <HAL_TIM_PWM_Start+0x24>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	bf14      	ite	ne
 8001c50:	2301      	movne	r3, #1
 8001c52:	2300      	moveq	r3, #0
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	e022      	b.n	8001c9e <HAL_TIM_PWM_Start+0x6a>
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	2b04      	cmp	r3, #4
 8001c5c:	d109      	bne.n	8001c72 <HAL_TIM_PWM_Start+0x3e>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	bf14      	ite	ne
 8001c6a:	2301      	movne	r3, #1
 8001c6c:	2300      	moveq	r3, #0
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	e015      	b.n	8001c9e <HAL_TIM_PWM_Start+0x6a>
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	2b08      	cmp	r3, #8
 8001c76:	d109      	bne.n	8001c8c <HAL_TIM_PWM_Start+0x58>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	bf14      	ite	ne
 8001c84:	2301      	movne	r3, #1
 8001c86:	2300      	moveq	r3, #0
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	e008      	b.n	8001c9e <HAL_TIM_PWM_Start+0x6a>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	bf14      	ite	ne
 8001c98:	2301      	movne	r3, #1
 8001c9a:	2300      	moveq	r3, #0
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e068      	b.n	8001d78 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d104      	bne.n	8001cb6 <HAL_TIM_PWM_Start+0x82>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2202      	movs	r2, #2
 8001cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001cb4:	e013      	b.n	8001cde <HAL_TIM_PWM_Start+0xaa>
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	2b04      	cmp	r3, #4
 8001cba:	d104      	bne.n	8001cc6 <HAL_TIM_PWM_Start+0x92>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2202      	movs	r2, #2
 8001cc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001cc4:	e00b      	b.n	8001cde <HAL_TIM_PWM_Start+0xaa>
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	2b08      	cmp	r3, #8
 8001cca:	d104      	bne.n	8001cd6 <HAL_TIM_PWM_Start+0xa2>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2202      	movs	r2, #2
 8001cd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001cd4:	e003      	b.n	8001cde <HAL_TIM_PWM_Start+0xaa>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2202      	movs	r2, #2
 8001cda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	6839      	ldr	r1, [r7, #0]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f000 fda8 	bl	800283c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a23      	ldr	r2, [pc, #140]	; (8001d80 <HAL_TIM_PWM_Start+0x14c>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d107      	bne.n	8001d06 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	6812      	ldr	r2, [r2, #0]
 8001cfe:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001d00:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d04:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a1d      	ldr	r2, [pc, #116]	; (8001d80 <HAL_TIM_PWM_Start+0x14c>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d018      	beq.n	8001d42 <HAL_TIM_PWM_Start+0x10e>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d18:	d013      	beq.n	8001d42 <HAL_TIM_PWM_Start+0x10e>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a19      	ldr	r2, [pc, #100]	; (8001d84 <HAL_TIM_PWM_Start+0x150>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d00e      	beq.n	8001d42 <HAL_TIM_PWM_Start+0x10e>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a17      	ldr	r2, [pc, #92]	; (8001d88 <HAL_TIM_PWM_Start+0x154>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d009      	beq.n	8001d42 <HAL_TIM_PWM_Start+0x10e>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a16      	ldr	r2, [pc, #88]	; (8001d8c <HAL_TIM_PWM_Start+0x158>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d004      	beq.n	8001d42 <HAL_TIM_PWM_Start+0x10e>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a14      	ldr	r2, [pc, #80]	; (8001d90 <HAL_TIM_PWM_Start+0x15c>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d111      	bne.n	8001d66 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f003 0307 	and.w	r3, r3, #7
 8001d4c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	2b06      	cmp	r3, #6
 8001d52:	d010      	beq.n	8001d76 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	6812      	ldr	r2, [r2, #0]
 8001d5c:	6812      	ldr	r2, [r2, #0]
 8001d5e:	f042 0201 	orr.w	r2, r2, #1
 8001d62:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d64:	e007      	b.n	8001d76 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	6812      	ldr	r2, [r2, #0]
 8001d6e:	6812      	ldr	r2, [r2, #0]
 8001d70:	f042 0201 	orr.w	r2, r2, #1
 8001d74:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d76:	2300      	movs	r3, #0
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3710      	adds	r7, #16
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	40010000 	.word	0x40010000
 8001d84:	40000400 	.word	0x40000400
 8001d88:	40000800 	.word	0x40000800
 8001d8c:	40000c00 	.word	0x40000c00
 8001d90:	40014000 	.word	0x40014000

08001d94 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2200      	movs	r2, #0
 8001da4:	6839      	ldr	r1, [r7, #0]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f000 fd48 	bl	800283c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a29      	ldr	r2, [pc, #164]	; (8001e58 <HAL_TIM_PWM_Stop+0xc4>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d117      	bne.n	8001de6 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	6a1a      	ldr	r2, [r3, #32]
 8001dbc:	f241 1311 	movw	r3, #4369	; 0x1111
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d10f      	bne.n	8001de6 <HAL_TIM_PWM_Stop+0x52>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	6a1a      	ldr	r2, [r3, #32]
 8001dcc:	f240 4344 	movw	r3, #1092	; 0x444
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d107      	bne.n	8001de6 <HAL_TIM_PWM_Stop+0x52>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	6812      	ldr	r2, [r2, #0]
 8001dde:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001de0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001de4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	6a1a      	ldr	r2, [r3, #32]
 8001dec:	f241 1311 	movw	r3, #4369	; 0x1111
 8001df0:	4013      	ands	r3, r2
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d10f      	bne.n	8001e16 <HAL_TIM_PWM_Stop+0x82>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	6a1a      	ldr	r2, [r3, #32]
 8001dfc:	f240 4344 	movw	r3, #1092	; 0x444
 8001e00:	4013      	ands	r3, r2
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d107      	bne.n	8001e16 <HAL_TIM_PWM_Stop+0x82>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	6812      	ldr	r2, [r2, #0]
 8001e0e:	6812      	ldr	r2, [r2, #0]
 8001e10:	f022 0201 	bic.w	r2, r2, #1
 8001e14:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d104      	bne.n	8001e26 <HAL_TIM_PWM_Stop+0x92>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e24:	e013      	b.n	8001e4e <HAL_TIM_PWM_Stop+0xba>
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	2b04      	cmp	r3, #4
 8001e2a:	d104      	bne.n	8001e36 <HAL_TIM_PWM_Stop+0xa2>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e34:	e00b      	b.n	8001e4e <HAL_TIM_PWM_Stop+0xba>
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	2b08      	cmp	r3, #8
 8001e3a:	d104      	bne.n	8001e46 <HAL_TIM_PWM_Stop+0xb2>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e44:	e003      	b.n	8001e4e <HAL_TIM_PWM_Stop+0xba>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2201      	movs	r2, #1
 8001e4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8001e4e:	2300      	movs	r3, #0
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3708      	adds	r7, #8
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40010000 	.word	0x40010000

08001e5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d101      	bne.n	8001e7a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001e76:	2302      	movs	r3, #2
 8001e78:	e0ae      	b.n	8001fd8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2b0c      	cmp	r3, #12
 8001e86:	f200 809f 	bhi.w	8001fc8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001e8a:	a201      	add	r2, pc, #4	; (adr r2, 8001e90 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e90:	08001ec5 	.word	0x08001ec5
 8001e94:	08001fc9 	.word	0x08001fc9
 8001e98:	08001fc9 	.word	0x08001fc9
 8001e9c:	08001fc9 	.word	0x08001fc9
 8001ea0:	08001f05 	.word	0x08001f05
 8001ea4:	08001fc9 	.word	0x08001fc9
 8001ea8:	08001fc9 	.word	0x08001fc9
 8001eac:	08001fc9 	.word	0x08001fc9
 8001eb0:	08001f47 	.word	0x08001f47
 8001eb4:	08001fc9 	.word	0x08001fc9
 8001eb8:	08001fc9 	.word	0x08001fc9
 8001ebc:	08001fc9 	.word	0x08001fc9
 8001ec0:	08001f87 	.word	0x08001f87
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	68b9      	ldr	r1, [r7, #8]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f000 fa06 	bl	80022dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	68fa      	ldr	r2, [r7, #12]
 8001ed6:	6812      	ldr	r2, [r2, #0]
 8001ed8:	6992      	ldr	r2, [r2, #24]
 8001eda:	f042 0208 	orr.w	r2, r2, #8
 8001ede:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	68fa      	ldr	r2, [r7, #12]
 8001ee6:	6812      	ldr	r2, [r2, #0]
 8001ee8:	6992      	ldr	r2, [r2, #24]
 8001eea:	f022 0204 	bic.w	r2, r2, #4
 8001eee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	68fa      	ldr	r2, [r7, #12]
 8001ef6:	6812      	ldr	r2, [r2, #0]
 8001ef8:	6991      	ldr	r1, [r2, #24]
 8001efa:	68ba      	ldr	r2, [r7, #8]
 8001efc:	6912      	ldr	r2, [r2, #16]
 8001efe:	430a      	orrs	r2, r1
 8001f00:	619a      	str	r2, [r3, #24]
      break;
 8001f02:	e064      	b.n	8001fce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	68b9      	ldr	r1, [r7, #8]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f000 fa4c 	bl	80023a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	68fa      	ldr	r2, [r7, #12]
 8001f16:	6812      	ldr	r2, [r2, #0]
 8001f18:	6992      	ldr	r2, [r2, #24]
 8001f1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	68fa      	ldr	r2, [r7, #12]
 8001f26:	6812      	ldr	r2, [r2, #0]
 8001f28:	6992      	ldr	r2, [r2, #24]
 8001f2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	68fa      	ldr	r2, [r7, #12]
 8001f36:	6812      	ldr	r2, [r2, #0]
 8001f38:	6991      	ldr	r1, [r2, #24]
 8001f3a:	68ba      	ldr	r2, [r7, #8]
 8001f3c:	6912      	ldr	r2, [r2, #16]
 8001f3e:	0212      	lsls	r2, r2, #8
 8001f40:	430a      	orrs	r2, r1
 8001f42:	619a      	str	r2, [r3, #24]
      break;
 8001f44:	e043      	b.n	8001fce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	68b9      	ldr	r1, [r7, #8]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f000 fa97 	bl	8002480 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	68fa      	ldr	r2, [r7, #12]
 8001f58:	6812      	ldr	r2, [r2, #0]
 8001f5a:	69d2      	ldr	r2, [r2, #28]
 8001f5c:	f042 0208 	orr.w	r2, r2, #8
 8001f60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	68fa      	ldr	r2, [r7, #12]
 8001f68:	6812      	ldr	r2, [r2, #0]
 8001f6a:	69d2      	ldr	r2, [r2, #28]
 8001f6c:	f022 0204 	bic.w	r2, r2, #4
 8001f70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	68fa      	ldr	r2, [r7, #12]
 8001f78:	6812      	ldr	r2, [r2, #0]
 8001f7a:	69d1      	ldr	r1, [r2, #28]
 8001f7c:	68ba      	ldr	r2, [r7, #8]
 8001f7e:	6912      	ldr	r2, [r2, #16]
 8001f80:	430a      	orrs	r2, r1
 8001f82:	61da      	str	r2, [r3, #28]
      break;
 8001f84:	e023      	b.n	8001fce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	68b9      	ldr	r1, [r7, #8]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f000 fae1 	bl	8002554 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	68fa      	ldr	r2, [r7, #12]
 8001f98:	6812      	ldr	r2, [r2, #0]
 8001f9a:	69d2      	ldr	r2, [r2, #28]
 8001f9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001fa0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	68fa      	ldr	r2, [r7, #12]
 8001fa8:	6812      	ldr	r2, [r2, #0]
 8001faa:	69d2      	ldr	r2, [r2, #28]
 8001fac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	68fa      	ldr	r2, [r7, #12]
 8001fb8:	6812      	ldr	r2, [r2, #0]
 8001fba:	69d1      	ldr	r1, [r2, #28]
 8001fbc:	68ba      	ldr	r2, [r7, #8]
 8001fbe:	6912      	ldr	r2, [r2, #16]
 8001fc0:	0212      	lsls	r2, r2, #8
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	61da      	str	r2, [r3, #28]
      break;
 8001fc6:	e002      	b.n	8001fce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	75fb      	strb	r3, [r7, #23]
      break;
 8001fcc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001fd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3718      	adds	r7, #24
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fea:	2300      	movs	r3, #0
 8001fec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d101      	bne.n	8001ffc <HAL_TIM_ConfigClockSource+0x1c>
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	e0a9      	b.n	8002150 <HAL_TIM_ConfigClockSource+0x170>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2202      	movs	r2, #2
 8002008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800201a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002022:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	68ba      	ldr	r2, [r7, #8]
 800202a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2b40      	cmp	r3, #64	; 0x40
 8002032:	d067      	beq.n	8002104 <HAL_TIM_ConfigClockSource+0x124>
 8002034:	2b40      	cmp	r3, #64	; 0x40
 8002036:	d80b      	bhi.n	8002050 <HAL_TIM_ConfigClockSource+0x70>
 8002038:	2b10      	cmp	r3, #16
 800203a:	d073      	beq.n	8002124 <HAL_TIM_ConfigClockSource+0x144>
 800203c:	2b10      	cmp	r3, #16
 800203e:	d802      	bhi.n	8002046 <HAL_TIM_ConfigClockSource+0x66>
 8002040:	2b00      	cmp	r3, #0
 8002042:	d06f      	beq.n	8002124 <HAL_TIM_ConfigClockSource+0x144>
 8002044:	e077      	b.n	8002136 <HAL_TIM_ConfigClockSource+0x156>
 8002046:	2b20      	cmp	r3, #32
 8002048:	d06c      	beq.n	8002124 <HAL_TIM_ConfigClockSource+0x144>
 800204a:	2b30      	cmp	r3, #48	; 0x30
 800204c:	d06a      	beq.n	8002124 <HAL_TIM_ConfigClockSource+0x144>
 800204e:	e072      	b.n	8002136 <HAL_TIM_ConfigClockSource+0x156>
 8002050:	2b70      	cmp	r3, #112	; 0x70
 8002052:	d00d      	beq.n	8002070 <HAL_TIM_ConfigClockSource+0x90>
 8002054:	2b70      	cmp	r3, #112	; 0x70
 8002056:	d804      	bhi.n	8002062 <HAL_TIM_ConfigClockSource+0x82>
 8002058:	2b50      	cmp	r3, #80	; 0x50
 800205a:	d033      	beq.n	80020c4 <HAL_TIM_ConfigClockSource+0xe4>
 800205c:	2b60      	cmp	r3, #96	; 0x60
 800205e:	d041      	beq.n	80020e4 <HAL_TIM_ConfigClockSource+0x104>
 8002060:	e069      	b.n	8002136 <HAL_TIM_ConfigClockSource+0x156>
 8002062:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002066:	d069      	beq.n	800213c <HAL_TIM_ConfigClockSource+0x15c>
 8002068:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800206c:	d017      	beq.n	800209e <HAL_TIM_ConfigClockSource+0xbe>
 800206e:	e062      	b.n	8002136 <HAL_TIM_ConfigClockSource+0x156>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6818      	ldr	r0, [r3, #0]
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	6899      	ldr	r1, [r3, #8]
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685a      	ldr	r2, [r3, #4]
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	f000 fbbc 	bl	80027fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002092:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	68ba      	ldr	r2, [r7, #8]
 800209a:	609a      	str	r2, [r3, #8]
      break;
 800209c:	e04f      	b.n	800213e <HAL_TIM_ConfigClockSource+0x15e>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6818      	ldr	r0, [r3, #0]
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	6899      	ldr	r1, [r3, #8]
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	685a      	ldr	r2, [r3, #4]
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	68db      	ldr	r3, [r3, #12]
 80020ae:	f000 fba5 	bl	80027fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	6812      	ldr	r2, [r2, #0]
 80020ba:	6892      	ldr	r2, [r2, #8]
 80020bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80020c0:	609a      	str	r2, [r3, #8]
      break;
 80020c2:	e03c      	b.n	800213e <HAL_TIM_ConfigClockSource+0x15e>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6818      	ldr	r0, [r3, #0]
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	6859      	ldr	r1, [r3, #4]
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	461a      	mov	r2, r3
 80020d2:	f000 fb19 	bl	8002708 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2150      	movs	r1, #80	; 0x50
 80020dc:	4618      	mov	r0, r3
 80020de:	f000 fb72 	bl	80027c6 <TIM_ITRx_SetConfig>
      break;
 80020e2:	e02c      	b.n	800213e <HAL_TIM_ConfigClockSource+0x15e>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6818      	ldr	r0, [r3, #0]
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	6859      	ldr	r1, [r3, #4]
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	461a      	mov	r2, r3
 80020f2:	f000 fb38 	bl	8002766 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2160      	movs	r1, #96	; 0x60
 80020fc:	4618      	mov	r0, r3
 80020fe:	f000 fb62 	bl	80027c6 <TIM_ITRx_SetConfig>
      break;
 8002102:	e01c      	b.n	800213e <HAL_TIM_ConfigClockSource+0x15e>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6818      	ldr	r0, [r3, #0]
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	6859      	ldr	r1, [r3, #4]
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	461a      	mov	r2, r3
 8002112:	f000 faf9 	bl	8002708 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	2140      	movs	r1, #64	; 0x40
 800211c:	4618      	mov	r0, r3
 800211e:	f000 fb52 	bl	80027c6 <TIM_ITRx_SetConfig>
      break;
 8002122:	e00c      	b.n	800213e <HAL_TIM_ConfigClockSource+0x15e>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4619      	mov	r1, r3
 800212e:	4610      	mov	r0, r2
 8002130:	f000 fb49 	bl	80027c6 <TIM_ITRx_SetConfig>
      break;
 8002134:	e003      	b.n	800213e <HAL_TIM_ConfigClockSource+0x15e>
    }

    default:
      status = HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	73fb      	strb	r3, [r7, #15]
      break;
 800213a:	e000      	b.n	800213e <HAL_TIM_ConfigClockSource+0x15e>
      break;
 800213c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2201      	movs	r2, #1
 8002142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800214e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002150:	4618      	mov	r0, r3
 8002152:	3710      	adds	r7, #16
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}

08002158 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002168:	2b01      	cmp	r3, #1
 800216a:	d101      	bne.n	8002170 <HAL_TIM_SlaveConfigSynchro+0x18>
 800216c:	2302      	movs	r3, #2
 800216e:	e031      	b.n	80021d4 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2201      	movs	r2, #1
 8002174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2202      	movs	r2, #2
 800217c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8002180:	6839      	ldr	r1, [r7, #0]
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f000 fa36 	bl	80025f4 <TIM_SlaveTimer_SetConfig>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d009      	beq.n	80021a2 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2201      	movs	r2, #1
 8002192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e018      	b.n	80021d4 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	6812      	ldr	r2, [r2, #0]
 80021aa:	68d2      	ldr	r2, [r2, #12]
 80021ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021b0:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	6812      	ldr	r2, [r2, #0]
 80021ba:	68d2      	ldr	r2, [r2, #12]
 80021bc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80021c0:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2201      	movs	r2, #1
 80021c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80021d2:	2300      	movs	r3, #0
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3708      	adds	r7, #8
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80021dc:	b480      	push	{r7}
 80021de:	b085      	sub	sp, #20
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4a34      	ldr	r2, [pc, #208]	; (80022c0 <TIM_Base_SetConfig+0xe4>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d00f      	beq.n	8002214 <TIM_Base_SetConfig+0x38>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021fa:	d00b      	beq.n	8002214 <TIM_Base_SetConfig+0x38>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	4a31      	ldr	r2, [pc, #196]	; (80022c4 <TIM_Base_SetConfig+0xe8>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d007      	beq.n	8002214 <TIM_Base_SetConfig+0x38>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	4a30      	ldr	r2, [pc, #192]	; (80022c8 <TIM_Base_SetConfig+0xec>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d003      	beq.n	8002214 <TIM_Base_SetConfig+0x38>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	4a2f      	ldr	r2, [pc, #188]	; (80022cc <TIM_Base_SetConfig+0xf0>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d108      	bne.n	8002226 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800221a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	68fa      	ldr	r2, [r7, #12]
 8002222:	4313      	orrs	r3, r2
 8002224:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a25      	ldr	r2, [pc, #148]	; (80022c0 <TIM_Base_SetConfig+0xe4>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d01b      	beq.n	8002266 <TIM_Base_SetConfig+0x8a>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002234:	d017      	beq.n	8002266 <TIM_Base_SetConfig+0x8a>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a22      	ldr	r2, [pc, #136]	; (80022c4 <TIM_Base_SetConfig+0xe8>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d013      	beq.n	8002266 <TIM_Base_SetConfig+0x8a>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a21      	ldr	r2, [pc, #132]	; (80022c8 <TIM_Base_SetConfig+0xec>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d00f      	beq.n	8002266 <TIM_Base_SetConfig+0x8a>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a20      	ldr	r2, [pc, #128]	; (80022cc <TIM_Base_SetConfig+0xf0>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d00b      	beq.n	8002266 <TIM_Base_SetConfig+0x8a>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a1f      	ldr	r2, [pc, #124]	; (80022d0 <TIM_Base_SetConfig+0xf4>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d007      	beq.n	8002266 <TIM_Base_SetConfig+0x8a>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a1e      	ldr	r2, [pc, #120]	; (80022d4 <TIM_Base_SetConfig+0xf8>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d003      	beq.n	8002266 <TIM_Base_SetConfig+0x8a>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a1d      	ldr	r2, [pc, #116]	; (80022d8 <TIM_Base_SetConfig+0xfc>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d108      	bne.n	8002278 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800226c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	68fa      	ldr	r2, [r7, #12]
 8002274:	4313      	orrs	r3, r2
 8002276:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	695b      	ldr	r3, [r3, #20]
 8002282:	4313      	orrs	r3, r2
 8002284:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	68fa      	ldr	r2, [r7, #12]
 800228a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	689a      	ldr	r2, [r3, #8]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	4a08      	ldr	r2, [pc, #32]	; (80022c0 <TIM_Base_SetConfig+0xe4>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d103      	bne.n	80022ac <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	691a      	ldr	r2, [r3, #16]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	615a      	str	r2, [r3, #20]
}
 80022b2:	bf00      	nop
 80022b4:	3714      	adds	r7, #20
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	40010000 	.word	0x40010000
 80022c4:	40000400 	.word	0x40000400
 80022c8:	40000800 	.word	0x40000800
 80022cc:	40000c00 	.word	0x40000c00
 80022d0:	40014000 	.word	0x40014000
 80022d4:	40014400 	.word	0x40014400
 80022d8:	40014800 	.word	0x40014800

080022dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80022dc:	b480      	push	{r7}
 80022de:	b087      	sub	sp, #28
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a1b      	ldr	r3, [r3, #32]
 80022ea:	f023 0201 	bic.w	r2, r3, #1
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a1b      	ldr	r3, [r3, #32]
 80022f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	699b      	ldr	r3, [r3, #24]
 8002302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800230a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f023 0303 	bic.w	r3, r3, #3
 8002312:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	68fa      	ldr	r2, [r7, #12]
 800231a:	4313      	orrs	r3, r2
 800231c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	f023 0302 	bic.w	r3, r3, #2
 8002324:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	697a      	ldr	r2, [r7, #20]
 800232c:	4313      	orrs	r3, r2
 800232e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	4a1c      	ldr	r2, [pc, #112]	; (80023a4 <TIM_OC1_SetConfig+0xc8>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d10c      	bne.n	8002352 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	f023 0308 	bic.w	r3, r3, #8
 800233e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	697a      	ldr	r2, [r7, #20]
 8002346:	4313      	orrs	r3, r2
 8002348:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	f023 0304 	bic.w	r3, r3, #4
 8002350:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a13      	ldr	r2, [pc, #76]	; (80023a4 <TIM_OC1_SetConfig+0xc8>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d111      	bne.n	800237e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002360:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002368:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	695b      	ldr	r3, [r3, #20]
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	4313      	orrs	r3, r2
 8002372:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	693a      	ldr	r2, [r7, #16]
 800237a:	4313      	orrs	r3, r2
 800237c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	693a      	ldr	r2, [r7, #16]
 8002382:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	68fa      	ldr	r2, [r7, #12]
 8002388:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685a      	ldr	r2, [r3, #4]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	697a      	ldr	r2, [r7, #20]
 8002396:	621a      	str	r2, [r3, #32]
}
 8002398:	bf00      	nop
 800239a:	371c      	adds	r7, #28
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr
 80023a4:	40010000 	.word	0x40010000

080023a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b087      	sub	sp, #28
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a1b      	ldr	r3, [r3, #32]
 80023b6:	f023 0210 	bic.w	r2, r3, #16
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6a1b      	ldr	r3, [r3, #32]
 80023c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	021b      	lsls	r3, r3, #8
 80023e6:	68fa      	ldr	r2, [r7, #12]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	f023 0320 	bic.w	r3, r3, #32
 80023f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	011b      	lsls	r3, r3, #4
 80023fa:	697a      	ldr	r2, [r7, #20]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4a1e      	ldr	r2, [pc, #120]	; (800247c <TIM_OC2_SetConfig+0xd4>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d10d      	bne.n	8002424 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800240e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	011b      	lsls	r3, r3, #4
 8002416:	697a      	ldr	r2, [r7, #20]
 8002418:	4313      	orrs	r3, r2
 800241a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002422:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	4a15      	ldr	r2, [pc, #84]	; (800247c <TIM_OC2_SetConfig+0xd4>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d113      	bne.n	8002454 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002432:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800243a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	695b      	ldr	r3, [r3, #20]
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	693a      	ldr	r2, [r7, #16]
 8002444:	4313      	orrs	r3, r2
 8002446:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	699b      	ldr	r3, [r3, #24]
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	693a      	ldr	r2, [r7, #16]
 8002450:	4313      	orrs	r3, r2
 8002452:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	68fa      	ldr	r2, [r7, #12]
 800245e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685a      	ldr	r2, [r3, #4]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	697a      	ldr	r2, [r7, #20]
 800246c:	621a      	str	r2, [r3, #32]
}
 800246e:	bf00      	nop
 8002470:	371c      	adds	r7, #28
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	40010000 	.word	0x40010000

08002480 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002480:	b480      	push	{r7}
 8002482:	b087      	sub	sp, #28
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a1b      	ldr	r3, [r3, #32]
 800248e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a1b      	ldr	r3, [r3, #32]
 800249a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	69db      	ldr	r3, [r3, #28]
 80024a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f023 0303 	bic.w	r3, r3, #3
 80024b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	68fa      	ldr	r2, [r7, #12]
 80024be:	4313      	orrs	r3, r2
 80024c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80024c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	021b      	lsls	r3, r3, #8
 80024d0:	697a      	ldr	r2, [r7, #20]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a1d      	ldr	r2, [pc, #116]	; (8002550 <TIM_OC3_SetConfig+0xd0>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d10d      	bne.n	80024fa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80024e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	021b      	lsls	r3, r3, #8
 80024ec:	697a      	ldr	r2, [r7, #20]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80024f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a14      	ldr	r2, [pc, #80]	; (8002550 <TIM_OC3_SetConfig+0xd0>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d113      	bne.n	800252a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002508:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002510:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	011b      	lsls	r3, r3, #4
 8002518:	693a      	ldr	r2, [r7, #16]
 800251a:	4313      	orrs	r3, r2
 800251c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	699b      	ldr	r3, [r3, #24]
 8002522:	011b      	lsls	r3, r3, #4
 8002524:	693a      	ldr	r2, [r7, #16]
 8002526:	4313      	orrs	r3, r2
 8002528:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	693a      	ldr	r2, [r7, #16]
 800252e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	68fa      	ldr	r2, [r7, #12]
 8002534:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685a      	ldr	r2, [r3, #4]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	697a      	ldr	r2, [r7, #20]
 8002542:	621a      	str	r2, [r3, #32]
}
 8002544:	bf00      	nop
 8002546:	371c      	adds	r7, #28
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr
 8002550:	40010000 	.word	0x40010000

08002554 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002554:	b480      	push	{r7}
 8002556:	b087      	sub	sp, #28
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a1b      	ldr	r3, [r3, #32]
 8002562:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a1b      	ldr	r3, [r3, #32]
 800256e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	69db      	ldr	r3, [r3, #28]
 800257a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002582:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800258a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	021b      	lsls	r3, r3, #8
 8002592:	68fa      	ldr	r2, [r7, #12]
 8002594:	4313      	orrs	r3, r2
 8002596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800259e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	031b      	lsls	r3, r3, #12
 80025a6:	693a      	ldr	r2, [r7, #16]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	4a10      	ldr	r2, [pc, #64]	; (80025f0 <TIM_OC4_SetConfig+0x9c>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d109      	bne.n	80025c8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	695b      	ldr	r3, [r3, #20]
 80025c0:	019b      	lsls	r3, r3, #6
 80025c2:	697a      	ldr	r2, [r7, #20]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	697a      	ldr	r2, [r7, #20]
 80025cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	68fa      	ldr	r2, [r7, #12]
 80025d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685a      	ldr	r2, [r3, #4]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	693a      	ldr	r2, [r7, #16]
 80025e0:	621a      	str	r2, [r3, #32]
}
 80025e2:	bf00      	nop
 80025e4:	371c      	adds	r7, #28
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	40010000 	.word	0x40010000

080025f4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b086      	sub	sp, #24
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025fe:	2300      	movs	r3, #0
 8002600:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002610:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	693a      	ldr	r2, [r7, #16]
 8002618:	4313      	orrs	r3, r2
 800261a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	f023 0307 	bic.w	r3, r3, #7
 8002622:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	693a      	ldr	r2, [r7, #16]
 800262a:	4313      	orrs	r3, r2
 800262c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	693a      	ldr	r2, [r7, #16]
 8002634:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	2b30      	cmp	r3, #48	; 0x30
 800263c:	d05e      	beq.n	80026fc <TIM_SlaveTimer_SetConfig+0x108>
 800263e:	2b30      	cmp	r3, #48	; 0x30
 8002640:	d806      	bhi.n	8002650 <TIM_SlaveTimer_SetConfig+0x5c>
 8002642:	2b10      	cmp	r3, #16
 8002644:	d05a      	beq.n	80026fc <TIM_SlaveTimer_SetConfig+0x108>
 8002646:	2b20      	cmp	r3, #32
 8002648:	d058      	beq.n	80026fc <TIM_SlaveTimer_SetConfig+0x108>
 800264a:	2b00      	cmp	r3, #0
 800264c:	d056      	beq.n	80026fc <TIM_SlaveTimer_SetConfig+0x108>
 800264e:	e052      	b.n	80026f6 <TIM_SlaveTimer_SetConfig+0x102>
 8002650:	2b50      	cmp	r3, #80	; 0x50
 8002652:	d03c      	beq.n	80026ce <TIM_SlaveTimer_SetConfig+0xda>
 8002654:	2b50      	cmp	r3, #80	; 0x50
 8002656:	d802      	bhi.n	800265e <TIM_SlaveTimer_SetConfig+0x6a>
 8002658:	2b40      	cmp	r3, #64	; 0x40
 800265a:	d00f      	beq.n	800267c <TIM_SlaveTimer_SetConfig+0x88>
 800265c:	e04b      	b.n	80026f6 <TIM_SlaveTimer_SetConfig+0x102>
 800265e:	2b60      	cmp	r3, #96	; 0x60
 8002660:	d03f      	beq.n	80026e2 <TIM_SlaveTimer_SetConfig+0xee>
 8002662:	2b70      	cmp	r3, #112	; 0x70
 8002664:	d147      	bne.n	80026f6 <TIM_SlaveTimer_SetConfig+0x102>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6818      	ldr	r0, [r3, #0]
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	68d9      	ldr	r1, [r3, #12]
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	689a      	ldr	r2, [r3, #8]
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	f000 f8c1 	bl	80027fc <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 800267a:	e040      	b.n	80026fe <TIM_SlaveTimer_SetConfig+0x10a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2b05      	cmp	r3, #5
 8002682:	d101      	bne.n	8002688 <TIM_SlaveTimer_SetConfig+0x94>
      {
        return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e03b      	b.n	8002700 <TIM_SlaveTimer_SetConfig+0x10c>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	6a1b      	ldr	r3, [r3, #32]
 800268e:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	6812      	ldr	r2, [r2, #0]
 8002698:	6a12      	ldr	r2, [r2, #32]
 800269a:	f022 0201 	bic.w	r2, r2, #1
 800269e:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	699b      	ldr	r3, [r3, #24]
 80026a6:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026ae:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	691b      	ldr	r3, [r3, #16]
 80026b4:	011b      	lsls	r3, r3, #4
 80026b6:	68ba      	ldr	r2, [r7, #8]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	68ba      	ldr	r2, [r7, #8]
 80026c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	68fa      	ldr	r2, [r7, #12]
 80026ca:	621a      	str	r2, [r3, #32]
      break;
 80026cc:	e017      	b.n	80026fe <TIM_SlaveTimer_SetConfig+0x10a>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6818      	ldr	r0, [r3, #0]
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	6899      	ldr	r1, [r3, #8]
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	461a      	mov	r2, r3
 80026dc:	f000 f814 	bl	8002708 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80026e0:	e00d      	b.n	80026fe <TIM_SlaveTimer_SetConfig+0x10a>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6818      	ldr	r0, [r3, #0]
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	6899      	ldr	r1, [r3, #8]
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	461a      	mov	r2, r3
 80026f0:	f000 f839 	bl	8002766 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80026f4:	e003      	b.n	80026fe <TIM_SlaveTimer_SetConfig+0x10a>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	75fb      	strb	r3, [r7, #23]
      break;
 80026fa:	e000      	b.n	80026fe <TIM_SlaveTimer_SetConfig+0x10a>
      break;
 80026fc:	bf00      	nop
  }

  return status;
 80026fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002700:	4618      	mov	r0, r3
 8002702:	3718      	adds	r7, #24
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002708:	b480      	push	{r7}
 800270a:	b087      	sub	sp, #28
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6a1b      	ldr	r3, [r3, #32]
 8002718:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6a1b      	ldr	r3, [r3, #32]
 800271e:	f023 0201 	bic.w	r2, r3, #1
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	699b      	ldr	r3, [r3, #24]
 800272a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002732:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	011b      	lsls	r3, r3, #4
 8002738:	693a      	ldr	r2, [r7, #16]
 800273a:	4313      	orrs	r3, r2
 800273c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	f023 030a 	bic.w	r3, r3, #10
 8002744:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002746:	697a      	ldr	r2, [r7, #20]
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	4313      	orrs	r3, r2
 800274c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	693a      	ldr	r2, [r7, #16]
 8002752:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	697a      	ldr	r2, [r7, #20]
 8002758:	621a      	str	r2, [r3, #32]
}
 800275a:	bf00      	nop
 800275c:	371c      	adds	r7, #28
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr

08002766 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002766:	b480      	push	{r7}
 8002768:	b087      	sub	sp, #28
 800276a:	af00      	add	r7, sp, #0
 800276c:	60f8      	str	r0, [r7, #12]
 800276e:	60b9      	str	r1, [r7, #8]
 8002770:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	6a1b      	ldr	r3, [r3, #32]
 8002776:	f023 0210 	bic.w	r2, r3, #16
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	699b      	ldr	r3, [r3, #24]
 8002782:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6a1b      	ldr	r3, [r3, #32]
 8002788:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002790:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	031b      	lsls	r3, r3, #12
 8002796:	697a      	ldr	r2, [r7, #20]
 8002798:	4313      	orrs	r3, r2
 800279a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80027a2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	011b      	lsls	r3, r3, #4
 80027a8:	693a      	ldr	r2, [r7, #16]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	697a      	ldr	r2, [r7, #20]
 80027b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	693a      	ldr	r2, [r7, #16]
 80027b8:	621a      	str	r2, [r3, #32]
}
 80027ba:	bf00      	nop
 80027bc:	371c      	adds	r7, #28
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr

080027c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80027c6:	b480      	push	{r7}
 80027c8:	b085      	sub	sp, #20
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
 80027ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80027de:	683a      	ldr	r2, [r7, #0]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	f043 0307 	orr.w	r3, r3, #7
 80027e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	68fa      	ldr	r2, [r7, #12]
 80027ee:	609a      	str	r2, [r3, #8]
}
 80027f0:	bf00      	nop
 80027f2:	3714      	adds	r7, #20
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b087      	sub	sp, #28
 8002800:	af00      	add	r7, sp, #0
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	607a      	str	r2, [r7, #4]
 8002808:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002816:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	021a      	lsls	r2, r3, #8
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	431a      	orrs	r2, r3
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	4313      	orrs	r3, r2
 8002824:	697a      	ldr	r2, [r7, #20]
 8002826:	4313      	orrs	r3, r2
 8002828:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	697a      	ldr	r2, [r7, #20]
 800282e:	609a      	str	r2, [r3, #8]
}
 8002830:	bf00      	nop
 8002832:	371c      	adds	r7, #28
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr

0800283c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800283c:	b480      	push	{r7}
 800283e:	b087      	sub	sp, #28
 8002840:	af00      	add	r7, sp, #0
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	f003 031f 	and.w	r3, r3, #31
 800284e:	2201      	movs	r2, #1
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6a1a      	ldr	r2, [r3, #32]
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	43db      	mvns	r3, r3
 800285e:	401a      	ands	r2, r3
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6a1a      	ldr	r2, [r3, #32]
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	f003 031f 	and.w	r3, r3, #31
 800286e:	6879      	ldr	r1, [r7, #4]
 8002870:	fa01 f303 	lsl.w	r3, r1, r3
 8002874:	431a      	orrs	r2, r3
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	621a      	str	r2, [r3, #32]
}
 800287a:	bf00      	nop
 800287c:	371c      	adds	r7, #28
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
	...

08002888 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002888:	b480      	push	{r7}
 800288a:	b085      	sub	sp, #20
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002898:	2b01      	cmp	r3, #1
 800289a:	d101      	bne.n	80028a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800289c:	2302      	movs	r3, #2
 800289e:	e050      	b.n	8002942 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2202      	movs	r2, #2
 80028ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	68fa      	ldr	r2, [r7, #12]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	68fa      	ldr	r2, [r7, #12]
 80028d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a1c      	ldr	r2, [pc, #112]	; (8002950 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d018      	beq.n	8002916 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028ec:	d013      	beq.n	8002916 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a18      	ldr	r2, [pc, #96]	; (8002954 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d00e      	beq.n	8002916 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a16      	ldr	r2, [pc, #88]	; (8002958 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d009      	beq.n	8002916 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a15      	ldr	r2, [pc, #84]	; (800295c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d004      	beq.n	8002916 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a13      	ldr	r2, [pc, #76]	; (8002960 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d10c      	bne.n	8002930 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800291c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	68ba      	ldr	r2, [r7, #8]
 8002924:	4313      	orrs	r3, r2
 8002926:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	68ba      	ldr	r2, [r7, #8]
 800292e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3714      	adds	r7, #20
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	40010000 	.word	0x40010000
 8002954:	40000400 	.word	0x40000400
 8002958:	40000800 	.word	0x40000800
 800295c:	40000c00 	.word	0x40000c00
 8002960:	40014000 	.word	0x40014000

08002964 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002964:	b480      	push	{r7}
 8002966:	b085      	sub	sp, #20
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800296e:	2300      	movs	r3, #0
 8002970:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002978:	2b01      	cmp	r3, #1
 800297a:	d101      	bne.n	8002980 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800297c:	2302      	movs	r3, #2
 800297e:	e03d      	b.n	80029fc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	4313      	orrs	r3, r2
 8002994:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4313      	orrs	r3, r2
 80029be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	695b      	ldr	r3, [r3, #20]
 80029d8:	4313      	orrs	r3, r2
 80029da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	69db      	ldr	r3, [r3, #28]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	68fa      	ldr	r2, [r7, #12]
 80029f0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029fa:	2300      	movs	r3, #0
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3714      	adds	r7, #20
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d101      	bne.n	8002a1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e03f      	b.n	8002a9a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d106      	bne.n	8002a34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f001 ffc8 	bl	80049c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2224      	movs	r2, #36	; 0x24
 8002a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	6812      	ldr	r2, [r2, #0]
 8002a44:	68d2      	ldr	r2, [r2, #12]
 8002a46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f000 faa5 	bl	8002f9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	6812      	ldr	r2, [r2, #0]
 8002a5a:	6912      	ldr	r2, [r2, #16]
 8002a5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	6812      	ldr	r2, [r2, #0]
 8002a6a:	6952      	ldr	r2, [r2, #20]
 8002a6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	6812      	ldr	r2, [r2, #0]
 8002a7a:	68d2      	ldr	r2, [r2, #12]
 8002a7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2220      	movs	r2, #32
 8002a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2220      	movs	r2, #32
 8002a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3708      	adds	r7, #8
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b084      	sub	sp, #16
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	60f8      	str	r0, [r7, #12]
 8002aaa:	60b9      	str	r1, [r7, #8]
 8002aac:	4613      	mov	r3, r2
 8002aae:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	2b20      	cmp	r3, #32
 8002aba:	d11d      	bne.n	8002af8 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d002      	beq.n	8002ac8 <HAL_UART_Receive_DMA+0x26>
 8002ac2:	88fb      	ldrh	r3, [r7, #6]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d101      	bne.n	8002acc <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e016      	b.n	8002afa <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d101      	bne.n	8002ada <HAL_UART_Receive_DMA+0x38>
 8002ad6:	2302      	movs	r3, #2
 8002ad8:	e00f      	b.n	8002afa <HAL_UART_Receive_DMA+0x58>
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2201      	movs	r2, #1
 8002ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002ae8:	88fb      	ldrh	r3, [r7, #6]
 8002aea:	461a      	mov	r2, r3
 8002aec:	68b9      	ldr	r1, [r7, #8]
 8002aee:	68f8      	ldr	r0, [r7, #12]
 8002af0:	f000 f92a 	bl	8002d48 <UART_Start_Receive_DMA>
 8002af4:	4603      	mov	r3, r0
 8002af6:	e000      	b.n	8002afa <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002af8:	2302      	movs	r3, #2
  }
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3710      	adds	r7, #16
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}

08002b02 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b02:	b480      	push	{r7}
 8002b04:	b083      	sub	sp, #12
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002b0a:	bf00      	nop
 8002b0c:	370c      	adds	r7, #12
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr

08002b16 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002b16:	b480      	push	{r7}
 8002b18:	b083      	sub	sp, #12
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002b1e:	bf00      	nop
 8002b20:	370c      	adds	r7, #12
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr

08002b2a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	b083      	sub	sp, #12
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002b32:	bf00      	nop
 8002b34:	370c      	adds	r7, #12
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr

08002b3e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002b3e:	b480      	push	{r7}
 8002b40:	b083      	sub	sp, #12
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
 8002b46:	460b      	mov	r3, r1
 8002b48:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002b4a:	bf00      	nop
 8002b4c:	370c      	adds	r7, #12
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr

08002b56 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002b56:	b580      	push	{r7, lr}
 8002b58:	b09c      	sub	sp, #112	; 0x70
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b62:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d172      	bne.n	8002c58 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8002b72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b74:	2200      	movs	r2, #0
 8002b76:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	330c      	adds	r3, #12
 8002b7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b82:	e853 3f00 	ldrex	r3, [r3]
 8002b86:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002b88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b8e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	330c      	adds	r3, #12
 8002b96:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002b98:	65ba      	str	r2, [r7, #88]	; 0x58
 8002b9a:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b9c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002b9e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002ba0:	e841 2300 	strex	r3, r2, [r1]
 8002ba4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002ba6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d1e5      	bne.n	8002b78 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	3314      	adds	r3, #20
 8002bb2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bb6:	e853 3f00 	ldrex	r3, [r3]
 8002bba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bbe:	f023 0301 	bic.w	r3, r3, #1
 8002bc2:	667b      	str	r3, [r7, #100]	; 0x64
 8002bc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	3314      	adds	r3, #20
 8002bca:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002bcc:	647a      	str	r2, [r7, #68]	; 0x44
 8002bce:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bd0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002bd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002bd4:	e841 2300 	strex	r3, r2, [r1]
 8002bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002bda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d1e5      	bne.n	8002bac <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002be0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	3314      	adds	r3, #20
 8002be6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bea:	e853 3f00 	ldrex	r3, [r3]
 8002bee:	623b      	str	r3, [r7, #32]
   return(result);
 8002bf0:	6a3b      	ldr	r3, [r7, #32]
 8002bf2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bf6:	663b      	str	r3, [r7, #96]	; 0x60
 8002bf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	3314      	adds	r3, #20
 8002bfe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002c00:	633a      	str	r2, [r7, #48]	; 0x30
 8002c02:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c04:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002c06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c08:	e841 2300 	strex	r3, r2, [r1]
 8002c0c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d1e5      	bne.n	8002be0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002c14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c16:	2220      	movs	r2, #32
 8002c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d119      	bne.n	8002c58 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	330c      	adds	r3, #12
 8002c2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	e853 3f00 	ldrex	r3, [r3]
 8002c32:	60fb      	str	r3, [r7, #12]
   return(result);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f023 0310 	bic.w	r3, r3, #16
 8002c3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	330c      	adds	r3, #12
 8002c42:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002c44:	61fa      	str	r2, [r7, #28]
 8002c46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c48:	69b9      	ldr	r1, [r7, #24]
 8002c4a:	69fa      	ldr	r2, [r7, #28]
 8002c4c:	e841 2300 	strex	r3, r2, [r1]
 8002c50:	617b      	str	r3, [r7, #20]
   return(result);
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d1e5      	bne.n	8002c24 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d106      	bne.n	8002c6e <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002c60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c62:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002c64:	4619      	mov	r1, r3
 8002c66:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002c68:	f7ff ff69 	bl	8002b3e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002c6c:	e002      	b.n	8002c74 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8002c6e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002c70:	f7ff ff47 	bl	8002b02 <HAL_UART_RxCpltCallback>
}
 8002c74:	bf00      	nop
 8002c76:	3770      	adds	r7, #112	; 0x70
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c88:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d108      	bne.n	8002ca4 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002c96:	085b      	lsrs	r3, r3, #1
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	68f8      	ldr	r0, [r7, #12]
 8002c9e:	f7ff ff4e 	bl	8002b3e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002ca2:	e002      	b.n	8002caa <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8002ca4:	68f8      	ldr	r0, [r7, #12]
 8002ca6:	f7ff ff36 	bl	8002b16 <HAL_UART_RxHalfCpltCallback>
}
 8002caa:	bf00      	nop
 8002cac:	3710      	adds	r7, #16
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	b084      	sub	sp, #16
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cce:	2b80      	cmp	r3, #128	; 0x80
 8002cd0:	bf0c      	ite	eq
 8002cd2:	2301      	moveq	r3, #1
 8002cd4:	2300      	movne	r3, #0
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	2b21      	cmp	r3, #33	; 0x21
 8002ce4:	d108      	bne.n	8002cf8 <UART_DMAError+0x46>
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d005      	beq.n	8002cf8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002cf2:	68b8      	ldr	r0, [r7, #8]
 8002cf4:	f000 f8c6 	bl	8002e84 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	695b      	ldr	r3, [r3, #20]
 8002cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d02:	2b40      	cmp	r3, #64	; 0x40
 8002d04:	bf0c      	ite	eq
 8002d06:	2301      	moveq	r3, #1
 8002d08:	2300      	movne	r3, #0
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2b22      	cmp	r3, #34	; 0x22
 8002d18:	d108      	bne.n	8002d2c <UART_DMAError+0x7a>
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d005      	beq.n	8002d2c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	2200      	movs	r2, #0
 8002d24:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002d26:	68b8      	ldr	r0, [r7, #8]
 8002d28:	f000 f8d4 	bl	8002ed4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d30:	f043 0210 	orr.w	r2, r3, #16
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002d38:	68b8      	ldr	r0, [r7, #8]
 8002d3a:	f7ff fef6 	bl	8002b2a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d3e:	bf00      	nop
 8002d40:	3710      	adds	r7, #16
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
	...

08002d48 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b098      	sub	sp, #96	; 0x60
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	4613      	mov	r3, r2
 8002d54:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8002d56:	68ba      	ldr	r2, [r7, #8]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	88fa      	ldrh	r2, [r7, #6]
 8002d60:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2200      	movs	r2, #0
 8002d66:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2222      	movs	r2, #34	; 0x22
 8002d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d74:	4a40      	ldr	r2, [pc, #256]	; (8002e78 <UART_Start_Receive_DMA+0x130>)
 8002d76:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d7c:	4a3f      	ldr	r2, [pc, #252]	; (8002e7c <UART_Start_Receive_DMA+0x134>)
 8002d7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d84:	4a3e      	ldr	r2, [pc, #248]	; (8002e80 <UART_Start_Receive_DMA+0x138>)
 8002d86:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8002d90:	f107 0308 	add.w	r3, r7, #8
 8002d94:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	3304      	adds	r3, #4
 8002da0:	4619      	mov	r1, r3
 8002da2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	88fb      	ldrh	r3, [r7, #6]
 8002da8:	f7fd fdf0 	bl	800098c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8002dac:	2300      	movs	r3, #0
 8002dae:	613b      	str	r3, [r7, #16]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	613b      	str	r3, [r7, #16]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	613b      	str	r3, [r7, #16]
 8002dc0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d019      	beq.n	8002e06 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	330c      	adds	r3, #12
 8002dd8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ddc:	e853 3f00 	ldrex	r3, [r3]
 8002de0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002de2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002de4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002de8:	65bb      	str	r3, [r7, #88]	; 0x58
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	330c      	adds	r3, #12
 8002df0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002df2:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002df4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002df6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002df8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002dfa:	e841 2300 	strex	r3, r2, [r1]
 8002dfe:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8002e00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1e5      	bne.n	8002dd2 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	3314      	adds	r3, #20
 8002e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e10:	e853 3f00 	ldrex	r3, [r3]
 8002e14:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e18:	f043 0301 	orr.w	r3, r3, #1
 8002e1c:	657b      	str	r3, [r7, #84]	; 0x54
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	3314      	adds	r3, #20
 8002e24:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002e26:	63ba      	str	r2, [r7, #56]	; 0x38
 8002e28:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e2a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002e2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e2e:	e841 2300 	strex	r3, r2, [r1]
 8002e32:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1e5      	bne.n	8002e06 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	3314      	adds	r3, #20
 8002e40:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	e853 3f00 	ldrex	r3, [r3]
 8002e48:	617b      	str	r3, [r7, #20]
   return(result);
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e50:	653b      	str	r3, [r7, #80]	; 0x50
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	3314      	adds	r3, #20
 8002e58:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002e5a:	627a      	str	r2, [r7, #36]	; 0x24
 8002e5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e5e:	6a39      	ldr	r1, [r7, #32]
 8002e60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e62:	e841 2300 	strex	r3, r2, [r1]
 8002e66:	61fb      	str	r3, [r7, #28]
   return(result);
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d1e5      	bne.n	8002e3a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8002e6e:	2300      	movs	r3, #0
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3760      	adds	r7, #96	; 0x60
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	08002b57 	.word	0x08002b57
 8002e7c:	08002c7d 	.word	0x08002c7d
 8002e80:	08002cb3 	.word	0x08002cb3

08002e84 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b089      	sub	sp, #36	; 0x24
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	330c      	adds	r3, #12
 8002e92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	e853 3f00 	ldrex	r3, [r3]
 8002e9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002ea2:	61fb      	str	r3, [r7, #28]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	330c      	adds	r3, #12
 8002eaa:	69fa      	ldr	r2, [r7, #28]
 8002eac:	61ba      	str	r2, [r7, #24]
 8002eae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eb0:	6979      	ldr	r1, [r7, #20]
 8002eb2:	69ba      	ldr	r2, [r7, #24]
 8002eb4:	e841 2300 	strex	r3, r2, [r1]
 8002eb8:	613b      	str	r3, [r7, #16]
   return(result);
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d1e5      	bne.n	8002e8c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2220      	movs	r2, #32
 8002ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8002ec8:	bf00      	nop
 8002eca:	3724      	adds	r7, #36	; 0x24
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr

08002ed4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b095      	sub	sp, #84	; 0x54
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	330c      	adds	r3, #12
 8002ee2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ee6:	e853 3f00 	ldrex	r3, [r3]
 8002eea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002ef2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	330c      	adds	r3, #12
 8002efa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002efc:	643a      	str	r2, [r7, #64]	; 0x40
 8002efe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f00:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002f02:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002f04:	e841 2300 	strex	r3, r2, [r1]
 8002f08:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d1e5      	bne.n	8002edc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	3314      	adds	r3, #20
 8002f16:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f18:	6a3b      	ldr	r3, [r7, #32]
 8002f1a:	e853 3f00 	ldrex	r3, [r3]
 8002f1e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	f023 0301 	bic.w	r3, r3, #1
 8002f26:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	3314      	adds	r3, #20
 8002f2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f30:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f38:	e841 2300 	strex	r3, r2, [r1]
 8002f3c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d1e5      	bne.n	8002f10 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d119      	bne.n	8002f80 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	330c      	adds	r3, #12
 8002f52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	e853 3f00 	ldrex	r3, [r3]
 8002f5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	f023 0310 	bic.w	r3, r3, #16
 8002f62:	647b      	str	r3, [r7, #68]	; 0x44
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	330c      	adds	r3, #12
 8002f6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f6c:	61ba      	str	r2, [r7, #24]
 8002f6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f70:	6979      	ldr	r1, [r7, #20]
 8002f72:	69ba      	ldr	r2, [r7, #24]
 8002f74:	e841 2300 	strex	r3, r2, [r1]
 8002f78:	613b      	str	r3, [r7, #16]
   return(result);
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d1e5      	bne.n	8002f4c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2220      	movs	r2, #32
 8002f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002f8e:	bf00      	nop
 8002f90:	3754      	adds	r7, #84	; 0x54
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr
	...

08002f9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fa0:	b091      	sub	sp, #68	; 0x44
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6378      	str	r0, [r7, #52]	; 0x34
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fa8:	6819      	ldr	r1, [r3, #0]
 8002faa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	691b      	ldr	r3, [r3, #16]
 8002fb0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002fb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	610b      	str	r3, [r1, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fbe:	689a      	ldr	r2, [r3, #8]
 8002fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fc2:	691b      	ldr	r3, [r3, #16]
 8002fc4:	431a      	orrs	r2, r3
 8002fc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fc8:	695b      	ldr	r3, [r3, #20]
 8002fca:	431a      	orrs	r2, r3
 8002fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fce:	69db      	ldr	r3, [r3, #28]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	63bb      	str	r3, [r7, #56]	; 0x38
  MODIFY_REG(huart->Instance->CR1,
 8002fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fd6:	6819      	ldr	r1, [r3, #0]
 8002fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	f423 4216 	bic.w	r2, r3, #38400	; 0x9600
 8002fe2:	f022 020c 	bic.w	r2, r2, #12
 8002fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fee:	6819      	ldr	r1, [r3, #0]
 8002ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	695b      	ldr	r3, [r3, #20]
 8002ff6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	614b      	str	r3, [r1, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	4bba      	ldr	r3, [pc, #744]	; (80032f0 <UART_SetConfig+0x354>)
 8003008:	429a      	cmp	r2, r3
 800300a:	d004      	beq.n	8003016 <UART_SetConfig+0x7a>
 800300c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	4bb8      	ldr	r3, [pc, #736]	; (80032f4 <UART_SetConfig+0x358>)
 8003012:	429a      	cmp	r2, r3
 8003014:	d103      	bne.n	800301e <UART_SetConfig+0x82>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003016:	f7fe fd51 	bl	8001abc <HAL_RCC_GetPCLK2Freq>
 800301a:	63f8      	str	r0, [r7, #60]	; 0x3c
 800301c:	e002      	b.n	8003024 <UART_SetConfig+0x88>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800301e:	f7fe fd39 	bl	8001a94 <HAL_RCC_GetPCLK1Freq>
 8003022:	63f8      	str	r0, [r7, #60]	; 0x3c
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003026:	69db      	ldr	r3, [r3, #28]
 8003028:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800302c:	f040 80a7 	bne.w	800317e <UART_SetConfig+0x1e2>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	62ba      	str	r2, [r7, #40]	; 0x28
 8003036:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003038:	4619      	mov	r1, r3
 800303a:	f04f 0200 	mov.w	r2, #0
 800303e:	460b      	mov	r3, r1
 8003040:	4614      	mov	r4, r2
 8003042:	18db      	adds	r3, r3, r3
 8003044:	eb44 0404 	adc.w	r4, r4, r4
 8003048:	185b      	adds	r3, r3, r1
 800304a:	eb44 0402 	adc.w	r4, r4, r2
 800304e:	00e0      	lsls	r0, r4, #3
 8003050:	6178      	str	r0, [r7, #20]
 8003052:	6978      	ldr	r0, [r7, #20]
 8003054:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8003058:	6178      	str	r0, [r7, #20]
 800305a:	00db      	lsls	r3, r3, #3
 800305c:	613b      	str	r3, [r7, #16]
 800305e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003062:	185d      	adds	r5, r3, r1
 8003064:	eb44 0602 	adc.w	r6, r4, r2
 8003068:	4628      	mov	r0, r5
 800306a:	4631      	mov	r1, r6
 800306c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f04f 0400 	mov.w	r4, #0
 8003074:	18db      	adds	r3, r3, r3
 8003076:	eb44 0404 	adc.w	r4, r4, r4
 800307a:	461a      	mov	r2, r3
 800307c:	4623      	mov	r3, r4
 800307e:	f7fd f8ab 	bl	80001d8 <__aeabi_uldivmod>
 8003082:	4603      	mov	r3, r0
 8003084:	460c      	mov	r4, r1
 8003086:	461a      	mov	r2, r3
 8003088:	4b9b      	ldr	r3, [pc, #620]	; (80032f8 <UART_SetConfig+0x35c>)
 800308a:	fba3 2302 	umull	r2, r3, r3, r2
 800308e:	095b      	lsrs	r3, r3, #5
 8003090:	011e      	lsls	r6, r3, #4
 8003092:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003094:	4619      	mov	r1, r3
 8003096:	f04f 0200 	mov.w	r2, #0
 800309a:	460b      	mov	r3, r1
 800309c:	4614      	mov	r4, r2
 800309e:	18db      	adds	r3, r3, r3
 80030a0:	eb44 0404 	adc.w	r4, r4, r4
 80030a4:	185b      	adds	r3, r3, r1
 80030a6:	eb44 0402 	adc.w	r4, r4, r2
 80030aa:	ea4f 0bc4 	mov.w	fp, r4, lsl #3
 80030ae:	ea4b 7b53 	orr.w	fp, fp, r3, lsr #29
 80030b2:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
 80030b6:	4653      	mov	r3, sl
 80030b8:	465c      	mov	r4, fp
 80030ba:	eb13 0a01 	adds.w	sl, r3, r1
 80030be:	eb44 0b02 	adc.w	fp, r4, r2
 80030c2:	4650      	mov	r0, sl
 80030c4:	4659      	mov	r1, fp
 80030c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	f04f 0400 	mov.w	r4, #0
 80030ce:	18db      	adds	r3, r3, r3
 80030d0:	eb44 0404 	adc.w	r4, r4, r4
 80030d4:	461a      	mov	r2, r3
 80030d6:	4623      	mov	r3, r4
 80030d8:	f7fd f87e 	bl	80001d8 <__aeabi_uldivmod>
 80030dc:	4603      	mov	r3, r0
 80030de:	460c      	mov	r4, r1
 80030e0:	461a      	mov	r2, r3
 80030e2:	4b85      	ldr	r3, [pc, #532]	; (80032f8 <UART_SetConfig+0x35c>)
 80030e4:	fba3 1302 	umull	r1, r3, r3, r2
 80030e8:	095b      	lsrs	r3, r3, #5
 80030ea:	2164      	movs	r1, #100	; 0x64
 80030ec:	fb01 f303 	mul.w	r3, r1, r3
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	00db      	lsls	r3, r3, #3
 80030f4:	3332      	adds	r3, #50	; 0x32
 80030f6:	4a80      	ldr	r2, [pc, #512]	; (80032f8 <UART_SetConfig+0x35c>)
 80030f8:	fba2 2303 	umull	r2, r3, r2, r3
 80030fc:	095b      	lsrs	r3, r3, #5
 80030fe:	005b      	lsls	r3, r3, #1
 8003100:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003104:	441e      	add	r6, r3
 8003106:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003108:	4619      	mov	r1, r3
 800310a:	f04f 0200 	mov.w	r2, #0
 800310e:	460b      	mov	r3, r1
 8003110:	4614      	mov	r4, r2
 8003112:	18db      	adds	r3, r3, r3
 8003114:	eb44 0404 	adc.w	r4, r4, r4
 8003118:	185b      	adds	r3, r3, r1
 800311a:	eb44 0402 	adc.w	r4, r4, r2
 800311e:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8003122:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 8003126:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 800312a:	4643      	mov	r3, r8
 800312c:	464c      	mov	r4, r9
 800312e:	eb13 0801 	adds.w	r8, r3, r1
 8003132:	eb44 0902 	adc.w	r9, r4, r2
 8003136:	4640      	mov	r0, r8
 8003138:	4649      	mov	r1, r9
 800313a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f04f 0400 	mov.w	r4, #0
 8003142:	18db      	adds	r3, r3, r3
 8003144:	eb44 0404 	adc.w	r4, r4, r4
 8003148:	461a      	mov	r2, r3
 800314a:	4623      	mov	r3, r4
 800314c:	f7fd f844 	bl	80001d8 <__aeabi_uldivmod>
 8003150:	4603      	mov	r3, r0
 8003152:	460c      	mov	r4, r1
 8003154:	461a      	mov	r2, r3
 8003156:	4b68      	ldr	r3, [pc, #416]	; (80032f8 <UART_SetConfig+0x35c>)
 8003158:	fba3 1302 	umull	r1, r3, r3, r2
 800315c:	095b      	lsrs	r3, r3, #5
 800315e:	2164      	movs	r1, #100	; 0x64
 8003160:	fb01 f303 	mul.w	r3, r1, r3
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	00db      	lsls	r3, r3, #3
 8003168:	3332      	adds	r3, #50	; 0x32
 800316a:	4a63      	ldr	r2, [pc, #396]	; (80032f8 <UART_SetConfig+0x35c>)
 800316c:	fba2 2303 	umull	r2, r3, r2, r3
 8003170:	095b      	lsrs	r3, r3, #5
 8003172:	f003 0307 	and.w	r3, r3, #7
 8003176:	4433      	add	r3, r6
 8003178:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800317a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800317c:	e0b3      	b.n	80032e6 <UART_SetConfig+0x34a>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800317e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	613b      	str	r3, [r7, #16]
 8003184:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003186:	4619      	mov	r1, r3
 8003188:	f04f 0200 	mov.w	r2, #0
 800318c:	460b      	mov	r3, r1
 800318e:	4614      	mov	r4, r2
 8003190:	18db      	adds	r3, r3, r3
 8003192:	eb44 0404 	adc.w	r4, r4, r4
 8003196:	185b      	adds	r3, r3, r1
 8003198:	eb44 0402 	adc.w	r4, r4, r2
 800319c:	00e6      	lsls	r6, r4, #3
 800319e:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
 80031a2:	00dd      	lsls	r5, r3, #3
 80031a4:	462b      	mov	r3, r5
 80031a6:	4634      	mov	r4, r6
 80031a8:	185d      	adds	r5, r3, r1
 80031aa:	eb44 0602 	adc.w	r6, r4, r2
 80031ae:	4628      	mov	r0, r5
 80031b0:	4631      	mov	r1, r6
 80031b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f04f 0400 	mov.w	r4, #0
 80031ba:	00a5      	lsls	r5, r4, #2
 80031bc:	62fd      	str	r5, [r7, #44]	; 0x2c
 80031be:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80031c0:	ea45 7593 	orr.w	r5, r5, r3, lsr #30
 80031c4:	62fd      	str	r5, [r7, #44]	; 0x2c
 80031c6:	009c      	lsls	r4, r3, #2
 80031c8:	62bc      	str	r4, [r7, #40]	; 0x28
 80031ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80031ce:	f7fd f803 	bl	80001d8 <__aeabi_uldivmod>
 80031d2:	4603      	mov	r3, r0
 80031d4:	460c      	mov	r4, r1
 80031d6:	461a      	mov	r2, r3
 80031d8:	4b47      	ldr	r3, [pc, #284]	; (80032f8 <UART_SetConfig+0x35c>)
 80031da:	fba3 1302 	umull	r1, r3, r3, r2
 80031de:	095b      	lsrs	r3, r3, #5
 80031e0:	011d      	lsls	r5, r3, #4
 80031e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031e4:	4619      	mov	r1, r3
 80031e6:	f04f 0200 	mov.w	r2, #0
 80031ea:	460b      	mov	r3, r1
 80031ec:	4614      	mov	r4, r2
 80031ee:	18db      	adds	r3, r3, r3
 80031f0:	eb44 0404 	adc.w	r4, r4, r4
 80031f4:	185b      	adds	r3, r3, r1
 80031f6:	eb44 0402 	adc.w	r4, r4, r2
 80031fa:	00e0      	lsls	r0, r4, #3
 80031fc:	60f8      	str	r0, [r7, #12]
 80031fe:	68f8      	ldr	r0, [r7, #12]
 8003200:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8003204:	60f8      	str	r0, [r7, #12]
 8003206:	00d8      	lsls	r0, r3, #3
 8003208:	60b8      	str	r0, [r7, #8]
 800320a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800320e:	eb13 0801 	adds.w	r8, r3, r1
 8003212:	eb44 0902 	adc.w	r9, r4, r2
 8003216:	4640      	mov	r0, r8
 8003218:	4649      	mov	r1, r9
 800321a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f04f 0400 	mov.w	r4, #0
 8003222:	00a6      	lsls	r6, r4, #2
 8003224:	627e      	str	r6, [r7, #36]	; 0x24
 8003226:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 8003228:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
 800322c:	627e      	str	r6, [r7, #36]	; 0x24
 800322e:	009c      	lsls	r4, r3, #2
 8003230:	623c      	str	r4, [r7, #32]
 8003232:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003236:	f7fc ffcf 	bl	80001d8 <__aeabi_uldivmod>
 800323a:	4603      	mov	r3, r0
 800323c:	460c      	mov	r4, r1
 800323e:	461a      	mov	r2, r3
 8003240:	4b2d      	ldr	r3, [pc, #180]	; (80032f8 <UART_SetConfig+0x35c>)
 8003242:	fba3 1302 	umull	r1, r3, r3, r2
 8003246:	095b      	lsrs	r3, r3, #5
 8003248:	2164      	movs	r1, #100	; 0x64
 800324a:	fb01 f303 	mul.w	r3, r1, r3
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	011b      	lsls	r3, r3, #4
 8003252:	3332      	adds	r3, #50	; 0x32
 8003254:	4a28      	ldr	r2, [pc, #160]	; (80032f8 <UART_SetConfig+0x35c>)
 8003256:	fba2 1303 	umull	r1, r3, r2, r3
 800325a:	095b      	lsrs	r3, r3, #5
 800325c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003260:	441d      	add	r5, r3
 8003262:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003264:	4619      	mov	r1, r3
 8003266:	f04f 0200 	mov.w	r2, #0
 800326a:	460b      	mov	r3, r1
 800326c:	4614      	mov	r4, r2
 800326e:	18db      	adds	r3, r3, r3
 8003270:	eb44 0404 	adc.w	r4, r4, r4
 8003274:	185b      	adds	r3, r3, r1
 8003276:	eb44 0402 	adc.w	r4, r4, r2
 800327a:	00e0      	lsls	r0, r4, #3
 800327c:	6078      	str	r0, [r7, #4]
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8003284:	6078      	str	r0, [r7, #4]
 8003286:	00d8      	lsls	r0, r3, #3
 8003288:	6038      	str	r0, [r7, #0]
 800328a:	e897 0018 	ldmia.w	r7, {r3, r4}
 800328e:	eb13 0801 	adds.w	r8, r3, r1
 8003292:	eb44 0902 	adc.w	r9, r4, r2
 8003296:	4640      	mov	r0, r8
 8003298:	4649      	mov	r1, r9
 800329a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f04f 0400 	mov.w	r4, #0
 80032a2:	00a6      	lsls	r6, r4, #2
 80032a4:	61fe      	str	r6, [r7, #28]
 80032a6:	69fe      	ldr	r6, [r7, #28]
 80032a8:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
 80032ac:	61fe      	str	r6, [r7, #28]
 80032ae:	009c      	lsls	r4, r3, #2
 80032b0:	61bc      	str	r4, [r7, #24]
 80032b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032b6:	f7fc ff8f 	bl	80001d8 <__aeabi_uldivmod>
 80032ba:	4603      	mov	r3, r0
 80032bc:	460c      	mov	r4, r1
 80032be:	461a      	mov	r2, r3
 80032c0:	4b0d      	ldr	r3, [pc, #52]	; (80032f8 <UART_SetConfig+0x35c>)
 80032c2:	fba3 1302 	umull	r1, r3, r3, r2
 80032c6:	095b      	lsrs	r3, r3, #5
 80032c8:	2164      	movs	r1, #100	; 0x64
 80032ca:	fb01 f303 	mul.w	r3, r1, r3
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	011b      	lsls	r3, r3, #4
 80032d2:	3332      	adds	r3, #50	; 0x32
 80032d4:	4a08      	ldr	r2, [pc, #32]	; (80032f8 <UART_SetConfig+0x35c>)
 80032d6:	fba2 1303 	umull	r1, r3, r2, r3
 80032da:	095b      	lsrs	r3, r3, #5
 80032dc:	f003 030f 	and.w	r3, r3, #15
 80032e0:	442b      	add	r3, r5
 80032e2:	693a      	ldr	r2, [r7, #16]
 80032e4:	6093      	str	r3, [r2, #8]
}
 80032e6:	bf00      	nop
 80032e8:	3744      	adds	r7, #68	; 0x44
 80032ea:	46bd      	mov	sp, r7
 80032ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032f0:	40011000 	.word	0x40011000
 80032f4:	40011400 	.word	0x40011400
 80032f8:	51eb851f 	.word	0x51eb851f

080032fc <init_config>:
 * config.c
 *
 */
#include "config.h"

void init_config(motor_config_t* config, float freq, float duty, float delay){
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	ed87 0a02 	vstr	s0, [r7, #8]
 8003308:	edc7 0a01 	vstr	s1, [r7, #4]
 800330c:	ed87 1a00 	vstr	s2, [r7]
	motor_set_freq(config, freq);
 8003310:	ed97 0a02 	vldr	s0, [r7, #8]
 8003314:	68f8      	ldr	r0, [r7, #12]
 8003316:	f000 f809 	bl	800332c <motor_set_freq>
	motor_set_duty(config, duty);
 800331a:	ed97 0a01 	vldr	s0, [r7, #4]
 800331e:	68f8      	ldr	r0, [r7, #12]
 8003320:	f000 f870 	bl	8003404 <motor_set_duty>
//	motor_set_delay_us(config, delay);
}
 8003324:	bf00      	nop
 8003326:	3710      	adds	r7, #16
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}

0800332c <motor_set_freq>:

void motor_set_freq(motor_config_t* config, float freq){
 800332c:	b480      	push	{r7}
 800332e:	b087      	sub	sp, #28
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	ed87 0a00 	vstr	s0, [r7]
	config->freq = freq;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	683a      	ldr	r2, [r7, #0]
 800333c:	601a      	str	r2, [r3, #0]
	TIM_HandleTypeDef* tim = config->tim;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	60fb      	str	r3, [r7, #12]
	uint32_t preescaler = 0;
 8003344:	2300      	movs	r3, #0
 8003346:	617b      	str	r3, [r7, #20]
	uint32_t period = SYSCLK / config->freq / (preescaler + 1);
 8003348:	4b2d      	ldr	r3, [pc, #180]	; (8003400 <motor_set_freq+0xd4>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	ee07 3a90 	vmov	s15, r3
 8003350:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	edd3 7a00 	vldr	s15, [r3]
 800335a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	3301      	adds	r3, #1
 8003362:	ee07 3a90 	vmov	s15, r3
 8003366:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800336a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800336e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003372:	ee17 3a90 	vmov	r3, s15
 8003376:	613b      	str	r3, [r7, #16]
	while(period > (1<<16) - 1){
 8003378:	e01a      	b.n	80033b0 <motor_set_freq+0x84>
		preescaler++;
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	3301      	adds	r3, #1
 800337e:	617b      	str	r3, [r7, #20]
		period = SYSCLK / config->freq / (preescaler + 1);
 8003380:	4b1f      	ldr	r3, [pc, #124]	; (8003400 <motor_set_freq+0xd4>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	ee07 3a90 	vmov	s15, r3
 8003388:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	edd3 7a00 	vldr	s15, [r3]
 8003392:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	3301      	adds	r3, #1
 800339a:	ee07 3a90 	vmov	s15, r3
 800339e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80033a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033aa:	ee17 3a90 	vmov	r3, s15
 80033ae:	613b      	str	r3, [r7, #16]
	while(period > (1<<16) - 1){
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033b6:	d2e0      	bcs.n	800337a <motor_set_freq+0x4e>
	}
	tim->Instance->PSC = preescaler;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	697a      	ldr	r2, [r7, #20]
 80033be:	629a      	str	r2, [r3, #40]	; 0x28
	config->period = period;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	60da      	str	r2, [r3, #12]
	config->freq = freq;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	683a      	ldr	r2, [r7, #0]
 80033ca:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_AUTORELOAD(config->tim, period - 1);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	691b      	ldr	r3, [r3, #16]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	693a      	ldr	r2, [r7, #16]
 80033d4:	3a01      	subs	r2, #1
 80033d6:	62da      	str	r2, [r3, #44]	; 0x2c
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	691b      	ldr	r3, [r3, #16]
 80033dc:	693a      	ldr	r2, [r7, #16]
 80033de:	3a01      	subs	r2, #1
 80033e0:	60da      	str	r2, [r3, #12]
	tim->Instance->EGR |= TIM_EGR_UG;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	68fa      	ldr	r2, [r7, #12]
 80033e8:	6812      	ldr	r2, [r2, #0]
 80033ea:	6952      	ldr	r2, [r2, #20]
 80033ec:	f042 0201 	orr.w	r2, r2, #1
 80033f0:	615a      	str	r2, [r3, #20]
}
 80033f2:	bf00      	nop
 80033f4:	371c      	adds	r7, #28
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	2000002c 	.word	0x2000002c

08003404 <motor_set_duty>:

void motor_set_duty(motor_config_t* config, float duty){
 8003404:	b480      	push	{r7}
 8003406:	b085      	sub	sp, #20
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	ed87 0a00 	vstr	s0, [r7]
	uint32_t pwm_value = duty * config->period;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	ee07 3a90 	vmov	s15, r3
 8003418:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800341c:	edd7 7a00 	vldr	s15, [r7]
 8003420:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003424:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003428:	ee17 3a90 	vmov	r3, s15
 800342c:	60fb      	str	r3, [r7, #12]
	if(pwm_value > 0){
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d002      	beq.n	800343a <motor_set_duty+0x36>
		pwm_value -= 1;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	3b01      	subs	r3, #1
 8003438:	60fb      	str	r3, [r7, #12]
	}
	config->duty = duty;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	683a      	ldr	r2, [r7, #0]
 800343e:	605a      	str	r2, [r3, #4]
	__HAL_TIM_SET_COMPARE(config->tim, TIM_CHANNEL_1, pwm_value);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	691b      	ldr	r3, [r3, #16]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	68fa      	ldr	r2, [r7, #12]
 8003448:	635a      	str	r2, [r3, #52]	; 0x34
}
 800344a:	bf00      	nop
 800344c:	3714      	adds	r7, #20
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
	...

08003458 <motor_set_delay_us>:
	config->delay = delay;
	uint16_t phase_shift = config->delay * config->period;
  __HAL_TIM_SET_COUNTER(tim, phase_shift);
}

void motor_set_delay_us(motor_config_t* config, float delay_us){
 8003458:	b480      	push	{r7}
 800345a:	b089      	sub	sp, #36	; 0x24
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	ed87 0a02 	vstr	s0, [r7, #8]
	TIM_HandleTypeDef* tim = config->tim;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	691b      	ldr	r3, [r3, #16]
 8003468:	61fb      	str	r3, [r7, #28]
	uint32_t ARR = (config->period - 1);//tim->Instance->ARR;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	3b01      	subs	r3, #1
 8003470:	61bb      	str	r3, [r7, #24]
	float period_us = 1e6 / config->freq;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	ed93 7a00 	vldr	s14, [r3]
 8003478:	eddf 6a18 	vldr	s13, [pc, #96]	; 80034dc <motor_set_delay_us+0x84>
 800347c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003480:	edc7 7a05 	vstr	s15, [r7, #20]
	if(delay_us > period_us){
 8003484:	ed97 7a02 	vldr	s14, [r7, #8]
 8003488:	edd7 7a05 	vldr	s15, [r7, #20]
 800348c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003494:	dd02      	ble.n	800349c <motor_set_delay_us+0x44>
		delay_us = 0;
 8003496:	f04f 0300 	mov.w	r3, #0
 800349a:	60bb      	str	r3, [r7, #8]
	}
	uint16_t phase_shift = delay_us/period_us * ARR;
 800349c:	edd7 6a02 	vldr	s13, [r7, #8]
 80034a0:	edd7 7a05 	vldr	s15, [r7, #20]
 80034a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	ee07 3a90 	vmov	s15, r3
 80034ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034ba:	edc7 7a01 	vstr	s15, [r7, #4]
 80034be:	88bb      	ldrh	r3, [r7, #4]
 80034c0:	827b      	strh	r3, [r7, #18]
  __HAL_TIM_SET_COUNTER(tim, ARR - phase_shift);
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	8a7a      	ldrh	r2, [r7, #18]
 80034c8:	69b9      	ldr	r1, [r7, #24]
 80034ca:	1a8a      	subs	r2, r1, r2
 80034cc:	625a      	str	r2, [r3, #36]	; 0x24
}
 80034ce:	bf00      	nop
 80034d0:	3724      	adds	r7, #36	; 0x24
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop
 80034dc:	49742400 	.word	0x49742400

080034e0 <start_motors>:

void start_motors(motor_config_t* config, uint16_t length){
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	460b      	mov	r3, r1
 80034ea:	807b      	strh	r3, [r7, #2]
	for (int i = length-1; i >= 0; --i) {
 80034ec:	887b      	ldrh	r3, [r7, #2]
 80034ee:	3b01      	subs	r3, #1
 80034f0:	60fb      	str	r3, [r7, #12]
 80034f2:	e00f      	b.n	8003514 <start_motors+0x34>
		HAL_TIM_PWM_Start(config[i].tim, TIM_CHANNEL_1);
 80034f4:	68fa      	ldr	r2, [r7, #12]
 80034f6:	4613      	mov	r3, r2
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	4413      	add	r3, r2
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	461a      	mov	r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4413      	add	r3, r2
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	2100      	movs	r1, #0
 8003508:	4618      	mov	r0, r3
 800350a:	f7fe fb93 	bl	8001c34 <HAL_TIM_PWM_Start>
	for (int i = length-1; i >= 0; --i) {
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	3b01      	subs	r3, #1
 8003512:	60fb      	str	r3, [r7, #12]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2b00      	cmp	r3, #0
 8003518:	daec      	bge.n	80034f4 <start_motors+0x14>
	}
}
 800351a:	bf00      	nop
 800351c:	3710      	adds	r7, #16
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}

08003522 <stop_motors>:

void stop_motors(motor_config_t* config, uint16_t length){
 8003522:	b580      	push	{r7, lr}
 8003524:	b084      	sub	sp, #16
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
 800352a:	460b      	mov	r3, r1
 800352c:	807b      	strh	r3, [r7, #2]
	for (int i = 0; i < length; ++i) {
 800352e:	2300      	movs	r3, #0
 8003530:	60fb      	str	r3, [r7, #12]
 8003532:	e00f      	b.n	8003554 <stop_motors+0x32>
		HAL_TIM_PWM_Stop(config[i].tim, TIM_CHANNEL_1);
 8003534:	68fa      	ldr	r2, [r7, #12]
 8003536:	4613      	mov	r3, r2
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	4413      	add	r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	461a      	mov	r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	4413      	add	r3, r2
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	2100      	movs	r1, #0
 8003548:	4618      	mov	r0, r3
 800354a:	f7fe fc23 	bl	8001d94 <HAL_TIM_PWM_Stop>
	for (int i = 0; i < length; ++i) {
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	3301      	adds	r3, #1
 8003552:	60fb      	str	r3, [r7, #12]
 8003554:	887a      	ldrh	r2, [r7, #2]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	429a      	cmp	r2, r3
 800355a:	dceb      	bgt.n	8003534 <stop_motors+0x12>
	}
	reset_motor_timers(config, length);
 800355c:	887b      	ldrh	r3, [r7, #2]
 800355e:	4619      	mov	r1, r3
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f000 f804 	bl	800356e <reset_motor_timers>
}
 8003566:	bf00      	nop
 8003568:	3710      	adds	r7, #16
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}

0800356e <reset_motor_timers>:

void reset_motor_timers(motor_config_t* config, uint16_t length){
 800356e:	b480      	push	{r7}
 8003570:	b085      	sub	sp, #20
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
 8003576:	460b      	mov	r3, r1
 8003578:	807b      	strh	r3, [r7, #2]
	for (int i = 0; i < length; ++i) {
 800357a:	2300      	movs	r3, #0
 800357c:	60fb      	str	r3, [r7, #12]
 800357e:	e01a      	b.n	80035b6 <reset_motor_timers+0x48>
		// Triggering update event resets CNT and PSC cnt
		config[i].tim->Instance->EGR |= TIM_EGR_UG;
 8003580:	68fa      	ldr	r2, [r7, #12]
 8003582:	4613      	mov	r3, r2
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	4413      	add	r3, r2
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	461a      	mov	r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4413      	add	r3, r2
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	6819      	ldr	r1, [r3, #0]
 8003594:	68fa      	ldr	r2, [r7, #12]
 8003596:	4613      	mov	r3, r2
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	4413      	add	r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	461a      	mov	r2, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4413      	add	r3, r2
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	f043 0301 	orr.w	r3, r3, #1
 80035ae:	614b      	str	r3, [r1, #20]
	for (int i = 0; i < length; ++i) {
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	3301      	adds	r3, #1
 80035b4:	60fb      	str	r3, [r7, #12]
 80035b6:	887a      	ldrh	r2, [r7, #2]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	dce0      	bgt.n	8003580 <reset_motor_timers+0x12>
	}
}
 80035be:	bf00      	nop
 80035c0:	3714      	adds	r7, #20
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
	...

080035cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80035d2:	2300      	movs	r3, #0
 80035d4:	607b      	str	r3, [r7, #4]
 80035d6:	4a0c      	ldr	r2, [pc, #48]	; (8003608 <MX_DMA_Init+0x3c>)
 80035d8:	4b0b      	ldr	r3, [pc, #44]	; (8003608 <MX_DMA_Init+0x3c>)
 80035da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80035e0:	6313      	str	r3, [r2, #48]	; 0x30
 80035e2:	4b09      	ldr	r3, [pc, #36]	; (8003608 <MX_DMA_Init+0x3c>)
 80035e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035ea:	607b      	str	r3, [r7, #4]
 80035ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80035ee:	2200      	movs	r2, #0
 80035f0:	2100      	movs	r1, #0
 80035f2:	203a      	movs	r0, #58	; 0x3a
 80035f4:	f7fd f8e5 	bl	80007c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80035f8:	203a      	movs	r0, #58	; 0x3a
 80035fa:	f7fd f8fe 	bl	80007fa <HAL_NVIC_EnableIRQ>

}
 80035fe:	bf00      	nop
 8003600:	3708      	adds	r7, #8
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	40023800 	.word	0x40023800

0800360c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800360c:	b480      	push	{r7}
 800360e:	b087      	sub	sp, #28
 8003610:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003612:	2300      	movs	r3, #0
 8003614:	617b      	str	r3, [r7, #20]
 8003616:	4a25      	ldr	r2, [pc, #148]	; (80036ac <MX_GPIO_Init+0xa0>)
 8003618:	4b24      	ldr	r3, [pc, #144]	; (80036ac <MX_GPIO_Init+0xa0>)
 800361a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003620:	6313      	str	r3, [r2, #48]	; 0x30
 8003622:	4b22      	ldr	r3, [pc, #136]	; (80036ac <MX_GPIO_Init+0xa0>)
 8003624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800362a:	617b      	str	r3, [r7, #20]
 800362c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800362e:	2300      	movs	r3, #0
 8003630:	613b      	str	r3, [r7, #16]
 8003632:	4a1e      	ldr	r2, [pc, #120]	; (80036ac <MX_GPIO_Init+0xa0>)
 8003634:	4b1d      	ldr	r3, [pc, #116]	; (80036ac <MX_GPIO_Init+0xa0>)
 8003636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003638:	f043 0301 	orr.w	r3, r3, #1
 800363c:	6313      	str	r3, [r2, #48]	; 0x30
 800363e:	4b1b      	ldr	r3, [pc, #108]	; (80036ac <MX_GPIO_Init+0xa0>)
 8003640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	613b      	str	r3, [r7, #16]
 8003648:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800364a:	2300      	movs	r3, #0
 800364c:	60fb      	str	r3, [r7, #12]
 800364e:	4a17      	ldr	r2, [pc, #92]	; (80036ac <MX_GPIO_Init+0xa0>)
 8003650:	4b16      	ldr	r3, [pc, #88]	; (80036ac <MX_GPIO_Init+0xa0>)
 8003652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003654:	f043 0310 	orr.w	r3, r3, #16
 8003658:	6313      	str	r3, [r2, #48]	; 0x30
 800365a:	4b14      	ldr	r3, [pc, #80]	; (80036ac <MX_GPIO_Init+0xa0>)
 800365c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365e:	f003 0310 	and.w	r3, r3, #16
 8003662:	60fb      	str	r3, [r7, #12]
 8003664:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003666:	2300      	movs	r3, #0
 8003668:	60bb      	str	r3, [r7, #8]
 800366a:	4a10      	ldr	r2, [pc, #64]	; (80036ac <MX_GPIO_Init+0xa0>)
 800366c:	4b0f      	ldr	r3, [pc, #60]	; (80036ac <MX_GPIO_Init+0xa0>)
 800366e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003670:	f043 0308 	orr.w	r3, r3, #8
 8003674:	6313      	str	r3, [r2, #48]	; 0x30
 8003676:	4b0d      	ldr	r3, [pc, #52]	; (80036ac <MX_GPIO_Init+0xa0>)
 8003678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367a:	f003 0308 	and.w	r3, r3, #8
 800367e:	60bb      	str	r3, [r7, #8]
 8003680:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003682:	2300      	movs	r3, #0
 8003684:	607b      	str	r3, [r7, #4]
 8003686:	4a09      	ldr	r2, [pc, #36]	; (80036ac <MX_GPIO_Init+0xa0>)
 8003688:	4b08      	ldr	r3, [pc, #32]	; (80036ac <MX_GPIO_Init+0xa0>)
 800368a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800368c:	f043 0304 	orr.w	r3, r3, #4
 8003690:	6313      	str	r3, [r2, #48]	; 0x30
 8003692:	4b06      	ldr	r3, [pc, #24]	; (80036ac <MX_GPIO_Init+0xa0>)
 8003694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003696:	f003 0304 	and.w	r3, r3, #4
 800369a:	607b      	str	r3, [r7, #4]
 800369c:	687b      	ldr	r3, [r7, #4]

}
 800369e:	bf00      	nop
 80036a0:	371c      	adds	r7, #28
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr
 80036aa:	bf00      	nop
 80036ac:	40023800 	.word	0x40023800

080036b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80036b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036b4:	f5ad 7d5d 	sub.w	sp, sp, #884	; 0x374
 80036b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80036ba:	f7fc ff15 	bl	80004e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80036be:	f000 f92f 	bl	8003920 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80036c2:	f7ff ffa3 	bl	800360c <MX_GPIO_Init>
  MX_TIM1_Init();
 80036c6:	f000 fc77 	bl	8003fb8 <MX_TIM1_Init>
  MX_TIM3_Init();
 80036ca:	f000 fda1 	bl	8004210 <MX_TIM3_Init>
  MX_TIM4_Init();
 80036ce:	f000 fe2d 	bl	800432c <MX_TIM4_Init>
  MX_TIM9_Init();
 80036d2:	f000 ff47 	bl	8004564 <MX_TIM9_Init>
  MX_DMA_Init();
 80036d6:	f7ff ff79 	bl	80035cc <MX_DMA_Init>
  MX_USART1_UART_Init();
 80036da:	f001 f949 	bl	8004970 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80036de:	f000 fd0b 	bl	80040f8 <MX_TIM2_Init>
  MX_TIM5_Init();
 80036e2:	f000 feb1 	bl	8004448 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  SYSCLK = HAL_RCC_GetSysClockFreq();
 80036e6:	f7fe f8f1 	bl	80018cc <HAL_RCC_GetSysClockFreq>
 80036ea:	4602      	mov	r2, r0
 80036ec:	4b81      	ldr	r3, [pc, #516]	; (80038f4 <main+0x244>)
 80036ee:	601a      	str	r2, [r3, #0]
//  GPIO_TypeDef *ports[] = {GPIOE, 	 GPIOA, 	  GPIOC, 	  GPIOD,  	   GPIOA, 	   GPIOA};
//  uint32_t pins[] = 		{GPIO_PIN_9, GPIO_PIN_15, GPIO_PIN_6, GPIO_PIN_12, GPIO_PIN_0, GPIO_PIN_2};
  TIM_HandleTypeDef timers[] = {htim1, htim2, htim3, htim4, htim5, htim9};
 80036f0:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80036f4:	4a80      	ldr	r2, [pc, #512]	; (80038f8 <main+0x248>)
 80036f6:	4618      	mov	r0, r3
 80036f8:	4611      	mov	r1, r2
 80036fa:	2348      	movs	r3, #72	; 0x48
 80036fc:	461a      	mov	r2, r3
 80036fe:	f001 fa2b 	bl	8004b58 <memcpy>
 8003702:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8003706:	4a7d      	ldr	r2, [pc, #500]	; (80038fc <main+0x24c>)
 8003708:	3348      	adds	r3, #72	; 0x48
 800370a:	4611      	mov	r1, r2
 800370c:	2248      	movs	r2, #72	; 0x48
 800370e:	4618      	mov	r0, r3
 8003710:	f001 fa22 	bl	8004b58 <memcpy>
 8003714:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8003718:	4a79      	ldr	r2, [pc, #484]	; (8003900 <main+0x250>)
 800371a:	3390      	adds	r3, #144	; 0x90
 800371c:	4611      	mov	r1, r2
 800371e:	2248      	movs	r2, #72	; 0x48
 8003720:	4618      	mov	r0, r3
 8003722:	f001 fa19 	bl	8004b58 <memcpy>
 8003726:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800372a:	4a76      	ldr	r2, [pc, #472]	; (8003904 <main+0x254>)
 800372c:	33d8      	adds	r3, #216	; 0xd8
 800372e:	4611      	mov	r1, r2
 8003730:	2248      	movs	r2, #72	; 0x48
 8003732:	4618      	mov	r0, r3
 8003734:	f001 fa10 	bl	8004b58 <memcpy>
 8003738:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800373c:	4a72      	ldr	r2, [pc, #456]	; (8003908 <main+0x258>)
 800373e:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8003742:	4611      	mov	r1, r2
 8003744:	2248      	movs	r2, #72	; 0x48
 8003746:	4618      	mov	r0, r3
 8003748:	f001 fa06 	bl	8004b58 <memcpy>
 800374c:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8003750:	4a6e      	ldr	r2, [pc, #440]	; (800390c <main+0x25c>)
 8003752:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003756:	4611      	mov	r1, r2
 8003758:	2248      	movs	r2, #72	; 0x48
 800375a:	4618      	mov	r0, r3
 800375c:	f001 f9fc 	bl	8004b58 <memcpy>
  num_motors = sizeof(timers)/sizeof(timers[0]);
 8003760:	4b6b      	ldr	r3, [pc, #428]	; (8003910 <main+0x260>)
 8003762:	2206      	movs	r2, #6
 8003764:	701a      	strb	r2, [r3, #0]
  motor_config_t motors[num_motors];
 8003766:	4b6a      	ldr	r3, [pc, #424]	; (8003910 <main+0x260>)
 8003768:	781a      	ldrb	r2, [r3, #0]
 800376a:	4613      	mov	r3, r2
 800376c:	3b01      	subs	r3, #1
 800376e:	f8c7 3368 	str.w	r3, [r7, #872]	; 0x368
 8003772:	b2d0      	uxtb	r0, r2
 8003774:	f04f 0100 	mov.w	r1, #0
 8003778:	e9c7 0100 	strd	r0, r1, [r7]
 800377c:	4603      	mov	r3, r0
 800377e:	460c      	mov	r4, r1
 8003780:	00a1      	lsls	r1, r4, #2
 8003782:	60f9      	str	r1, [r7, #12]
 8003784:	68f9      	ldr	r1, [r7, #12]
 8003786:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 800378a:	60f9      	str	r1, [r7, #12]
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	60bb      	str	r3, [r7, #8]
 8003790:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003794:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003798:	18c0      	adds	r0, r0, r3
 800379a:	eb41 0104 	adc.w	r1, r1, r4
 800379e:	4603      	mov	r3, r0
 80037a0:	460c      	mov	r4, r1
 80037a2:	ea4f 1b44 	mov.w	fp, r4, lsl #5
 80037a6:	ea4b 6bd3 	orr.w	fp, fp, r3, lsr #27
 80037aa:	ea4f 1a43 	mov.w	sl, r3, lsl #5
 80037ae:	b2d0      	uxtb	r0, r2
 80037b0:	f04f 0100 	mov.w	r1, #0
 80037b4:	4603      	mov	r3, r0
 80037b6:	460c      	mov	r4, r1
 80037b8:	ea4f 0984 	mov.w	r9, r4, lsl #2
 80037bc:	ea49 7993 	orr.w	r9, r9, r3, lsr #30
 80037c0:	ea4f 0883 	mov.w	r8, r3, lsl #2
 80037c4:	4643      	mov	r3, r8
 80037c6:	464c      	mov	r4, r9
 80037c8:	181b      	adds	r3, r3, r0
 80037ca:	eb44 0401 	adc.w	r4, r4, r1
 80037ce:	0166      	lsls	r6, r4, #5
 80037d0:	ea46 66d3 	orr.w	r6, r6, r3, lsr #27
 80037d4:	015d      	lsls	r5, r3, #5
 80037d6:	4613      	mov	r3, r2
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	4413      	add	r3, r2
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	3303      	adds	r3, #3
 80037e0:	3307      	adds	r3, #7
 80037e2:	08db      	lsrs	r3, r3, #3
 80037e4:	00db      	lsls	r3, r3, #3
 80037e6:	ebad 0d03 	sub.w	sp, sp, r3
 80037ea:	466b      	mov	r3, sp
 80037ec:	3303      	adds	r3, #3
 80037ee:	089b      	lsrs	r3, r3, #2
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
  for (int i = 0; i < num_motors; ++i) {
 80037f6:	2300      	movs	r3, #0
 80037f8:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80037fc:	e02a      	b.n	8003854 <main+0x1a4>
	  motors[i].tim = &timers[i];
 80037fe:	f507 71d8 	add.w	r1, r7, #432	; 0x1b0
 8003802:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8003806:	4613      	mov	r3, r2
 8003808:	00db      	lsls	r3, r3, #3
 800380a:	4413      	add	r3, r2
 800380c:	00db      	lsls	r3, r3, #3
 800380e:	4419      	add	r1, r3
 8003810:	f8d7 0364 	ldr.w	r0, [r7, #868]	; 0x364
 8003814:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8003818:	4613      	mov	r3, r2
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	4413      	add	r3, r2
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	4403      	add	r3, r0
 8003822:	3310      	adds	r3, #16
 8003824:	6019      	str	r1, [r3, #0]
	  init_config(&motors[i], 100, 0, 0);
 8003826:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 800382a:	4613      	mov	r3, r2
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	4413      	add	r3, r2
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	f8d7 2364 	ldr.w	r2, [r7, #868]	; 0x364
 8003836:	4413      	add	r3, r2
 8003838:	ed9f 1a36 	vldr	s2, [pc, #216]	; 8003914 <main+0x264>
 800383c:	eddf 0a35 	vldr	s1, [pc, #212]	; 8003914 <main+0x264>
 8003840:	ed9f 0a35 	vldr	s0, [pc, #212]	; 8003918 <main+0x268>
 8003844:	4618      	mov	r0, r3
 8003846:	f7ff fd59 	bl	80032fc <init_config>
  for (int i = 0; i < num_motors; ++i) {
 800384a:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 800384e:	3301      	adds	r3, #1
 8003850:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8003854:	4b2e      	ldr	r3, [pc, #184]	; (8003910 <main+0x260>)
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	461a      	mov	r2, r3
 800385a:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 800385e:	429a      	cmp	r2, r3
 8003860:	dccd      	bgt.n	80037fe <main+0x14e>
  }
  start_motors(motors, num_motors);
 8003862:	f8d7 2364 	ldr.w	r2, [r7, #868]	; 0x364
 8003866:	4b2a      	ldr	r3, [pc, #168]	; (8003910 <main+0x260>)
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	b29b      	uxth	r3, r3
 800386c:	4619      	mov	r1, r3
 800386e:	4610      	mov	r0, r2
 8003870:	f7ff fe36 	bl	80034e0 <start_motors>
  HAL_Delay(10);
 8003874:	200a      	movs	r0, #10
 8003876:	f7fc fea9 	bl	80005cc <HAL_Delay>
  stop_motors(motors, num_motors);
 800387a:	f8d7 2364 	ldr.w	r2, [r7, #868]	; 0x364
 800387e:	4b24      	ldr	r3, [pc, #144]	; (8003910 <main+0x260>)
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	b29b      	uxth	r3, r3
 8003884:	4619      	mov	r1, r3
 8003886:	4610      	mov	r0, r2
 8003888:	f7ff fe4b 	bl	8003522 <stop_motors>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  decoder_t decoder;
  packet_t packet;
  retval_t ret;
  decoder_initialise(&decoder, &huart1);
 800388c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003890:	4922      	ldr	r1, [pc, #136]	; (800391c <main+0x26c>)
 8003892:	4618      	mov	r0, r3
 8003894:	f000 f8b0 	bl	80039f8 <decoder_initialise>
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);   // enable idle line interrupt
 8003898:	4b20      	ldr	r3, [pc, #128]	; (800391c <main+0x26c>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a1f      	ldr	r2, [pc, #124]	; (800391c <main+0x26c>)
 800389e:	6812      	ldr	r2, [r2, #0]
 80038a0:	68d2      	ldr	r2, [r2, #12]
 80038a2:	f042 0210 	orr.w	r2, r2, #16
 80038a6:	60da      	str	r2, [r3, #12]
  HAL_UART_Receive_DMA(&huart1, decoder.buffer, DECODE_BUFFER_SIZE);
 80038a8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80038ac:	3308      	adds	r3, #8
 80038ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80038b2:	4619      	mov	r1, r3
 80038b4:	4819      	ldr	r0, [pc, #100]	; (800391c <main+0x26c>)
 80038b6:	f7ff f8f4 	bl	8002aa2 <HAL_UART_Receive_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  get_new_data(&decoder);
 80038ba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80038be:	4618      	mov	r0, r3
 80038c0:	f000 f8cd 	bl	8003a5e <get_new_data>
	  ret = check_new_msg(&decoder, &packet);
 80038c4:	f107 0214 	add.w	r2, r7, #20
 80038c8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80038cc:	4611      	mov	r1, r2
 80038ce:	4618      	mov	r0, r3
 80038d0:	f000 f98e 	bl	8003bf0 <check_new_msg>
 80038d4:	4603      	mov	r3, r0
 80038d6:	f887 3363 	strb.w	r3, [r7, #867]	; 0x363
	  if(ret == RET_OK){
 80038da:	f897 3363 	ldrb.w	r3, [r7, #867]	; 0x363
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d1eb      	bne.n	80038ba <main+0x20a>
		  process_packet(&packet, motors);
 80038e2:	f8d7 2364 	ldr.w	r2, [r7, #868]	; 0x364
 80038e6:	f107 0314 	add.w	r3, r7, #20
 80038ea:	4611      	mov	r1, r2
 80038ec:	4618      	mov	r0, r3
 80038ee:	f000 fa0b 	bl	8003d08 <process_packet>
	  get_new_data(&decoder);
 80038f2:	e7e2      	b.n	80038ba <main+0x20a>
 80038f4:	2000002c 	.word	0x2000002c
 80038f8:	2000010c 	.word	0x2000010c
 80038fc:	2000019c 	.word	0x2000019c
 8003900:	200000c4 	.word	0x200000c4
 8003904:	20000034 	.word	0x20000034
 8003908:	2000007c 	.word	0x2000007c
 800390c:	20000154 	.word	0x20000154
 8003910:	20000030 	.word	0x20000030
 8003914:	00000000 	.word	0x00000000
 8003918:	42c80000 	.word	0x42c80000
 800391c:	20000244 	.word	0x20000244

08003920 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b094      	sub	sp, #80	; 0x50
 8003924:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003926:	f107 0320 	add.w	r3, r7, #32
 800392a:	2230      	movs	r2, #48	; 0x30
 800392c:	2100      	movs	r1, #0
 800392e:	4618      	mov	r0, r3
 8003930:	f001 f91d 	bl	8004b6e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003934:	f107 030c 	add.w	r3, r7, #12
 8003938:	2200      	movs	r2, #0
 800393a:	601a      	str	r2, [r3, #0]
 800393c:	605a      	str	r2, [r3, #4]
 800393e:	609a      	str	r2, [r3, #8]
 8003940:	60da      	str	r2, [r3, #12]
 8003942:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003944:	2300      	movs	r3, #0
 8003946:	60bb      	str	r3, [r7, #8]
 8003948:	4a27      	ldr	r2, [pc, #156]	; (80039e8 <SystemClock_Config+0xc8>)
 800394a:	4b27      	ldr	r3, [pc, #156]	; (80039e8 <SystemClock_Config+0xc8>)
 800394c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003952:	6413      	str	r3, [r2, #64]	; 0x40
 8003954:	4b24      	ldr	r3, [pc, #144]	; (80039e8 <SystemClock_Config+0xc8>)
 8003956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003958:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800395c:	60bb      	str	r3, [r7, #8]
 800395e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003960:	2300      	movs	r3, #0
 8003962:	607b      	str	r3, [r7, #4]
 8003964:	4a21      	ldr	r2, [pc, #132]	; (80039ec <SystemClock_Config+0xcc>)
 8003966:	4b21      	ldr	r3, [pc, #132]	; (80039ec <SystemClock_Config+0xcc>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800396e:	6013      	str	r3, [r2, #0]
 8003970:	4b1e      	ldr	r3, [pc, #120]	; (80039ec <SystemClock_Config+0xcc>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003978:	607b      	str	r3, [r7, #4]
 800397a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800397c:	2301      	movs	r3, #1
 800397e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003980:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003984:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003986:	2302      	movs	r3, #2
 8003988:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800398a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800398e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003990:	2304      	movs	r3, #4
 8003992:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8003994:	2364      	movs	r3, #100	; 0x64
 8003996:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003998:	2302      	movs	r3, #2
 800399a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800399c:	2304      	movs	r3, #4
 800399e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80039a0:	f107 0320 	add.w	r3, r7, #32
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7fd fc33 	bl	8001210 <HAL_RCC_OscConfig>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d001      	beq.n	80039b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80039b0:	f000 f81e 	bl	80039f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80039b4:	230f      	movs	r3, #15
 80039b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80039b8:	2302      	movs	r3, #2
 80039ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80039bc:	2300      	movs	r3, #0
 80039be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80039c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80039c6:	2300      	movs	r3, #0
 80039c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80039ca:	f107 030c 	add.w	r3, r7, #12
 80039ce:	2103      	movs	r1, #3
 80039d0:	4618      	mov	r0, r3
 80039d2:	f7fd fe95 	bl	8001700 <HAL_RCC_ClockConfig>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d001      	beq.n	80039e0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80039dc:	f000 f808 	bl	80039f0 <Error_Handler>
  }
}
 80039e0:	bf00      	nop
 80039e2:	3750      	adds	r7, #80	; 0x50
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	40023800 	.word	0x40023800
 80039ec:	40007000 	.word	0x40007000

080039f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80039f0:	b480      	push	{r7}
 80039f2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80039f4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80039f6:	e7fe      	b.n	80039f6 <Error_Handler+0x6>

080039f8 <decoder_initialise>:
#include "protocol.h"

void decoder_initialise(decoder_t *decoder, UART_HandleTypeDef *huart){
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
	decoder->buffer_length = 0;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f8a3 2170 	strh.w	r2, [r3, #368]	; 0x170
	decoder->huart = huart;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	683a      	ldr	r2, [r7, #0]
 8003a0e:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
	decoder->head = decoder->buffer;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f103 0208 	add.w	r2, r3, #8
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	601a      	str	r2, [r3, #0]
	decoder->tail = decoder->buffer;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f103 0208 	add.w	r2, r3, #8
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	605a      	str	r2, [r3, #4]
	decoder->input_msg_byte_count = 0;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f8a3 216c 	strh.w	r2, [r3, #364]	; 0x16c
	decoder->input_msg_str_current_count = 0;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f8a3 216e 	strh.w	r2, [r3, #366]	; 0x16e
	memset(decoder->buffer, 0, DECODE_BUFFER_SIZE);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	3308      	adds	r3, #8
 8003a3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a3e:	2100      	movs	r1, #0
 8003a40:	4618      	mov	r0, r3
 8003a42:	f001 f894 	bl	8004b6e <memset>
	memset(decoder->input_msg_buf, 0, 3 * MAX_PACKET_LENGTH);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003a4c:	2263      	movs	r2, #99	; 0x63
 8003a4e:	2100      	movs	r1, #0
 8003a50:	4618      	mov	r0, r3
 8003a52:	f001 f88c 	bl	8004b6e <memset>
}
 8003a56:	bf00      	nop
 8003a58:	3708      	adds	r7, #8
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}

08003a5e <get_new_data>:
//		decoder->buffer_length = 0;
//	}
//	return bool_status;
//}

retval_t get_new_data(decoder_t *decoder) {
 8003a5e:	b480      	push	{r7}
 8003a60:	b089      	sub	sp, #36	; 0x24
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
	decoder->head = decoder->buffer + DECODE_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(decoder->huart->hdmarx);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f103 0208 	add.w	r2, r3, #8
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8003a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8003a7c:	441a      	add	r2, r3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	601a      	str	r2, [r3, #0]
	if (decoder->head > decoder->tail) {
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d93e      	bls.n	8003b0c <get_new_data+0xae>
		uint32_t new_data = decoder->head - decoder->tail;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	461a      	mov	r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	617b      	str	r3, [r7, #20]
		if ((decoder->input_msg_byte_count + new_data) > DECODE_BUFFER_SIZE) {
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f8b3 316c 	ldrh.w	r3, [r3, #364]	; 0x16c
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	4413      	add	r3, r2
 8003aa8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003aac:	d905      	bls.n	8003aba <get_new_data+0x5c>
			decoder->input_msg_byte_count = 0;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f8a3 216c 	strh.w	r2, [r3, #364]	; 0x16c
			return RET_ERROR;	//COMMAND BUFFER OVERFLOW
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e094      	b.n	8003be4 <get_new_data+0x186>
		}
		for (int i = 0; i < new_data; i++) {
 8003aba:	2300      	movs	r3, #0
 8003abc:	61fb      	str	r3, [r7, #28]
 8003abe:	e012      	b.n	8003ae6 <get_new_data+0x88>
			decoder->input_msg_buf[i + decoder->input_msg_byte_count] = decoder->tail[i];
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f8b3 316c 	ldrh.w	r3, [r3, #364]	; 0x16c
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	4413      	add	r3, r2
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	6851      	ldr	r1, [r2, #4]
 8003ad0:	69fa      	ldr	r2, [r7, #28]
 8003ad2:	440a      	add	r2, r1
 8003ad4:	7811      	ldrb	r1, [r2, #0]
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	4413      	add	r3, r2
 8003ada:	460a      	mov	r2, r1
 8003adc:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
		for (int i = 0; i < new_data; i++) {
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	61fb      	str	r3, [r7, #28]
 8003ae6:	69fa      	ldr	r2, [r7, #28]
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d3e8      	bcc.n	8003ac0 <get_new_data+0x62>
		}
		decoder->input_msg_byte_count += new_data;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f8b3 216c 	ldrh.w	r2, [r3, #364]	; 0x16c
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	4413      	add	r3, r2
 8003afa:	b29a      	uxth	r2, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f8a3 216c 	strh.w	r2, [r3, #364]	; 0x16c
		decoder->tail = decoder->head;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	605a      	str	r2, [r3, #4]
 8003b0a:	e06a      	b.n	8003be2 <get_new_data+0x184>
	} else if (decoder->head < decoder->tail) {
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d264      	bcs.n	8003be2 <get_new_data+0x184>
		uint32_t diff_end = decoder->buffer + DECODE_BUFFER_SIZE - decoder->tail;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	3308      	adds	r3, #8
 8003b1c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003b20:	461a      	mov	r2, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	613b      	str	r3, [r7, #16]
		uint32_t diff_start = decoder->head - decoder->buffer;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	461a      	mov	r2, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	3308      	adds	r3, #8
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	60fb      	str	r3, [r7, #12]
		uint32_t new_data = diff_end + diff_start;
 8003b38:	693a      	ldr	r2, [r7, #16]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	4413      	add	r3, r2
 8003b3e:	60bb      	str	r3, [r7, #8]

		if ((decoder->input_msg_byte_count + new_data) > DECODE_BUFFER_SIZE) {
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f8b3 316c 	ldrh.w	r3, [r3, #364]	; 0x16c
 8003b46:	461a      	mov	r2, r3
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b50:	d909      	bls.n	8003b66 <get_new_data+0x108>
			decoder->input_msg_byte_count = 0;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f8a3 216c 	strh.w	r2, [r3, #364]	; 0x16c
			decoder->input_msg_str_current_count = 0;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f8a3 216e 	strh.w	r2, [r3, #366]	; 0x16e
			return RET_ERROR;	//COMMAND BUFFER OVERFLOW
 8003b62:	2301      	movs	r3, #1
 8003b64:	e03e      	b.n	8003be4 <get_new_data+0x186>
		}
		for (int i = 0; i < new_data; i++) {
 8003b66:	2300      	movs	r3, #0
 8003b68:	61bb      	str	r3, [r7, #24]
 8003b6a:	e028      	b.n	8003bbe <get_new_data+0x160>
			if (i < diff_end) {
 8003b6c:	69ba      	ldr	r2, [r7, #24]
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d210      	bcs.n	8003b96 <get_new_data+0x138>
				decoder->input_msg_buf[i + decoder->input_msg_byte_count] = decoder->tail[i];
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f8b3 316c 	ldrh.w	r3, [r3, #364]	; 0x16c
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	4413      	add	r3, r2
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	6851      	ldr	r1, [r2, #4]
 8003b84:	69ba      	ldr	r2, [r7, #24]
 8003b86:	440a      	add	r2, r1
 8003b88:	7811      	ldrb	r1, [r2, #0]
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	4413      	add	r3, r2
 8003b8e:	460a      	mov	r2, r1
 8003b90:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
 8003b94:	e010      	b.n	8003bb8 <get_new_data+0x15a>
			} else {
				decoder->input_msg_buf[i + decoder->input_msg_byte_count] = decoder->buffer[i - diff_end];
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f8b3 316c 	ldrh.w	r3, [r3, #364]	; 0x16c
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	69bb      	ldr	r3, [r7, #24]
 8003ba0:	4413      	add	r3, r2
 8003ba2:	69b9      	ldr	r1, [r7, #24]
 8003ba4:	693a      	ldr	r2, [r7, #16]
 8003ba6:	1a8a      	subs	r2, r1, r2
 8003ba8:	6879      	ldr	r1, [r7, #4]
 8003baa:	440a      	add	r2, r1
 8003bac:	7a11      	ldrb	r1, [r2, #8]
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	460a      	mov	r2, r1
 8003bb4:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
		for (int i = 0; i < new_data; i++) {
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	3301      	adds	r3, #1
 8003bbc:	61bb      	str	r3, [r7, #24]
 8003bbe:	69ba      	ldr	r2, [r7, #24]
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d3d2      	bcc.n	8003b6c <get_new_data+0x10e>
			}
		}
		decoder->input_msg_byte_count += new_data;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f8b3 216c 	ldrh.w	r2, [r3, #364]	; 0x16c
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	4413      	add	r3, r2
 8003bd2:	b29a      	uxth	r2, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f8a3 216c 	strh.w	r2, [r3, #364]	; 0x16c
		decoder->tail = decoder->head;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	605a      	str	r2, [r3, #4]
	}
	return RET_OK;
 8003be2:	2300      	movs	r3, #0
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3724      	adds	r7, #36	; 0x24
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <check_new_msg>:

retval_t check_new_msg(decoder_t *decoder, packet_t *packet) {
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b086      	sub	sp, #24
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
	for (int i = decoder->input_msg_str_current_count; i < decoder->input_msg_byte_count - HEADER_SIZE + 1; i++) {
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f8b3 316e 	ldrh.w	r3, [r3, #366]	; 0x16e
 8003c00:	617b      	str	r3, [r7, #20]
 8003c02:	e072      	b.n	8003cea <check_new_msg+0xfa>
		if ((decoder->input_msg_buf[i] == 0xFF) && (decoder->input_msg_buf[i + 1] == 0xFA)) {
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	4413      	add	r3, r2
 8003c0a:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	2bff      	cmp	r3, #255	; 0xff
 8003c12:	d15f      	bne.n	8003cd4 <check_new_msg+0xe4>
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	3301      	adds	r3, #1
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	4413      	add	r3, r2
 8003c1c:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8003c20:	2bfa      	cmp	r3, #250	; 0xfa
 8003c22:	d157      	bne.n	8003cd4 <check_new_msg+0xe4>
			uint8_t length = decoder->input_msg_buf[i+2];
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	3302      	adds	r3, #2
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	4413      	add	r3, r2
 8003c2c:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8003c30:	73fb      	strb	r3, [r7, #15]
			uint16_t msg_length = HEADER_SIZE + length;
 8003c32:	7bfb      	ldrb	r3, [r7, #15]
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	3304      	adds	r3, #4
 8003c38:	81bb      	strh	r3, [r7, #12]
			if (i + msg_length > decoder->input_msg_byte_count) {
 8003c3a:	89ba      	ldrh	r2, [r7, #12]
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	4413      	add	r3, r2
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	f8b2 216c 	ldrh.w	r2, [r2, #364]	; 0x16c
 8003c46:	4293      	cmp	r3, r2
 8003c48:	dc57      	bgt.n	8003cfa <check_new_msg+0x10a>
				break;
			}
			packet->length = length;
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	7bfa      	ldrb	r2, [r7, #15]
 8003c4e:	701a      	strb	r2, [r3, #0]
			packet->command = decoder->input_msg_buf[i+3];
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	3303      	adds	r3, #3
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	4413      	add	r3, r2
 8003c58:	f893 2108 	ldrb.w	r2, [r3, #264]	; 0x108
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	705a      	strb	r2, [r3, #1]
			memcpy(packet->data, &decoder->input_msg_buf[i+4], length * sizeof(uint8_t));
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	1c98      	adds	r0, r3, #2
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	3304      	adds	r3, #4
 8003c68:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	4413      	add	r3, r2
 8003c70:	7bfa      	ldrb	r2, [r7, #15]
 8003c72:	4619      	mov	r1, r3
 8003c74:	f000 ff70 	bl	8004b58 <memcpy>

			uint16_t extra_bytes = decoder->input_msg_byte_count - i - msg_length; //number of bytes after message
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f8b3 216c 	ldrh.w	r2, [r3, #364]	; 0x16c
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	b29a      	uxth	r2, r3
 8003c86:	89bb      	ldrh	r3, [r7, #12]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	817b      	strh	r3, [r7, #10]
			for (int j = 0; j < extra_bytes; j++) {	//Moves everything (if exists) after message detected to the beginning
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	613b      	str	r3, [r7, #16]
 8003c90:	e012      	b.n	8003cb8 <check_new_msg+0xc8>
				decoder->input_msg_buf[j] = decoder->input_msg_buf[i + j + msg_length];
 8003c92:	697a      	ldr	r2, [r7, #20]
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	441a      	add	r2, r3
 8003c98:	89bb      	ldrh	r3, [r7, #12]
 8003c9a:	4413      	add	r3, r2
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	4413      	add	r3, r2
 8003ca0:	f893 1108 	ldrb.w	r1, [r3, #264]	; 0x108
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	4413      	add	r3, r2
 8003caa:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003cae:	460a      	mov	r2, r1
 8003cb0:	701a      	strb	r2, [r3, #0]
			for (int j = 0; j < extra_bytes; j++) {	//Moves everything (if exists) after message detected to the beginning
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	613b      	str	r3, [r7, #16]
 8003cb8:	897a      	ldrh	r2, [r7, #10]
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	dce8      	bgt.n	8003c92 <check_new_msg+0xa2>
			}
			decoder->input_msg_str_current_count = 0;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f8a3 216e 	strh.w	r2, [r3, #366]	; 0x16e
			decoder->input_msg_byte_count = extra_bytes;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	897a      	ldrh	r2, [r7, #10]
 8003ccc:	f8a3 216c 	strh.w	r2, [r3, #364]	; 0x16c
			return RET_OK;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	e014      	b.n	8003cfe <check_new_msg+0x10e>
		} else {
			decoder->input_msg_str_current_count += HEADER_SIZE;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f8b3 316e 	ldrh.w	r3, [r3, #366]	; 0x16e
 8003cda:	3304      	adds	r3, #4
 8003cdc:	b29a      	uxth	r2, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f8a3 216e 	strh.w	r2, [r3, #366]	; 0x16e
	for (int i = decoder->input_msg_str_current_count; i < decoder->input_msg_byte_count - HEADER_SIZE + 1; i++) {
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	617b      	str	r3, [r7, #20]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f8b3 316c 	ldrh.w	r3, [r3, #364]	; 0x16c
 8003cf0:	1eda      	subs	r2, r3, #3
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	dc85      	bgt.n	8003c04 <check_new_msg+0x14>
 8003cf8:	e000      	b.n	8003cfc <check_new_msg+0x10c>
				break;
 8003cfa:	bf00      	nop
		}
	}
	return ERROR;
 8003cfc:	2301      	movs	r3, #1
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3718      	adds	r7, #24
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
	...

08003d08 <process_packet>:

void process_packet(packet_t *packet, motor_config_t *motors){
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b08c      	sub	sp, #48	; 0x30
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
	enum commands cmd = packet->command;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	785b      	ldrb	r3, [r3, #1]
 8003d16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	switch(cmd){
 8003d1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003d1e:	2b05      	cmp	r3, #5
 8003d20:	f200 80c4 	bhi.w	8003eac <process_packet+0x1a4>
 8003d24:	a201      	add	r2, pc, #4	; (adr r2, 8003d2c <process_packet+0x24>)
 8003d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d2a:	bf00      	nop
 8003d2c:	08003d45 	.word	0x08003d45
 8003d30:	08003ddb 	.word	0x08003ddb
 8003d34:	08003e15 	.word	0x08003e15
 8003d38:	08003e4f 	.word	0x08003e4f
 8003d3c:	08003e89 	.word	0x08003e89
 8003d40:	08003e93 	.word	0x08003e93
	case SET_MOTOR:{
		uint8_t n_motor = packet->data[0];
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	789b      	ldrb	r3, [r3, #2]
 8003d48:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		if(n_motor > num_motors){
 8003d4c:	4b59      	ldr	r3, [pc, #356]	; (8003eb4 <process_packet+0x1ac>)
 8003d4e:	781b      	ldrb	r3, [r3, #0]
 8003d50:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8003d54:	429a      	cmp	r2, r3
 8003d56:	f200 80a2 	bhi.w	8003e9e <process_packet+0x196>
			return;
		}
		float freq = buf_to_float(&packet->data[1]);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	3303      	adds	r3, #3
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f000 f8aa 	bl	8003eb8 <buf_to_float>
 8003d64:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
		float duty = buf_to_float(&packet->data[1+2*4]);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	330b      	adds	r3, #11
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f000 f8a3 	bl	8003eb8 <buf_to_float>
 8003d72:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
		float delay = buf_to_float(&packet->data[1+3*4]);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	330f      	adds	r3, #15
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f000 f89c 	bl	8003eb8 <buf_to_float>
 8003d80:	ed87 0a08 	vstr	s0, [r7, #32]
		motor_set_freq(&motors[n_motor], freq);
 8003d84:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8003d88:	4613      	mov	r3, r2
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	4413      	add	r3, r2
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	461a      	mov	r2, r3
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	4413      	add	r3, r2
 8003d96:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f7ff fac6 	bl	800332c <motor_set_freq>
		motor_set_duty(&motors[n_motor], duty);
 8003da0:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8003da4:	4613      	mov	r3, r2
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	4413      	add	r3, r2
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	461a      	mov	r2, r3
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	4413      	add	r3, r2
 8003db2:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8003db6:	4618      	mov	r0, r3
 8003db8:	f7ff fb24 	bl	8003404 <motor_set_duty>
		motor_set_delay_us(&motors[n_motor], delay);
 8003dbc:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	4413      	add	r3, r2
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	461a      	mov	r2, r3
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	4413      	add	r3, r2
 8003dce:	ed97 0a08 	vldr	s0, [r7, #32]
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f7ff fb40 	bl	8003458 <motor_set_delay_us>
		break;
 8003dd8:	e068      	b.n	8003eac <process_packet+0x1a4>
	}
	case SET_FREQ:{
		uint8_t n_motor = packet->data[0];
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	789b      	ldrb	r3, [r3, #2]
 8003dde:	77fb      	strb	r3, [r7, #31]
		if(n_motor > num_motors){
 8003de0:	4b34      	ldr	r3, [pc, #208]	; (8003eb4 <process_packet+0x1ac>)
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	7ffa      	ldrb	r2, [r7, #31]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d85b      	bhi.n	8003ea2 <process_packet+0x19a>
			return;
		}
		float freq = buf_to_float(&packet->data[1]);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	3303      	adds	r3, #3
 8003dee:	4618      	mov	r0, r3
 8003df0:	f000 f862 	bl	8003eb8 <buf_to_float>
 8003df4:	ed87 0a06 	vstr	s0, [r7, #24]
		motor_set_freq(&motors[n_motor], freq);
 8003df8:	7ffa      	ldrb	r2, [r7, #31]
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	4413      	add	r3, r2
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	461a      	mov	r2, r3
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	4413      	add	r3, r2
 8003e08:	ed97 0a06 	vldr	s0, [r7, #24]
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f7ff fa8d 	bl	800332c <motor_set_freq>
		break;
 8003e12:	e04b      	b.n	8003eac <process_packet+0x1a4>
	}
	case SET_DUTY:{
		uint8_t n_motor = packet->data[0];
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	789b      	ldrb	r3, [r3, #2]
 8003e18:	75fb      	strb	r3, [r7, #23]
		if(n_motor > num_motors){
 8003e1a:	4b26      	ldr	r3, [pc, #152]	; (8003eb4 <process_packet+0x1ac>)
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	7dfa      	ldrb	r2, [r7, #23]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d840      	bhi.n	8003ea6 <process_packet+0x19e>
			return;
		}
		float duty = buf_to_float(&packet->data[1]);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	3303      	adds	r3, #3
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f000 f845 	bl	8003eb8 <buf_to_float>
 8003e2e:	ed87 0a04 	vstr	s0, [r7, #16]
		motor_set_duty(&motors[n_motor], duty);
 8003e32:	7dfa      	ldrb	r2, [r7, #23]
 8003e34:	4613      	mov	r3, r2
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	4413      	add	r3, r2
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	4413      	add	r3, r2
 8003e42:	ed97 0a04 	vldr	s0, [r7, #16]
 8003e46:	4618      	mov	r0, r3
 8003e48:	f7ff fadc 	bl	8003404 <motor_set_duty>
		break;
 8003e4c:	e02e      	b.n	8003eac <process_packet+0x1a4>
	}
	case SET_DELAY:{
		uint8_t n_motor = packet->data[0];
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	789b      	ldrb	r3, [r3, #2]
 8003e52:	73fb      	strb	r3, [r7, #15]
		if(n_motor > num_motors){
 8003e54:	4b17      	ldr	r3, [pc, #92]	; (8003eb4 <process_packet+0x1ac>)
 8003e56:	781b      	ldrb	r3, [r3, #0]
 8003e58:	7bfa      	ldrb	r2, [r7, #15]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d825      	bhi.n	8003eaa <process_packet+0x1a2>
			return;
		}
		float delay = buf_to_float(&packet->data[1]);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	3303      	adds	r3, #3
 8003e62:	4618      	mov	r0, r3
 8003e64:	f000 f828 	bl	8003eb8 <buf_to_float>
 8003e68:	ed87 0a02 	vstr	s0, [r7, #8]
		motor_set_delay_us(&motors[n_motor], delay);
 8003e6c:	7bfa      	ldrb	r2, [r7, #15]
 8003e6e:	4613      	mov	r3, r2
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	4413      	add	r3, r2
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	461a      	mov	r2, r3
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	4413      	add	r3, r2
 8003e7c:	ed97 0a02 	vldr	s0, [r7, #8]
 8003e80:	4618      	mov	r0, r3
 8003e82:	f7ff fae9 	bl	8003458 <motor_set_delay_us>
		break;
 8003e86:	e011      	b.n	8003eac <process_packet+0x1a4>
	}
	case ACTIVATE_MOTORS:
		start_motors(motors, 6);
 8003e88:	2106      	movs	r1, #6
 8003e8a:	6838      	ldr	r0, [r7, #0]
 8003e8c:	f7ff fb28 	bl	80034e0 <start_motors>
		break;
 8003e90:	e00c      	b.n	8003eac <process_packet+0x1a4>
	case STOP_MOTORS:
		stop_motors(motors, 6);
 8003e92:	2106      	movs	r1, #6
 8003e94:	6838      	ldr	r0, [r7, #0]
 8003e96:	f7ff fb44 	bl	8003522 <stop_motors>
		break;
 8003e9a:	bf00      	nop
 8003e9c:	e006      	b.n	8003eac <process_packet+0x1a4>
			return;
 8003e9e:	bf00      	nop
 8003ea0:	e004      	b.n	8003eac <process_packet+0x1a4>
			return;
 8003ea2:	bf00      	nop
 8003ea4:	e002      	b.n	8003eac <process_packet+0x1a4>
			return;
 8003ea6:	bf00      	nop
 8003ea8:	e000      	b.n	8003eac <process_packet+0x1a4>
			return;
 8003eaa:	bf00      	nop
	}
}
 8003eac:	3730      	adds	r7, #48	; 0x30
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	20000030 	.word	0x20000030

08003eb8 <buf_to_float>:

float buf_to_float(uint8_t *buf){
 8003eb8:	b480      	push	{r7}
 8003eba:	b085      	sub	sp, #20
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
	float t;
	memcpy(&t, buf, sizeof(float));
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	60fb      	str	r3, [r7, #12]
	return t;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	ee07 3a90 	vmov	s15, r3
}
 8003ecc:	eeb0 0a67 	vmov.f32	s0, s15
 8003ed0:	3714      	adds	r7, #20
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr
	...

08003edc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	607b      	str	r3, [r7, #4]
 8003ee6:	4a10      	ldr	r2, [pc, #64]	; (8003f28 <HAL_MspInit+0x4c>)
 8003ee8:	4b0f      	ldr	r3, [pc, #60]	; (8003f28 <HAL_MspInit+0x4c>)
 8003eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ef0:	6453      	str	r3, [r2, #68]	; 0x44
 8003ef2:	4b0d      	ldr	r3, [pc, #52]	; (8003f28 <HAL_MspInit+0x4c>)
 8003ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ef6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003efa:	607b      	str	r3, [r7, #4]
 8003efc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003efe:	2300      	movs	r3, #0
 8003f00:	603b      	str	r3, [r7, #0]
 8003f02:	4a09      	ldr	r2, [pc, #36]	; (8003f28 <HAL_MspInit+0x4c>)
 8003f04:	4b08      	ldr	r3, [pc, #32]	; (8003f28 <HAL_MspInit+0x4c>)
 8003f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8003f0e:	4b06      	ldr	r3, [pc, #24]	; (8003f28 <HAL_MspInit+0x4c>)
 8003f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f16:	603b      	str	r3, [r7, #0]
 8003f18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f1a:	bf00      	nop
 8003f1c:	370c      	adds	r7, #12
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
 8003f28:	40023800 	.word	0x40023800

08003f2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003f30:	e7fe      	b.n	8003f30 <NMI_Handler+0x4>

08003f32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003f32:	b480      	push	{r7}
 8003f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003f36:	e7fe      	b.n	8003f36 <HardFault_Handler+0x4>

08003f38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003f3c:	e7fe      	b.n	8003f3c <MemManage_Handler+0x4>

08003f3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003f3e:	b480      	push	{r7}
 8003f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003f42:	e7fe      	b.n	8003f42 <BusFault_Handler+0x4>

08003f44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003f44:	b480      	push	{r7}
 8003f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003f48:	e7fe      	b.n	8003f48 <UsageFault_Handler+0x4>

08003f4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003f4a:	b480      	push	{r7}
 8003f4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003f4e:	bf00      	nop
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr

08003f58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003f5c:	bf00      	nop
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr

08003f66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003f66:	b480      	push	{r7}
 8003f68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003f6a:	bf00      	nop
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f78:	f7fc fb08 	bl	800058c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f7c:	bf00      	nop
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003f84:	4802      	ldr	r0, [pc, #8]	; (8003f90 <DMA2_Stream2_IRQHandler+0x10>)
 8003f86:	f7fc fd59 	bl	8000a3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8003f8a:	bf00      	nop
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	200001e4 	.word	0x200001e4

08003f94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003f94:	b480      	push	{r7}
 8003f96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003f98:	4a06      	ldr	r2, [pc, #24]	; (8003fb4 <SystemInit+0x20>)
 8003f9a:	4b06      	ldr	r3, [pc, #24]	; (8003fb4 <SystemInit+0x20>)
 8003f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fa0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003fa4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003fa8:	bf00      	nop
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	e000ed00 	.word	0xe000ed00

08003fb8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim9;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b096      	sub	sp, #88	; 0x58
 8003fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003fbe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	601a      	str	r2, [r3, #0]
 8003fc6:	605a      	str	r2, [r3, #4]
 8003fc8:	609a      	str	r2, [r3, #8]
 8003fca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003fcc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	601a      	str	r2, [r3, #0]
 8003fd4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003fd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003fda:	2200      	movs	r2, #0
 8003fdc:	601a      	str	r2, [r3, #0]
 8003fde:	605a      	str	r2, [r3, #4]
 8003fe0:	609a      	str	r2, [r3, #8]
 8003fe2:	60da      	str	r2, [r3, #12]
 8003fe4:	611a      	str	r2, [r3, #16]
 8003fe6:	615a      	str	r2, [r3, #20]
 8003fe8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003fea:	1d3b      	adds	r3, r7, #4
 8003fec:	2220      	movs	r2, #32
 8003fee:	2100      	movs	r1, #0
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f000 fdbc 	bl	8004b6e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003ff6:	4b3e      	ldr	r3, [pc, #248]	; (80040f0 <MX_TIM1_Init+0x138>)
 8003ff8:	4a3e      	ldr	r2, [pc, #248]	; (80040f4 <MX_TIM1_Init+0x13c>)
 8003ffa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003ffc:	4b3c      	ldr	r3, [pc, #240]	; (80040f0 <MX_TIM1_Init+0x138>)
 8003ffe:	2200      	movs	r2, #0
 8004000:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004002:	4b3b      	ldr	r3, [pc, #236]	; (80040f0 <MX_TIM1_Init+0x138>)
 8004004:	2200      	movs	r2, #0
 8004006:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8004008:	4b39      	ldr	r3, [pc, #228]	; (80040f0 <MX_TIM1_Init+0x138>)
 800400a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800400e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004010:	4b37      	ldr	r3, [pc, #220]	; (80040f0 <MX_TIM1_Init+0x138>)
 8004012:	2200      	movs	r2, #0
 8004014:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004016:	4b36      	ldr	r3, [pc, #216]	; (80040f0 <MX_TIM1_Init+0x138>)
 8004018:	2200      	movs	r2, #0
 800401a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800401c:	4b34      	ldr	r3, [pc, #208]	; (80040f0 <MX_TIM1_Init+0x138>)
 800401e:	2200      	movs	r2, #0
 8004020:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004022:	4833      	ldr	r0, [pc, #204]	; (80040f0 <MX_TIM1_Init+0x138>)
 8004024:	f7fd fd5e 	bl	8001ae4 <HAL_TIM_Base_Init>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d001      	beq.n	8004032 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800402e:	f7ff fcdf 	bl	80039f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004032:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004036:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004038:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800403c:	4619      	mov	r1, r3
 800403e:	482c      	ldr	r0, [pc, #176]	; (80040f0 <MX_TIM1_Init+0x138>)
 8004040:	f7fd ffce 	bl	8001fe0 <HAL_TIM_ConfigClockSource>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d001      	beq.n	800404e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800404a:	f7ff fcd1 	bl	80039f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800404e:	4828      	ldr	r0, [pc, #160]	; (80040f0 <MX_TIM1_Init+0x138>)
 8004050:	f7fd fd97 	bl	8001b82 <HAL_TIM_PWM_Init>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d001      	beq.n	800405e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800405a:	f7ff fcc9 	bl	80039f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 800405e:	2310      	movs	r3, #16
 8004060:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8004062:	2380      	movs	r3, #128	; 0x80
 8004064:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004066:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800406a:	4619      	mov	r1, r3
 800406c:	4820      	ldr	r0, [pc, #128]	; (80040f0 <MX_TIM1_Init+0x138>)
 800406e:	f7fe fc0b 	bl	8002888 <HAL_TIMEx_MasterConfigSynchronization>
 8004072:	4603      	mov	r3, r0
 8004074:	2b00      	cmp	r3, #0
 8004076:	d001      	beq.n	800407c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8004078:	f7ff fcba 	bl	80039f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800407c:	2360      	movs	r3, #96	; 0x60
 800407e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8004080:	2300      	movs	r3, #0
 8004082:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004084:	2300      	movs	r3, #0
 8004086:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004088:	2300      	movs	r3, #0
 800408a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800408c:	2300      	movs	r3, #0
 800408e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004090:	2300      	movs	r3, #0
 8004092:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004094:	2300      	movs	r3, #0
 8004096:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004098:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800409c:	2200      	movs	r2, #0
 800409e:	4619      	mov	r1, r3
 80040a0:	4813      	ldr	r0, [pc, #76]	; (80040f0 <MX_TIM1_Init+0x138>)
 80040a2:	f7fd fedb 	bl	8001e5c <HAL_TIM_PWM_ConfigChannel>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d001      	beq.n	80040b0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80040ac:	f7ff fca0 	bl	80039f0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80040b0:	2300      	movs	r3, #0
 80040b2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80040b4:	2300      	movs	r3, #0
 80040b6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80040b8:	2300      	movs	r3, #0
 80040ba:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80040bc:	2300      	movs	r3, #0
 80040be:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80040c0:	2300      	movs	r3, #0
 80040c2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80040c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80040c8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80040ca:	2300      	movs	r3, #0
 80040cc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80040ce:	1d3b      	adds	r3, r7, #4
 80040d0:	4619      	mov	r1, r3
 80040d2:	4807      	ldr	r0, [pc, #28]	; (80040f0 <MX_TIM1_Init+0x138>)
 80040d4:	f7fe fc46 	bl	8002964 <HAL_TIMEx_ConfigBreakDeadTime>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d001      	beq.n	80040e2 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80040de:	f7ff fc87 	bl	80039f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80040e2:	4803      	ldr	r0, [pc, #12]	; (80040f0 <MX_TIM1_Init+0x138>)
 80040e4:	f000 fb46 	bl	8004774 <HAL_TIM_MspPostInit>

}
 80040e8:	bf00      	nop
 80040ea:	3758      	adds	r7, #88	; 0x58
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	2000010c 	.word	0x2000010c
 80040f4:	40010000 	.word	0x40010000

080040f8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b092      	sub	sp, #72	; 0x48
 80040fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80040fe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004102:	2200      	movs	r2, #0
 8004104:	601a      	str	r2, [r3, #0]
 8004106:	605a      	str	r2, [r3, #4]
 8004108:	609a      	str	r2, [r3, #8]
 800410a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800410c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004110:	2200      	movs	r2, #0
 8004112:	601a      	str	r2, [r3, #0]
 8004114:	605a      	str	r2, [r3, #4]
 8004116:	609a      	str	r2, [r3, #8]
 8004118:	60da      	str	r2, [r3, #12]
 800411a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800411c:	f107 031c 	add.w	r3, r7, #28
 8004120:	2200      	movs	r2, #0
 8004122:	601a      	str	r2, [r3, #0]
 8004124:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004126:	463b      	mov	r3, r7
 8004128:	2200      	movs	r2, #0
 800412a:	601a      	str	r2, [r3, #0]
 800412c:	605a      	str	r2, [r3, #4]
 800412e:	609a      	str	r2, [r3, #8]
 8004130:	60da      	str	r2, [r3, #12]
 8004132:	611a      	str	r2, [r3, #16]
 8004134:	615a      	str	r2, [r3, #20]
 8004136:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004138:	4b34      	ldr	r3, [pc, #208]	; (800420c <MX_TIM2_Init+0x114>)
 800413a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800413e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004140:	4b32      	ldr	r3, [pc, #200]	; (800420c <MX_TIM2_Init+0x114>)
 8004142:	2200      	movs	r2, #0
 8004144:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004146:	4b31      	ldr	r3, [pc, #196]	; (800420c <MX_TIM2_Init+0x114>)
 8004148:	2200      	movs	r2, #0
 800414a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800414c:	4b2f      	ldr	r3, [pc, #188]	; (800420c <MX_TIM2_Init+0x114>)
 800414e:	f04f 32ff 	mov.w	r2, #4294967295
 8004152:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004154:	4b2d      	ldr	r3, [pc, #180]	; (800420c <MX_TIM2_Init+0x114>)
 8004156:	2200      	movs	r2, #0
 8004158:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800415a:	4b2c      	ldr	r3, [pc, #176]	; (800420c <MX_TIM2_Init+0x114>)
 800415c:	2200      	movs	r2, #0
 800415e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004160:	482a      	ldr	r0, [pc, #168]	; (800420c <MX_TIM2_Init+0x114>)
 8004162:	f7fd fcbf 	bl	8001ae4 <HAL_TIM_Base_Init>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d001      	beq.n	8004170 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800416c:	f7ff fc40 	bl	80039f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004170:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004174:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004176:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800417a:	4619      	mov	r1, r3
 800417c:	4823      	ldr	r0, [pc, #140]	; (800420c <MX_TIM2_Init+0x114>)
 800417e:	f7fd ff2f 	bl	8001fe0 <HAL_TIM_ConfigClockSource>
 8004182:	4603      	mov	r3, r0
 8004184:	2b00      	cmp	r3, #0
 8004186:	d001      	beq.n	800418c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8004188:	f7ff fc32 	bl	80039f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800418c:	481f      	ldr	r0, [pc, #124]	; (800420c <MX_TIM2_Init+0x114>)
 800418e:	f7fd fcf8 	bl	8001b82 <HAL_TIM_PWM_Init>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d001      	beq.n	800419c <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 8004198:	f7ff fc2a 	bl	80039f0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 800419c:	2306      	movs	r3, #6
 800419e:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80041a0:	2300      	movs	r3, #0
 80041a2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80041a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041a8:	4619      	mov	r1, r3
 80041aa:	4818      	ldr	r0, [pc, #96]	; (800420c <MX_TIM2_Init+0x114>)
 80041ac:	f7fd ffd4 	bl	8002158 <HAL_TIM_SlaveConfigSynchro>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d001      	beq.n	80041ba <MX_TIM2_Init+0xc2>
  {
    Error_Handler();
 80041b6:	f7ff fc1b 	bl	80039f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 80041ba:	2310      	movs	r3, #16
 80041bc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80041be:	2380      	movs	r3, #128	; 0x80
 80041c0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80041c2:	f107 031c 	add.w	r3, r7, #28
 80041c6:	4619      	mov	r1, r3
 80041c8:	4810      	ldr	r0, [pc, #64]	; (800420c <MX_TIM2_Init+0x114>)
 80041ca:	f7fe fb5d 	bl	8002888 <HAL_TIMEx_MasterConfigSynchronization>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d001      	beq.n	80041d8 <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 80041d4:	f7ff fc0c 	bl	80039f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80041d8:	2360      	movs	r3, #96	; 0x60
 80041da:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80041dc:	2300      	movs	r3, #0
 80041de:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80041e0:	2300      	movs	r3, #0
 80041e2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80041e4:	2300      	movs	r3, #0
 80041e6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80041e8:	463b      	mov	r3, r7
 80041ea:	2200      	movs	r2, #0
 80041ec:	4619      	mov	r1, r3
 80041ee:	4807      	ldr	r0, [pc, #28]	; (800420c <MX_TIM2_Init+0x114>)
 80041f0:	f7fd fe34 	bl	8001e5c <HAL_TIM_PWM_ConfigChannel>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d001      	beq.n	80041fe <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 80041fa:	f7ff fbf9 	bl	80039f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80041fe:	4803      	ldr	r0, [pc, #12]	; (800420c <MX_TIM2_Init+0x114>)
 8004200:	f000 fab8 	bl	8004774 <HAL_TIM_MspPostInit>

}
 8004204:	bf00      	nop
 8004206:	3748      	adds	r7, #72	; 0x48
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}
 800420c:	2000019c 	.word	0x2000019c

08004210 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b092      	sub	sp, #72	; 0x48
 8004214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004216:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800421a:	2200      	movs	r2, #0
 800421c:	601a      	str	r2, [r3, #0]
 800421e:	605a      	str	r2, [r3, #4]
 8004220:	609a      	str	r2, [r3, #8]
 8004222:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8004224:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004228:	2200      	movs	r2, #0
 800422a:	601a      	str	r2, [r3, #0]
 800422c:	605a      	str	r2, [r3, #4]
 800422e:	609a      	str	r2, [r3, #8]
 8004230:	60da      	str	r2, [r3, #12]
 8004232:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004234:	f107 031c 	add.w	r3, r7, #28
 8004238:	2200      	movs	r2, #0
 800423a:	601a      	str	r2, [r3, #0]
 800423c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800423e:	463b      	mov	r3, r7
 8004240:	2200      	movs	r2, #0
 8004242:	601a      	str	r2, [r3, #0]
 8004244:	605a      	str	r2, [r3, #4]
 8004246:	609a      	str	r2, [r3, #8]
 8004248:	60da      	str	r2, [r3, #12]
 800424a:	611a      	str	r2, [r3, #16]
 800424c:	615a      	str	r2, [r3, #20]
 800424e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004250:	4b34      	ldr	r3, [pc, #208]	; (8004324 <MX_TIM3_Init+0x114>)
 8004252:	4a35      	ldr	r2, [pc, #212]	; (8004328 <MX_TIM3_Init+0x118>)
 8004254:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004256:	4b33      	ldr	r3, [pc, #204]	; (8004324 <MX_TIM3_Init+0x114>)
 8004258:	2200      	movs	r2, #0
 800425a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800425c:	4b31      	ldr	r3, [pc, #196]	; (8004324 <MX_TIM3_Init+0x114>)
 800425e:	2200      	movs	r2, #0
 8004260:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004262:	4b30      	ldr	r3, [pc, #192]	; (8004324 <MX_TIM3_Init+0x114>)
 8004264:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004268:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800426a:	4b2e      	ldr	r3, [pc, #184]	; (8004324 <MX_TIM3_Init+0x114>)
 800426c:	2200      	movs	r2, #0
 800426e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004270:	4b2c      	ldr	r3, [pc, #176]	; (8004324 <MX_TIM3_Init+0x114>)
 8004272:	2200      	movs	r2, #0
 8004274:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004276:	482b      	ldr	r0, [pc, #172]	; (8004324 <MX_TIM3_Init+0x114>)
 8004278:	f7fd fc34 	bl	8001ae4 <HAL_TIM_Base_Init>
 800427c:	4603      	mov	r3, r0
 800427e:	2b00      	cmp	r3, #0
 8004280:	d001      	beq.n	8004286 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8004282:	f7ff fbb5 	bl	80039f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004286:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800428a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800428c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004290:	4619      	mov	r1, r3
 8004292:	4824      	ldr	r0, [pc, #144]	; (8004324 <MX_TIM3_Init+0x114>)
 8004294:	f7fd fea4 	bl	8001fe0 <HAL_TIM_ConfigClockSource>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d001      	beq.n	80042a2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800429e:	f7ff fba7 	bl	80039f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80042a2:	4820      	ldr	r0, [pc, #128]	; (8004324 <MX_TIM3_Init+0x114>)
 80042a4:	f7fd fc6d 	bl	8001b82 <HAL_TIM_PWM_Init>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d001      	beq.n	80042b2 <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 80042ae:	f7ff fb9f 	bl	80039f0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80042b2:	2306      	movs	r3, #6
 80042b4:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80042b6:	2300      	movs	r3, #0
 80042b8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80042ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042be:	4619      	mov	r1, r3
 80042c0:	4818      	ldr	r0, [pc, #96]	; (8004324 <MX_TIM3_Init+0x114>)
 80042c2:	f7fd ff49 	bl	8002158 <HAL_TIM_SlaveConfigSynchro>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d001      	beq.n	80042d0 <MX_TIM3_Init+0xc0>
  {
    Error_Handler();
 80042cc:	f7ff fb90 	bl	80039f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042d0:	2300      	movs	r3, #0
 80042d2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80042d4:	2300      	movs	r3, #0
 80042d6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80042d8:	f107 031c 	add.w	r3, r7, #28
 80042dc:	4619      	mov	r1, r3
 80042de:	4811      	ldr	r0, [pc, #68]	; (8004324 <MX_TIM3_Init+0x114>)
 80042e0:	f7fe fad2 	bl	8002888 <HAL_TIMEx_MasterConfigSynchronization>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d001      	beq.n	80042ee <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 80042ea:	f7ff fb81 	bl	80039f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80042ee:	2360      	movs	r3, #96	; 0x60
 80042f0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80042f2:	2300      	movs	r3, #0
 80042f4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80042f6:	2300      	movs	r3, #0
 80042f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80042fa:	2300      	movs	r3, #0
 80042fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80042fe:	463b      	mov	r3, r7
 8004300:	2200      	movs	r2, #0
 8004302:	4619      	mov	r1, r3
 8004304:	4807      	ldr	r0, [pc, #28]	; (8004324 <MX_TIM3_Init+0x114>)
 8004306:	f7fd fda9 	bl	8001e5c <HAL_TIM_PWM_ConfigChannel>
 800430a:	4603      	mov	r3, r0
 800430c:	2b00      	cmp	r3, #0
 800430e:	d001      	beq.n	8004314 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8004310:	f7ff fb6e 	bl	80039f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004314:	4803      	ldr	r0, [pc, #12]	; (8004324 <MX_TIM3_Init+0x114>)
 8004316:	f000 fa2d 	bl	8004774 <HAL_TIM_MspPostInit>

}
 800431a:	bf00      	nop
 800431c:	3748      	adds	r7, #72	; 0x48
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	200000c4 	.word	0x200000c4
 8004328:	40000400 	.word	0x40000400

0800432c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b092      	sub	sp, #72	; 0x48
 8004330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004332:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004336:	2200      	movs	r2, #0
 8004338:	601a      	str	r2, [r3, #0]
 800433a:	605a      	str	r2, [r3, #4]
 800433c:	609a      	str	r2, [r3, #8]
 800433e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8004340:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004344:	2200      	movs	r2, #0
 8004346:	601a      	str	r2, [r3, #0]
 8004348:	605a      	str	r2, [r3, #4]
 800434a:	609a      	str	r2, [r3, #8]
 800434c:	60da      	str	r2, [r3, #12]
 800434e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004350:	f107 031c 	add.w	r3, r7, #28
 8004354:	2200      	movs	r2, #0
 8004356:	601a      	str	r2, [r3, #0]
 8004358:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800435a:	463b      	mov	r3, r7
 800435c:	2200      	movs	r2, #0
 800435e:	601a      	str	r2, [r3, #0]
 8004360:	605a      	str	r2, [r3, #4]
 8004362:	609a      	str	r2, [r3, #8]
 8004364:	60da      	str	r2, [r3, #12]
 8004366:	611a      	str	r2, [r3, #16]
 8004368:	615a      	str	r2, [r3, #20]
 800436a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800436c:	4b34      	ldr	r3, [pc, #208]	; (8004440 <MX_TIM4_Init+0x114>)
 800436e:	4a35      	ldr	r2, [pc, #212]	; (8004444 <MX_TIM4_Init+0x118>)
 8004370:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8004372:	4b33      	ldr	r3, [pc, #204]	; (8004440 <MX_TIM4_Init+0x114>)
 8004374:	2200      	movs	r2, #0
 8004376:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004378:	4b31      	ldr	r3, [pc, #196]	; (8004440 <MX_TIM4_Init+0x114>)
 800437a:	2200      	movs	r2, #0
 800437c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800437e:	4b30      	ldr	r3, [pc, #192]	; (8004440 <MX_TIM4_Init+0x114>)
 8004380:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004384:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004386:	4b2e      	ldr	r3, [pc, #184]	; (8004440 <MX_TIM4_Init+0x114>)
 8004388:	2200      	movs	r2, #0
 800438a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800438c:	4b2c      	ldr	r3, [pc, #176]	; (8004440 <MX_TIM4_Init+0x114>)
 800438e:	2200      	movs	r2, #0
 8004390:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004392:	482b      	ldr	r0, [pc, #172]	; (8004440 <MX_TIM4_Init+0x114>)
 8004394:	f7fd fba6 	bl	8001ae4 <HAL_TIM_Base_Init>
 8004398:	4603      	mov	r3, r0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d001      	beq.n	80043a2 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800439e:	f7ff fb27 	bl	80039f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80043a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80043a6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80043a8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80043ac:	4619      	mov	r1, r3
 80043ae:	4824      	ldr	r0, [pc, #144]	; (8004440 <MX_TIM4_Init+0x114>)
 80043b0:	f7fd fe16 	bl	8001fe0 <HAL_TIM_ConfigClockSource>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d001      	beq.n	80043be <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80043ba:	f7ff fb19 	bl	80039f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80043be:	4820      	ldr	r0, [pc, #128]	; (8004440 <MX_TIM4_Init+0x114>)
 80043c0:	f7fd fbdf 	bl	8001b82 <HAL_TIM_PWM_Init>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d001      	beq.n	80043ce <MX_TIM4_Init+0xa2>
  {
    Error_Handler();
 80043ca:	f7ff fb11 	bl	80039f0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80043ce:	2306      	movs	r3, #6
 80043d0:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80043d2:	2300      	movs	r3, #0
 80043d4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 80043d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043da:	4619      	mov	r1, r3
 80043dc:	4818      	ldr	r0, [pc, #96]	; (8004440 <MX_TIM4_Init+0x114>)
 80043de:	f7fd febb 	bl	8002158 <HAL_TIM_SlaveConfigSynchro>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d001      	beq.n	80043ec <MX_TIM4_Init+0xc0>
  {
    Error_Handler();
 80043e8:	f7ff fb02 	bl	80039f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80043ec:	2300      	movs	r3, #0
 80043ee:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80043f0:	2300      	movs	r3, #0
 80043f2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80043f4:	f107 031c 	add.w	r3, r7, #28
 80043f8:	4619      	mov	r1, r3
 80043fa:	4811      	ldr	r0, [pc, #68]	; (8004440 <MX_TIM4_Init+0x114>)
 80043fc:	f7fe fa44 	bl	8002888 <HAL_TIMEx_MasterConfigSynchronization>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d001      	beq.n	800440a <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 8004406:	f7ff faf3 	bl	80039f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800440a:	2360      	movs	r3, #96	; 0x60
 800440c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800440e:	2300      	movs	r3, #0
 8004410:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004412:	2300      	movs	r3, #0
 8004414:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004416:	2300      	movs	r3, #0
 8004418:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800441a:	463b      	mov	r3, r7
 800441c:	2200      	movs	r2, #0
 800441e:	4619      	mov	r1, r3
 8004420:	4807      	ldr	r0, [pc, #28]	; (8004440 <MX_TIM4_Init+0x114>)
 8004422:	f7fd fd1b 	bl	8001e5c <HAL_TIM_PWM_ConfigChannel>
 8004426:	4603      	mov	r3, r0
 8004428:	2b00      	cmp	r3, #0
 800442a:	d001      	beq.n	8004430 <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 800442c:	f7ff fae0 	bl	80039f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8004430:	4803      	ldr	r0, [pc, #12]	; (8004440 <MX_TIM4_Init+0x114>)
 8004432:	f000 f99f 	bl	8004774 <HAL_TIM_MspPostInit>

}
 8004436:	bf00      	nop
 8004438:	3748      	adds	r7, #72	; 0x48
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	20000034 	.word	0x20000034
 8004444:	40000800 	.word	0x40000800

08004448 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b092      	sub	sp, #72	; 0x48
 800444c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800444e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004452:	2200      	movs	r2, #0
 8004454:	601a      	str	r2, [r3, #0]
 8004456:	605a      	str	r2, [r3, #4]
 8004458:	609a      	str	r2, [r3, #8]
 800445a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800445c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004460:	2200      	movs	r2, #0
 8004462:	601a      	str	r2, [r3, #0]
 8004464:	605a      	str	r2, [r3, #4]
 8004466:	609a      	str	r2, [r3, #8]
 8004468:	60da      	str	r2, [r3, #12]
 800446a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800446c:	f107 031c 	add.w	r3, r7, #28
 8004470:	2200      	movs	r2, #0
 8004472:	601a      	str	r2, [r3, #0]
 8004474:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004476:	463b      	mov	r3, r7
 8004478:	2200      	movs	r2, #0
 800447a:	601a      	str	r2, [r3, #0]
 800447c:	605a      	str	r2, [r3, #4]
 800447e:	609a      	str	r2, [r3, #8]
 8004480:	60da      	str	r2, [r3, #12]
 8004482:	611a      	str	r2, [r3, #16]
 8004484:	615a      	str	r2, [r3, #20]
 8004486:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8004488:	4b34      	ldr	r3, [pc, #208]	; (800455c <MX_TIM5_Init+0x114>)
 800448a:	4a35      	ldr	r2, [pc, #212]	; (8004560 <MX_TIM5_Init+0x118>)
 800448c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800448e:	4b33      	ldr	r3, [pc, #204]	; (800455c <MX_TIM5_Init+0x114>)
 8004490:	2200      	movs	r2, #0
 8004492:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004494:	4b31      	ldr	r3, [pc, #196]	; (800455c <MX_TIM5_Init+0x114>)
 8004496:	2200      	movs	r2, #0
 8004498:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800449a:	4b30      	ldr	r3, [pc, #192]	; (800455c <MX_TIM5_Init+0x114>)
 800449c:	f04f 32ff 	mov.w	r2, #4294967295
 80044a0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80044a2:	4b2e      	ldr	r3, [pc, #184]	; (800455c <MX_TIM5_Init+0x114>)
 80044a4:	2200      	movs	r2, #0
 80044a6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80044a8:	4b2c      	ldr	r3, [pc, #176]	; (800455c <MX_TIM5_Init+0x114>)
 80044aa:	2200      	movs	r2, #0
 80044ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80044ae:	482b      	ldr	r0, [pc, #172]	; (800455c <MX_TIM5_Init+0x114>)
 80044b0:	f7fd fb18 	bl	8001ae4 <HAL_TIM_Base_Init>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d001      	beq.n	80044be <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 80044ba:	f7ff fa99 	bl	80039f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80044be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044c2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80044c4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80044c8:	4619      	mov	r1, r3
 80044ca:	4824      	ldr	r0, [pc, #144]	; (800455c <MX_TIM5_Init+0x114>)
 80044cc:	f7fd fd88 	bl	8001fe0 <HAL_TIM_ConfigClockSource>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d001      	beq.n	80044da <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 80044d6:	f7ff fa8b 	bl	80039f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80044da:	4820      	ldr	r0, [pc, #128]	; (800455c <MX_TIM5_Init+0x114>)
 80044dc:	f7fd fb51 	bl	8001b82 <HAL_TIM_PWM_Init>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d001      	beq.n	80044ea <MX_TIM5_Init+0xa2>
  {
    Error_Handler();
 80044e6:	f7ff fa83 	bl	80039f0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80044ea:	2306      	movs	r3, #6
 80044ec:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80044ee:	2300      	movs	r3, #0
 80044f0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 80044f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044f6:	4619      	mov	r1, r3
 80044f8:	4818      	ldr	r0, [pc, #96]	; (800455c <MX_TIM5_Init+0x114>)
 80044fa:	f7fd fe2d 	bl	8002158 <HAL_TIM_SlaveConfigSynchro>
 80044fe:	4603      	mov	r3, r0
 8004500:	2b00      	cmp	r3, #0
 8004502:	d001      	beq.n	8004508 <MX_TIM5_Init+0xc0>
  {
    Error_Handler();
 8004504:	f7ff fa74 	bl	80039f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004508:	2300      	movs	r3, #0
 800450a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800450c:	2300      	movs	r3, #0
 800450e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004510:	f107 031c 	add.w	r3, r7, #28
 8004514:	4619      	mov	r1, r3
 8004516:	4811      	ldr	r0, [pc, #68]	; (800455c <MX_TIM5_Init+0x114>)
 8004518:	f7fe f9b6 	bl	8002888 <HAL_TIMEx_MasterConfigSynchronization>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d001      	beq.n	8004526 <MX_TIM5_Init+0xde>
  {
    Error_Handler();
 8004522:	f7ff fa65 	bl	80039f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004526:	2360      	movs	r3, #96	; 0x60
 8004528:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800452a:	2300      	movs	r3, #0
 800452c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800452e:	2300      	movs	r3, #0
 8004530:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004532:	2300      	movs	r3, #0
 8004534:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004536:	463b      	mov	r3, r7
 8004538:	2200      	movs	r2, #0
 800453a:	4619      	mov	r1, r3
 800453c:	4807      	ldr	r0, [pc, #28]	; (800455c <MX_TIM5_Init+0x114>)
 800453e:	f7fd fc8d 	bl	8001e5c <HAL_TIM_PWM_ConfigChannel>
 8004542:	4603      	mov	r3, r0
 8004544:	2b00      	cmp	r3, #0
 8004546:	d001      	beq.n	800454c <MX_TIM5_Init+0x104>
  {
    Error_Handler();
 8004548:	f7ff fa52 	bl	80039f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800454c:	4803      	ldr	r0, [pc, #12]	; (800455c <MX_TIM5_Init+0x114>)
 800454e:	f000 f911 	bl	8004774 <HAL_TIM_MspPostInit>

}
 8004552:	bf00      	nop
 8004554:	3748      	adds	r7, #72	; 0x48
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop
 800455c:	2000007c 	.word	0x2000007c
 8004560:	40000c00 	.word	0x40000c00

08004564 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b090      	sub	sp, #64	; 0x40
 8004568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800456a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800456e:	2200      	movs	r2, #0
 8004570:	601a      	str	r2, [r3, #0]
 8004572:	605a      	str	r2, [r3, #4]
 8004574:	609a      	str	r2, [r3, #8]
 8004576:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8004578:	f107 031c 	add.w	r3, r7, #28
 800457c:	2200      	movs	r2, #0
 800457e:	601a      	str	r2, [r3, #0]
 8004580:	605a      	str	r2, [r3, #4]
 8004582:	609a      	str	r2, [r3, #8]
 8004584:	60da      	str	r2, [r3, #12]
 8004586:	611a      	str	r2, [r3, #16]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004588:	463b      	mov	r3, r7
 800458a:	2200      	movs	r2, #0
 800458c:	601a      	str	r2, [r3, #0]
 800458e:	605a      	str	r2, [r3, #4]
 8004590:	609a      	str	r2, [r3, #8]
 8004592:	60da      	str	r2, [r3, #12]
 8004594:	611a      	str	r2, [r3, #16]
 8004596:	615a      	str	r2, [r3, #20]
 8004598:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800459a:	4b2d      	ldr	r3, [pc, #180]	; (8004650 <MX_TIM9_Init+0xec>)
 800459c:	4a2d      	ldr	r2, [pc, #180]	; (8004654 <MX_TIM9_Init+0xf0>)
 800459e:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 80045a0:	4b2b      	ldr	r3, [pc, #172]	; (8004650 <MX_TIM9_Init+0xec>)
 80045a2:	2200      	movs	r2, #0
 80045a4:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045a6:	4b2a      	ldr	r3, [pc, #168]	; (8004650 <MX_TIM9_Init+0xec>)
 80045a8:	2200      	movs	r2, #0
 80045aa:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 80045ac:	4b28      	ldr	r3, [pc, #160]	; (8004650 <MX_TIM9_Init+0xec>)
 80045ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80045b2:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80045b4:	4b26      	ldr	r3, [pc, #152]	; (8004650 <MX_TIM9_Init+0xec>)
 80045b6:	2200      	movs	r2, #0
 80045b8:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80045ba:	4b25      	ldr	r3, [pc, #148]	; (8004650 <MX_TIM9_Init+0xec>)
 80045bc:	2200      	movs	r2, #0
 80045be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80045c0:	4823      	ldr	r0, [pc, #140]	; (8004650 <MX_TIM9_Init+0xec>)
 80045c2:	f7fd fa8f 	bl	8001ae4 <HAL_TIM_Base_Init>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d001      	beq.n	80045d0 <MX_TIM9_Init+0x6c>
  {
    Error_Handler();
 80045cc:	f7ff fa10 	bl	80039f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80045d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80045d4:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80045d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80045da:	4619      	mov	r1, r3
 80045dc:	481c      	ldr	r0, [pc, #112]	; (8004650 <MX_TIM9_Init+0xec>)
 80045de:	f7fd fcff 	bl	8001fe0 <HAL_TIM_ConfigClockSource>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d001      	beq.n	80045ec <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 80045e8:	f7ff fa02 	bl	80039f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 80045ec:	4818      	ldr	r0, [pc, #96]	; (8004650 <MX_TIM9_Init+0xec>)
 80045ee:	f7fd fac8 	bl	8001b82 <HAL_TIM_PWM_Init>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d001      	beq.n	80045fc <MX_TIM9_Init+0x98>
  {
    Error_Handler();
 80045f8:	f7ff f9fa 	bl	80039f0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80045fc:	2306      	movs	r3, #6
 80045fe:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8004600:	2300      	movs	r3, #0
 8004602:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_SlaveConfigSynchro(&htim9, &sSlaveConfig) != HAL_OK)
 8004604:	f107 031c 	add.w	r3, r7, #28
 8004608:	4619      	mov	r1, r3
 800460a:	4811      	ldr	r0, [pc, #68]	; (8004650 <MX_TIM9_Init+0xec>)
 800460c:	f7fd fda4 	bl	8002158 <HAL_TIM_SlaveConfigSynchro>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d001      	beq.n	800461a <MX_TIM9_Init+0xb6>
  {
    Error_Handler();
 8004616:	f7ff f9eb 	bl	80039f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800461a:	2360      	movs	r3, #96	; 0x60
 800461c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800461e:	2300      	movs	r3, #0
 8004620:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004622:	2300      	movs	r3, #0
 8004624:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004626:	2300      	movs	r3, #0
 8004628:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800462a:	463b      	mov	r3, r7
 800462c:	2200      	movs	r2, #0
 800462e:	4619      	mov	r1, r3
 8004630:	4807      	ldr	r0, [pc, #28]	; (8004650 <MX_TIM9_Init+0xec>)
 8004632:	f7fd fc13 	bl	8001e5c <HAL_TIM_PWM_ConfigChannel>
 8004636:	4603      	mov	r3, r0
 8004638:	2b00      	cmp	r3, #0
 800463a:	d001      	beq.n	8004640 <MX_TIM9_Init+0xdc>
  {
    Error_Handler();
 800463c:	f7ff f9d8 	bl	80039f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8004640:	4803      	ldr	r0, [pc, #12]	; (8004650 <MX_TIM9_Init+0xec>)
 8004642:	f000 f897 	bl	8004774 <HAL_TIM_MspPostInit>

}
 8004646:	bf00      	nop
 8004648:	3740      	adds	r7, #64	; 0x40
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	20000154 	.word	0x20000154
 8004654:	40014000 	.word	0x40014000

08004658 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004658:	b480      	push	{r7}
 800465a:	b089      	sub	sp, #36	; 0x24
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a3d      	ldr	r2, [pc, #244]	; (800475c <HAL_TIM_Base_MspInit+0x104>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d10e      	bne.n	8004688 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800466a:	2300      	movs	r3, #0
 800466c:	61fb      	str	r3, [r7, #28]
 800466e:	4a3c      	ldr	r2, [pc, #240]	; (8004760 <HAL_TIM_Base_MspInit+0x108>)
 8004670:	4b3b      	ldr	r3, [pc, #236]	; (8004760 <HAL_TIM_Base_MspInit+0x108>)
 8004672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004674:	f043 0301 	orr.w	r3, r3, #1
 8004678:	6453      	str	r3, [r2, #68]	; 0x44
 800467a:	4b39      	ldr	r3, [pc, #228]	; (8004760 <HAL_TIM_Base_MspInit+0x108>)
 800467c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800467e:	f003 0301 	and.w	r3, r3, #1
 8004682:	61fb      	str	r3, [r7, #28]
 8004684:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM9_CLK_ENABLE();
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8004686:	e062      	b.n	800474e <HAL_TIM_Base_MspInit+0xf6>
  else if(tim_baseHandle->Instance==TIM2)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004690:	d10e      	bne.n	80046b0 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004692:	2300      	movs	r3, #0
 8004694:	61bb      	str	r3, [r7, #24]
 8004696:	4a32      	ldr	r2, [pc, #200]	; (8004760 <HAL_TIM_Base_MspInit+0x108>)
 8004698:	4b31      	ldr	r3, [pc, #196]	; (8004760 <HAL_TIM_Base_MspInit+0x108>)
 800469a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469c:	f043 0301 	orr.w	r3, r3, #1
 80046a0:	6413      	str	r3, [r2, #64]	; 0x40
 80046a2:	4b2f      	ldr	r3, [pc, #188]	; (8004760 <HAL_TIM_Base_MspInit+0x108>)
 80046a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a6:	f003 0301 	and.w	r3, r3, #1
 80046aa:	61bb      	str	r3, [r7, #24]
 80046ac:	69bb      	ldr	r3, [r7, #24]
}
 80046ae:	e04e      	b.n	800474e <HAL_TIM_Base_MspInit+0xf6>
  else if(tim_baseHandle->Instance==TIM3)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a2b      	ldr	r2, [pc, #172]	; (8004764 <HAL_TIM_Base_MspInit+0x10c>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d10e      	bne.n	80046d8 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80046ba:	2300      	movs	r3, #0
 80046bc:	617b      	str	r3, [r7, #20]
 80046be:	4a28      	ldr	r2, [pc, #160]	; (8004760 <HAL_TIM_Base_MspInit+0x108>)
 80046c0:	4b27      	ldr	r3, [pc, #156]	; (8004760 <HAL_TIM_Base_MspInit+0x108>)
 80046c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c4:	f043 0302 	orr.w	r3, r3, #2
 80046c8:	6413      	str	r3, [r2, #64]	; 0x40
 80046ca:	4b25      	ldr	r3, [pc, #148]	; (8004760 <HAL_TIM_Base_MspInit+0x108>)
 80046cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ce:	f003 0302 	and.w	r3, r3, #2
 80046d2:	617b      	str	r3, [r7, #20]
 80046d4:	697b      	ldr	r3, [r7, #20]
}
 80046d6:	e03a      	b.n	800474e <HAL_TIM_Base_MspInit+0xf6>
  else if(tim_baseHandle->Instance==TIM4)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a22      	ldr	r2, [pc, #136]	; (8004768 <HAL_TIM_Base_MspInit+0x110>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d10e      	bne.n	8004700 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80046e2:	2300      	movs	r3, #0
 80046e4:	613b      	str	r3, [r7, #16]
 80046e6:	4a1e      	ldr	r2, [pc, #120]	; (8004760 <HAL_TIM_Base_MspInit+0x108>)
 80046e8:	4b1d      	ldr	r3, [pc, #116]	; (8004760 <HAL_TIM_Base_MspInit+0x108>)
 80046ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ec:	f043 0304 	orr.w	r3, r3, #4
 80046f0:	6413      	str	r3, [r2, #64]	; 0x40
 80046f2:	4b1b      	ldr	r3, [pc, #108]	; (8004760 <HAL_TIM_Base_MspInit+0x108>)
 80046f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f6:	f003 0304 	and.w	r3, r3, #4
 80046fa:	613b      	str	r3, [r7, #16]
 80046fc:	693b      	ldr	r3, [r7, #16]
}
 80046fe:	e026      	b.n	800474e <HAL_TIM_Base_MspInit+0xf6>
  else if(tim_baseHandle->Instance==TIM5)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a19      	ldr	r2, [pc, #100]	; (800476c <HAL_TIM_Base_MspInit+0x114>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d10e      	bne.n	8004728 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800470a:	2300      	movs	r3, #0
 800470c:	60fb      	str	r3, [r7, #12]
 800470e:	4a14      	ldr	r2, [pc, #80]	; (8004760 <HAL_TIM_Base_MspInit+0x108>)
 8004710:	4b13      	ldr	r3, [pc, #76]	; (8004760 <HAL_TIM_Base_MspInit+0x108>)
 8004712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004714:	f043 0308 	orr.w	r3, r3, #8
 8004718:	6413      	str	r3, [r2, #64]	; 0x40
 800471a:	4b11      	ldr	r3, [pc, #68]	; (8004760 <HAL_TIM_Base_MspInit+0x108>)
 800471c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471e:	f003 0308 	and.w	r3, r3, #8
 8004722:	60fb      	str	r3, [r7, #12]
 8004724:	68fb      	ldr	r3, [r7, #12]
}
 8004726:	e012      	b.n	800474e <HAL_TIM_Base_MspInit+0xf6>
  else if(tim_baseHandle->Instance==TIM9)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a10      	ldr	r2, [pc, #64]	; (8004770 <HAL_TIM_Base_MspInit+0x118>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d10d      	bne.n	800474e <HAL_TIM_Base_MspInit+0xf6>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8004732:	2300      	movs	r3, #0
 8004734:	60bb      	str	r3, [r7, #8]
 8004736:	4a0a      	ldr	r2, [pc, #40]	; (8004760 <HAL_TIM_Base_MspInit+0x108>)
 8004738:	4b09      	ldr	r3, [pc, #36]	; (8004760 <HAL_TIM_Base_MspInit+0x108>)
 800473a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800473c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004740:	6453      	str	r3, [r2, #68]	; 0x44
 8004742:	4b07      	ldr	r3, [pc, #28]	; (8004760 <HAL_TIM_Base_MspInit+0x108>)
 8004744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004746:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800474a:	60bb      	str	r3, [r7, #8]
 800474c:	68bb      	ldr	r3, [r7, #8]
}
 800474e:	bf00      	nop
 8004750:	3724      	adds	r7, #36	; 0x24
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr
 800475a:	bf00      	nop
 800475c:	40010000 	.word	0x40010000
 8004760:	40023800 	.word	0x40023800
 8004764:	40000400 	.word	0x40000400
 8004768:	40000800 	.word	0x40000800
 800476c:	40000c00 	.word	0x40000c00
 8004770:	40014000 	.word	0x40014000

08004774 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b08e      	sub	sp, #56	; 0x38
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800477c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004780:	2200      	movs	r2, #0
 8004782:	601a      	str	r2, [r3, #0]
 8004784:	605a      	str	r2, [r3, #4]
 8004786:	609a      	str	r2, [r3, #8]
 8004788:	60da      	str	r2, [r3, #12]
 800478a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a6d      	ldr	r2, [pc, #436]	; (8004948 <HAL_TIM_MspPostInit+0x1d4>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d11f      	bne.n	80047d6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004796:	2300      	movs	r3, #0
 8004798:	623b      	str	r3, [r7, #32]
 800479a:	4a6c      	ldr	r2, [pc, #432]	; (800494c <HAL_TIM_MspPostInit+0x1d8>)
 800479c:	4b6b      	ldr	r3, [pc, #428]	; (800494c <HAL_TIM_MspPostInit+0x1d8>)
 800479e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a0:	f043 0310 	orr.w	r3, r3, #16
 80047a4:	6313      	str	r3, [r2, #48]	; 0x30
 80047a6:	4b69      	ldr	r3, [pc, #420]	; (800494c <HAL_TIM_MspPostInit+0x1d8>)
 80047a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047aa:	f003 0310 	and.w	r3, r3, #16
 80047ae:	623b      	str	r3, [r7, #32]
 80047b0:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80047b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80047b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047b8:	2302      	movs	r3, #2
 80047ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047bc:	2300      	movs	r3, #0
 80047be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047c0:	2300      	movs	r3, #0
 80047c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80047c4:	2301      	movs	r3, #1
 80047c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80047c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047cc:	4619      	mov	r1, r3
 80047ce:	4860      	ldr	r0, [pc, #384]	; (8004950 <HAL_TIM_MspPostInit+0x1dc>)
 80047d0:	f7fc fb9c 	bl	8000f0c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 80047d4:	e0b4      	b.n	8004940 <HAL_TIM_MspPostInit+0x1cc>
  else if(timHandle->Instance==TIM2)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047de:	d11f      	bne.n	8004820 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047e0:	2300      	movs	r3, #0
 80047e2:	61fb      	str	r3, [r7, #28]
 80047e4:	4a59      	ldr	r2, [pc, #356]	; (800494c <HAL_TIM_MspPostInit+0x1d8>)
 80047e6:	4b59      	ldr	r3, [pc, #356]	; (800494c <HAL_TIM_MspPostInit+0x1d8>)
 80047e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ea:	f043 0301 	orr.w	r3, r3, #1
 80047ee:	6313      	str	r3, [r2, #48]	; 0x30
 80047f0:	4b56      	ldr	r3, [pc, #344]	; (800494c <HAL_TIM_MspPostInit+0x1d8>)
 80047f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f4:	f003 0301 	and.w	r3, r3, #1
 80047f8:	61fb      	str	r3, [r7, #28]
 80047fa:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80047fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004800:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004802:	2302      	movs	r3, #2
 8004804:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004806:	2300      	movs	r3, #0
 8004808:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800480a:	2300      	movs	r3, #0
 800480c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800480e:	2301      	movs	r3, #1
 8004810:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004812:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004816:	4619      	mov	r1, r3
 8004818:	484e      	ldr	r0, [pc, #312]	; (8004954 <HAL_TIM_MspPostInit+0x1e0>)
 800481a:	f7fc fb77 	bl	8000f0c <HAL_GPIO_Init>
}
 800481e:	e08f      	b.n	8004940 <HAL_TIM_MspPostInit+0x1cc>
  else if(timHandle->Instance==TIM3)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a4c      	ldr	r2, [pc, #304]	; (8004958 <HAL_TIM_MspPostInit+0x1e4>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d11e      	bne.n	8004868 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800482a:	2300      	movs	r3, #0
 800482c:	61bb      	str	r3, [r7, #24]
 800482e:	4a47      	ldr	r2, [pc, #284]	; (800494c <HAL_TIM_MspPostInit+0x1d8>)
 8004830:	4b46      	ldr	r3, [pc, #280]	; (800494c <HAL_TIM_MspPostInit+0x1d8>)
 8004832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004834:	f043 0304 	orr.w	r3, r3, #4
 8004838:	6313      	str	r3, [r2, #48]	; 0x30
 800483a:	4b44      	ldr	r3, [pc, #272]	; (800494c <HAL_TIM_MspPostInit+0x1d8>)
 800483c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800483e:	f003 0304 	and.w	r3, r3, #4
 8004842:	61bb      	str	r3, [r7, #24]
 8004844:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004846:	2340      	movs	r3, #64	; 0x40
 8004848:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800484a:	2302      	movs	r3, #2
 800484c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800484e:	2300      	movs	r3, #0
 8004850:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004852:	2300      	movs	r3, #0
 8004854:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004856:	2302      	movs	r3, #2
 8004858:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800485a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800485e:	4619      	mov	r1, r3
 8004860:	483e      	ldr	r0, [pc, #248]	; (800495c <HAL_TIM_MspPostInit+0x1e8>)
 8004862:	f7fc fb53 	bl	8000f0c <HAL_GPIO_Init>
}
 8004866:	e06b      	b.n	8004940 <HAL_TIM_MspPostInit+0x1cc>
  else if(timHandle->Instance==TIM4)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a3c      	ldr	r2, [pc, #240]	; (8004960 <HAL_TIM_MspPostInit+0x1ec>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d11f      	bne.n	80048b2 <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004872:	2300      	movs	r3, #0
 8004874:	617b      	str	r3, [r7, #20]
 8004876:	4a35      	ldr	r2, [pc, #212]	; (800494c <HAL_TIM_MspPostInit+0x1d8>)
 8004878:	4b34      	ldr	r3, [pc, #208]	; (800494c <HAL_TIM_MspPostInit+0x1d8>)
 800487a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800487c:	f043 0308 	orr.w	r3, r3, #8
 8004880:	6313      	str	r3, [r2, #48]	; 0x30
 8004882:	4b32      	ldr	r3, [pc, #200]	; (800494c <HAL_TIM_MspPostInit+0x1d8>)
 8004884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004886:	f003 0308 	and.w	r3, r3, #8
 800488a:	617b      	str	r3, [r7, #20]
 800488c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800488e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004892:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004894:	2302      	movs	r3, #2
 8004896:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004898:	2300      	movs	r3, #0
 800489a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800489c:	2300      	movs	r3, #0
 800489e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80048a0:	2302      	movs	r3, #2
 80048a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80048a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80048a8:	4619      	mov	r1, r3
 80048aa:	482e      	ldr	r0, [pc, #184]	; (8004964 <HAL_TIM_MspPostInit+0x1f0>)
 80048ac:	f7fc fb2e 	bl	8000f0c <HAL_GPIO_Init>
}
 80048b0:	e046      	b.n	8004940 <HAL_TIM_MspPostInit+0x1cc>
  else if(timHandle->Instance==TIM5)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a2c      	ldr	r2, [pc, #176]	; (8004968 <HAL_TIM_MspPostInit+0x1f4>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d11e      	bne.n	80048fa <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048bc:	2300      	movs	r3, #0
 80048be:	613b      	str	r3, [r7, #16]
 80048c0:	4a22      	ldr	r2, [pc, #136]	; (800494c <HAL_TIM_MspPostInit+0x1d8>)
 80048c2:	4b22      	ldr	r3, [pc, #136]	; (800494c <HAL_TIM_MspPostInit+0x1d8>)
 80048c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c6:	f043 0301 	orr.w	r3, r3, #1
 80048ca:	6313      	str	r3, [r2, #48]	; 0x30
 80048cc:	4b1f      	ldr	r3, [pc, #124]	; (800494c <HAL_TIM_MspPostInit+0x1d8>)
 80048ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d0:	f003 0301 	and.w	r3, r3, #1
 80048d4:	613b      	str	r3, [r7, #16]
 80048d6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80048d8:	2301      	movs	r3, #1
 80048da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048dc:	2302      	movs	r3, #2
 80048de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048e0:	2300      	movs	r3, #0
 80048e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048e4:	2300      	movs	r3, #0
 80048e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80048e8:	2302      	movs	r3, #2
 80048ea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80048f0:	4619      	mov	r1, r3
 80048f2:	4818      	ldr	r0, [pc, #96]	; (8004954 <HAL_TIM_MspPostInit+0x1e0>)
 80048f4:	f7fc fb0a 	bl	8000f0c <HAL_GPIO_Init>
}
 80048f8:	e022      	b.n	8004940 <HAL_TIM_MspPostInit+0x1cc>
  else if(timHandle->Instance==TIM9)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a1b      	ldr	r2, [pc, #108]	; (800496c <HAL_TIM_MspPostInit+0x1f8>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d11d      	bne.n	8004940 <HAL_TIM_MspPostInit+0x1cc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004904:	2300      	movs	r3, #0
 8004906:	60fb      	str	r3, [r7, #12]
 8004908:	4a10      	ldr	r2, [pc, #64]	; (800494c <HAL_TIM_MspPostInit+0x1d8>)
 800490a:	4b10      	ldr	r3, [pc, #64]	; (800494c <HAL_TIM_MspPostInit+0x1d8>)
 800490c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490e:	f043 0301 	orr.w	r3, r3, #1
 8004912:	6313      	str	r3, [r2, #48]	; 0x30
 8004914:	4b0d      	ldr	r3, [pc, #52]	; (800494c <HAL_TIM_MspPostInit+0x1d8>)
 8004916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004918:	f003 0301 	and.w	r3, r3, #1
 800491c:	60fb      	str	r3, [r7, #12]
 800491e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004920:	2304      	movs	r3, #4
 8004922:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004924:	2302      	movs	r3, #2
 8004926:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004928:	2300      	movs	r3, #0
 800492a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800492c:	2300      	movs	r3, #0
 800492e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8004930:	2303      	movs	r3, #3
 8004932:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004934:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004938:	4619      	mov	r1, r3
 800493a:	4806      	ldr	r0, [pc, #24]	; (8004954 <HAL_TIM_MspPostInit+0x1e0>)
 800493c:	f7fc fae6 	bl	8000f0c <HAL_GPIO_Init>
}
 8004940:	bf00      	nop
 8004942:	3738      	adds	r7, #56	; 0x38
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}
 8004948:	40010000 	.word	0x40010000
 800494c:	40023800 	.word	0x40023800
 8004950:	40021000 	.word	0x40021000
 8004954:	40020000 	.word	0x40020000
 8004958:	40000400 	.word	0x40000400
 800495c:	40020800 	.word	0x40020800
 8004960:	40000800 	.word	0x40000800
 8004964:	40020c00 	.word	0x40020c00
 8004968:	40000c00 	.word	0x40000c00
 800496c:	40014000 	.word	0x40014000

08004970 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004974:	4b11      	ldr	r3, [pc, #68]	; (80049bc <MX_USART1_UART_Init+0x4c>)
 8004976:	4a12      	ldr	r2, [pc, #72]	; (80049c0 <MX_USART1_UART_Init+0x50>)
 8004978:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800497a:	4b10      	ldr	r3, [pc, #64]	; (80049bc <MX_USART1_UART_Init+0x4c>)
 800497c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004980:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004982:	4b0e      	ldr	r3, [pc, #56]	; (80049bc <MX_USART1_UART_Init+0x4c>)
 8004984:	2200      	movs	r2, #0
 8004986:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004988:	4b0c      	ldr	r3, [pc, #48]	; (80049bc <MX_USART1_UART_Init+0x4c>)
 800498a:	2200      	movs	r2, #0
 800498c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800498e:	4b0b      	ldr	r3, [pc, #44]	; (80049bc <MX_USART1_UART_Init+0x4c>)
 8004990:	2200      	movs	r2, #0
 8004992:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004994:	4b09      	ldr	r3, [pc, #36]	; (80049bc <MX_USART1_UART_Init+0x4c>)
 8004996:	220c      	movs	r2, #12
 8004998:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800499a:	4b08      	ldr	r3, [pc, #32]	; (80049bc <MX_USART1_UART_Init+0x4c>)
 800499c:	2200      	movs	r2, #0
 800499e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80049a0:	4b06      	ldr	r3, [pc, #24]	; (80049bc <MX_USART1_UART_Init+0x4c>)
 80049a2:	2200      	movs	r2, #0
 80049a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80049a6:	4805      	ldr	r0, [pc, #20]	; (80049bc <MX_USART1_UART_Init+0x4c>)
 80049a8:	f7fe f82e 	bl	8002a08 <HAL_UART_Init>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d001      	beq.n	80049b6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80049b2:	f7ff f81d 	bl	80039f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80049b6:	bf00      	nop
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	bf00      	nop
 80049bc:	20000244 	.word	0x20000244
 80049c0:	40011000 	.word	0x40011000

080049c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b08a      	sub	sp, #40	; 0x28
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049cc:	f107 0314 	add.w	r3, r7, #20
 80049d0:	2200      	movs	r2, #0
 80049d2:	601a      	str	r2, [r3, #0]
 80049d4:	605a      	str	r2, [r3, #4]
 80049d6:	609a      	str	r2, [r3, #8]
 80049d8:	60da      	str	r2, [r3, #12]
 80049da:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a31      	ldr	r2, [pc, #196]	; (8004aa8 <HAL_UART_MspInit+0xe4>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d15b      	bne.n	8004a9e <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80049e6:	2300      	movs	r3, #0
 80049e8:	613b      	str	r3, [r7, #16]
 80049ea:	4a30      	ldr	r2, [pc, #192]	; (8004aac <HAL_UART_MspInit+0xe8>)
 80049ec:	4b2f      	ldr	r3, [pc, #188]	; (8004aac <HAL_UART_MspInit+0xe8>)
 80049ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049f0:	f043 0310 	orr.w	r3, r3, #16
 80049f4:	6453      	str	r3, [r2, #68]	; 0x44
 80049f6:	4b2d      	ldr	r3, [pc, #180]	; (8004aac <HAL_UART_MspInit+0xe8>)
 80049f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049fa:	f003 0310 	and.w	r3, r3, #16
 80049fe:	613b      	str	r3, [r7, #16]
 8004a00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a02:	2300      	movs	r3, #0
 8004a04:	60fb      	str	r3, [r7, #12]
 8004a06:	4a29      	ldr	r2, [pc, #164]	; (8004aac <HAL_UART_MspInit+0xe8>)
 8004a08:	4b28      	ldr	r3, [pc, #160]	; (8004aac <HAL_UART_MspInit+0xe8>)
 8004a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a0c:	f043 0301 	orr.w	r3, r3, #1
 8004a10:	6313      	str	r3, [r2, #48]	; 0x30
 8004a12:	4b26      	ldr	r3, [pc, #152]	; (8004aac <HAL_UART_MspInit+0xe8>)
 8004a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a16:	f003 0301 	and.w	r3, r3, #1
 8004a1a:	60fb      	str	r3, [r7, #12]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004a1e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004a22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a24:	2302      	movs	r3, #2
 8004a26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a2c:	2303      	movs	r3, #3
 8004a2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004a30:	2307      	movs	r3, #7
 8004a32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a34:	f107 0314 	add.w	r3, r7, #20
 8004a38:	4619      	mov	r1, r3
 8004a3a:	481d      	ldr	r0, [pc, #116]	; (8004ab0 <HAL_UART_MspInit+0xec>)
 8004a3c:	f7fc fa66 	bl	8000f0c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8004a40:	4b1c      	ldr	r3, [pc, #112]	; (8004ab4 <HAL_UART_MspInit+0xf0>)
 8004a42:	4a1d      	ldr	r2, [pc, #116]	; (8004ab8 <HAL_UART_MspInit+0xf4>)
 8004a44:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8004a46:	4b1b      	ldr	r3, [pc, #108]	; (8004ab4 <HAL_UART_MspInit+0xf0>)
 8004a48:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004a4c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004a4e:	4b19      	ldr	r3, [pc, #100]	; (8004ab4 <HAL_UART_MspInit+0xf0>)
 8004a50:	2200      	movs	r2, #0
 8004a52:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a54:	4b17      	ldr	r3, [pc, #92]	; (8004ab4 <HAL_UART_MspInit+0xf0>)
 8004a56:	2200      	movs	r2, #0
 8004a58:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004a5a:	4b16      	ldr	r3, [pc, #88]	; (8004ab4 <HAL_UART_MspInit+0xf0>)
 8004a5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a60:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004a62:	4b14      	ldr	r3, [pc, #80]	; (8004ab4 <HAL_UART_MspInit+0xf0>)
 8004a64:	2200      	movs	r2, #0
 8004a66:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004a68:	4b12      	ldr	r3, [pc, #72]	; (8004ab4 <HAL_UART_MspInit+0xf0>)
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8004a6e:	4b11      	ldr	r3, [pc, #68]	; (8004ab4 <HAL_UART_MspInit+0xf0>)
 8004a70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a74:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004a76:	4b0f      	ldr	r3, [pc, #60]	; (8004ab4 <HAL_UART_MspInit+0xf0>)
 8004a78:	2200      	movs	r2, #0
 8004a7a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004a7c:	4b0d      	ldr	r3, [pc, #52]	; (8004ab4 <HAL_UART_MspInit+0xf0>)
 8004a7e:	2200      	movs	r2, #0
 8004a80:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004a82:	480c      	ldr	r0, [pc, #48]	; (8004ab4 <HAL_UART_MspInit+0xf0>)
 8004a84:	f7fb fed4 	bl	8000830 <HAL_DMA_Init>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d001      	beq.n	8004a92 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8004a8e:	f7fe ffaf 	bl	80039f0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a07      	ldr	r2, [pc, #28]	; (8004ab4 <HAL_UART_MspInit+0xf0>)
 8004a96:	639a      	str	r2, [r3, #56]	; 0x38
 8004a98:	4a06      	ldr	r2, [pc, #24]	; (8004ab4 <HAL_UART_MspInit+0xf0>)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8004a9e:	bf00      	nop
 8004aa0:	3728      	adds	r7, #40	; 0x28
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	40011000 	.word	0x40011000
 8004aac:	40023800 	.word	0x40023800
 8004ab0:	40020000 	.word	0x40020000
 8004ab4:	200001e4 	.word	0x200001e4
 8004ab8:	40026440 	.word	0x40026440

08004abc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004abc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004af4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004ac0:	480d      	ldr	r0, [pc, #52]	; (8004af8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004ac2:	490e      	ldr	r1, [pc, #56]	; (8004afc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004ac4:	4a0e      	ldr	r2, [pc, #56]	; (8004b00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004ac6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004ac8:	e002      	b.n	8004ad0 <LoopCopyDataInit>

08004aca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004aca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004acc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004ace:	3304      	adds	r3, #4

08004ad0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004ad0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004ad2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004ad4:	d3f9      	bcc.n	8004aca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004ad6:	4a0b      	ldr	r2, [pc, #44]	; (8004b04 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004ad8:	4c0b      	ldr	r4, [pc, #44]	; (8004b08 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004ada:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004adc:	e001      	b.n	8004ae2 <LoopFillZerobss>

08004ade <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004ade:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004ae0:	3204      	adds	r2, #4

08004ae2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004ae2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004ae4:	d3fb      	bcc.n	8004ade <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004ae6:	f7ff fa55 	bl	8003f94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004aea:	f000 f811 	bl	8004b10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004aee:	f7fe fddf 	bl	80036b0 <main>
  bx  lr    
 8004af2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004af4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004af8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004afc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8004b00:	08004bc8 	.word	0x08004bc8
  ldr r2, =_sbss
 8004b04:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8004b08:	20000288 	.word	0x20000288

08004b0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004b0c:	e7fe      	b.n	8004b0c <ADC_IRQHandler>
	...

08004b10 <__libc_init_array>:
 8004b10:	b570      	push	{r4, r5, r6, lr}
 8004b12:	4e0d      	ldr	r6, [pc, #52]	; (8004b48 <__libc_init_array+0x38>)
 8004b14:	4c0d      	ldr	r4, [pc, #52]	; (8004b4c <__libc_init_array+0x3c>)
 8004b16:	1ba4      	subs	r4, r4, r6
 8004b18:	10a4      	asrs	r4, r4, #2
 8004b1a:	2500      	movs	r5, #0
 8004b1c:	42a5      	cmp	r5, r4
 8004b1e:	d109      	bne.n	8004b34 <__libc_init_array+0x24>
 8004b20:	4e0b      	ldr	r6, [pc, #44]	; (8004b50 <__libc_init_array+0x40>)
 8004b22:	4c0c      	ldr	r4, [pc, #48]	; (8004b54 <__libc_init_array+0x44>)
 8004b24:	f000 f82c 	bl	8004b80 <_init>
 8004b28:	1ba4      	subs	r4, r4, r6
 8004b2a:	10a4      	asrs	r4, r4, #2
 8004b2c:	2500      	movs	r5, #0
 8004b2e:	42a5      	cmp	r5, r4
 8004b30:	d105      	bne.n	8004b3e <__libc_init_array+0x2e>
 8004b32:	bd70      	pop	{r4, r5, r6, pc}
 8004b34:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b38:	4798      	blx	r3
 8004b3a:	3501      	adds	r5, #1
 8004b3c:	e7ee      	b.n	8004b1c <__libc_init_array+0xc>
 8004b3e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b42:	4798      	blx	r3
 8004b44:	3501      	adds	r5, #1
 8004b46:	e7f2      	b.n	8004b2e <__libc_init_array+0x1e>
 8004b48:	08004bc0 	.word	0x08004bc0
 8004b4c:	08004bc0 	.word	0x08004bc0
 8004b50:	08004bc0 	.word	0x08004bc0
 8004b54:	08004bc4 	.word	0x08004bc4

08004b58 <memcpy>:
 8004b58:	b510      	push	{r4, lr}
 8004b5a:	1e43      	subs	r3, r0, #1
 8004b5c:	440a      	add	r2, r1
 8004b5e:	4291      	cmp	r1, r2
 8004b60:	d100      	bne.n	8004b64 <memcpy+0xc>
 8004b62:	bd10      	pop	{r4, pc}
 8004b64:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b68:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b6c:	e7f7      	b.n	8004b5e <memcpy+0x6>

08004b6e <memset>:
 8004b6e:	4402      	add	r2, r0
 8004b70:	4603      	mov	r3, r0
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d100      	bne.n	8004b78 <memset+0xa>
 8004b76:	4770      	bx	lr
 8004b78:	f803 1b01 	strb.w	r1, [r3], #1
 8004b7c:	e7f9      	b.n	8004b72 <memset+0x4>
	...

08004b80 <_init>:
 8004b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b82:	bf00      	nop
 8004b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b86:	bc08      	pop	{r3}
 8004b88:	469e      	mov	lr, r3
 8004b8a:	4770      	bx	lr

08004b8c <_fini>:
 8004b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b8e:	bf00      	nop
 8004b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b92:	bc08      	pop	{r3}
 8004b94:	469e      	mov	lr, r3
 8004b96:	4770      	bx	lr
