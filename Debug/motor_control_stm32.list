
motor_control_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035c4  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800375c  0800375c  0001375c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800377c  0800377c  0001377c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003784  08003784  00013784  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003788  08003788  00013788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  0800378c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002d4  2000000c  08003798  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00006000  200002e0  08003798  000202e0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00018993  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002f4f  00000000  00000000  000389cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00011a1e  00000000  00000000  0003b91e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000c00  00000000  00000000  0004d340  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000023d0  00000000  00000000  0004df40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000099d6  00000000  00000000  00050310  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00004783  00000000  00000000  00059ce6  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0005e469  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002a74  00000000  00000000  0005e4e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003744 	.word	0x08003744

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08003744 	.word	0x08003744

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b97a 	b.w	80004e4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	468c      	mov	ip, r1
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	9e08      	ldr	r6, [sp, #32]
 8000214:	2b00      	cmp	r3, #0
 8000216:	d151      	bne.n	80002bc <__udivmoddi4+0xb4>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d96d      	bls.n	80002fa <__udivmoddi4+0xf2>
 800021e:	fab2 fe82 	clz	lr, r2
 8000222:	f1be 0f00 	cmp.w	lr, #0
 8000226:	d00b      	beq.n	8000240 <__udivmoddi4+0x38>
 8000228:	f1ce 0c20 	rsb	ip, lr, #32
 800022c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000230:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000234:	fa02 f70e 	lsl.w	r7, r2, lr
 8000238:	ea4c 0c05 	orr.w	ip, ip, r5
 800023c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000240:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000244:	0c25      	lsrs	r5, r4, #16
 8000246:	fbbc f8fa 	udiv	r8, ip, sl
 800024a:	fa1f f987 	uxth.w	r9, r7
 800024e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000252:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000256:	fb08 f309 	mul.w	r3, r8, r9
 800025a:	42ab      	cmp	r3, r5
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x6c>
 800025e:	19ed      	adds	r5, r5, r7
 8000260:	f108 32ff 	add.w	r2, r8, #4294967295
 8000264:	f080 8123 	bcs.w	80004ae <__udivmoddi4+0x2a6>
 8000268:	42ab      	cmp	r3, r5
 800026a:	f240 8120 	bls.w	80004ae <__udivmoddi4+0x2a6>
 800026e:	f1a8 0802 	sub.w	r8, r8, #2
 8000272:	443d      	add	r5, r7
 8000274:	1aed      	subs	r5, r5, r3
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb5 f0fa 	udiv	r0, r5, sl
 800027c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000280:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000284:	fb00 f909 	mul.w	r9, r0, r9
 8000288:	45a1      	cmp	r9, r4
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x98>
 800028c:	19e4      	adds	r4, r4, r7
 800028e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000292:	f080 810a 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 8000296:	45a1      	cmp	r9, r4
 8000298:	f240 8107 	bls.w	80004aa <__udivmoddi4+0x2a2>
 800029c:	3802      	subs	r0, #2
 800029e:	443c      	add	r4, r7
 80002a0:	eba4 0409 	sub.w	r4, r4, r9
 80002a4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002a8:	2100      	movs	r1, #0
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	d061      	beq.n	8000372 <__udivmoddi4+0x16a>
 80002ae:	fa24 f40e 	lsr.w	r4, r4, lr
 80002b2:	2300      	movs	r3, #0
 80002b4:	6034      	str	r4, [r6, #0]
 80002b6:	6073      	str	r3, [r6, #4]
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	428b      	cmp	r3, r1
 80002be:	d907      	bls.n	80002d0 <__udivmoddi4+0xc8>
 80002c0:	2e00      	cmp	r6, #0
 80002c2:	d054      	beq.n	800036e <__udivmoddi4+0x166>
 80002c4:	2100      	movs	r1, #0
 80002c6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ca:	4608      	mov	r0, r1
 80002cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d0:	fab3 f183 	clz	r1, r3
 80002d4:	2900      	cmp	r1, #0
 80002d6:	f040 808e 	bne.w	80003f6 <__udivmoddi4+0x1ee>
 80002da:	42ab      	cmp	r3, r5
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xdc>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80fa 	bhi.w	80004d8 <__udivmoddi4+0x2d0>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb65 0503 	sbc.w	r5, r5, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	46ac      	mov	ip, r5
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	d03f      	beq.n	8000372 <__udivmoddi4+0x16a>
 80002f2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	b912      	cbnz	r2, 8000302 <__udivmoddi4+0xfa>
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb7 f7f2 	udiv	r7, r7, r2
 8000302:	fab7 fe87 	clz	lr, r7
 8000306:	f1be 0f00 	cmp.w	lr, #0
 800030a:	d134      	bne.n	8000376 <__udivmoddi4+0x16e>
 800030c:	1beb      	subs	r3, r5, r7
 800030e:	0c3a      	lsrs	r2, r7, #16
 8000310:	fa1f fc87 	uxth.w	ip, r7
 8000314:	2101      	movs	r1, #1
 8000316:	fbb3 f8f2 	udiv	r8, r3, r2
 800031a:	0c25      	lsrs	r5, r4, #16
 800031c:	fb02 3318 	mls	r3, r2, r8, r3
 8000320:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000324:	fb0c f308 	mul.w	r3, ip, r8
 8000328:	42ab      	cmp	r3, r5
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x134>
 800032c:	19ed      	adds	r5, r5, r7
 800032e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x132>
 8000334:	42ab      	cmp	r3, r5
 8000336:	f200 80d1 	bhi.w	80004dc <__udivmoddi4+0x2d4>
 800033a:	4680      	mov	r8, r0
 800033c:	1aed      	subs	r5, r5, r3
 800033e:	b2a3      	uxth	r3, r4
 8000340:	fbb5 f0f2 	udiv	r0, r5, r2
 8000344:	fb02 5510 	mls	r5, r2, r0, r5
 8000348:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800034c:	fb0c fc00 	mul.w	ip, ip, r0
 8000350:	45a4      	cmp	ip, r4
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x15c>
 8000354:	19e4      	adds	r4, r4, r7
 8000356:	f100 33ff 	add.w	r3, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x15a>
 800035c:	45a4      	cmp	ip, r4
 800035e:	f200 80b8 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 8000362:	4618      	mov	r0, r3
 8000364:	eba4 040c 	sub.w	r4, r4, ip
 8000368:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800036c:	e79d      	b.n	80002aa <__udivmoddi4+0xa2>
 800036e:	4631      	mov	r1, r6
 8000370:	4630      	mov	r0, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	f1ce 0420 	rsb	r4, lr, #32
 800037a:	fa05 f30e 	lsl.w	r3, r5, lr
 800037e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000382:	fa20 f804 	lsr.w	r8, r0, r4
 8000386:	0c3a      	lsrs	r2, r7, #16
 8000388:	fa25 f404 	lsr.w	r4, r5, r4
 800038c:	ea48 0803 	orr.w	r8, r8, r3
 8000390:	fbb4 f1f2 	udiv	r1, r4, r2
 8000394:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000398:	fb02 4411 	mls	r4, r2, r1, r4
 800039c:	fa1f fc87 	uxth.w	ip, r7
 80003a0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003a4:	fb01 f30c 	mul.w	r3, r1, ip
 80003a8:	42ab      	cmp	r3, r5
 80003aa:	fa00 f40e 	lsl.w	r4, r0, lr
 80003ae:	d909      	bls.n	80003c4 <__udivmoddi4+0x1bc>
 80003b0:	19ed      	adds	r5, r5, r7
 80003b2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003b6:	f080 808a 	bcs.w	80004ce <__udivmoddi4+0x2c6>
 80003ba:	42ab      	cmp	r3, r5
 80003bc:	f240 8087 	bls.w	80004ce <__udivmoddi4+0x2c6>
 80003c0:	3902      	subs	r1, #2
 80003c2:	443d      	add	r5, r7
 80003c4:	1aeb      	subs	r3, r5, r3
 80003c6:	fa1f f588 	uxth.w	r5, r8
 80003ca:	fbb3 f0f2 	udiv	r0, r3, r2
 80003ce:	fb02 3310 	mls	r3, r2, r0, r3
 80003d2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003d6:	fb00 f30c 	mul.w	r3, r0, ip
 80003da:	42ab      	cmp	r3, r5
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1e6>
 80003de:	19ed      	adds	r5, r5, r7
 80003e0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003e4:	d26f      	bcs.n	80004c6 <__udivmoddi4+0x2be>
 80003e6:	42ab      	cmp	r3, r5
 80003e8:	d96d      	bls.n	80004c6 <__udivmoddi4+0x2be>
 80003ea:	3802      	subs	r0, #2
 80003ec:	443d      	add	r5, r7
 80003ee:	1aeb      	subs	r3, r5, r3
 80003f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f4:	e78f      	b.n	8000316 <__udivmoddi4+0x10e>
 80003f6:	f1c1 0720 	rsb	r7, r1, #32
 80003fa:	fa22 f807 	lsr.w	r8, r2, r7
 80003fe:	408b      	lsls	r3, r1
 8000400:	fa05 f401 	lsl.w	r4, r5, r1
 8000404:	ea48 0303 	orr.w	r3, r8, r3
 8000408:	fa20 fe07 	lsr.w	lr, r0, r7
 800040c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000410:	40fd      	lsrs	r5, r7
 8000412:	ea4e 0e04 	orr.w	lr, lr, r4
 8000416:	fbb5 f9fc 	udiv	r9, r5, ip
 800041a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800041e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000422:	fa1f f883 	uxth.w	r8, r3
 8000426:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800042a:	fb09 f408 	mul.w	r4, r9, r8
 800042e:	42ac      	cmp	r4, r5
 8000430:	fa02 f201 	lsl.w	r2, r2, r1
 8000434:	fa00 fa01 	lsl.w	sl, r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x244>
 800043a:	18ed      	adds	r5, r5, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	d243      	bcs.n	80004ca <__udivmoddi4+0x2c2>
 8000442:	42ac      	cmp	r4, r5
 8000444:	d941      	bls.n	80004ca <__udivmoddi4+0x2c2>
 8000446:	f1a9 0902 	sub.w	r9, r9, #2
 800044a:	441d      	add	r5, r3
 800044c:	1b2d      	subs	r5, r5, r4
 800044e:	fa1f fe8e 	uxth.w	lr, lr
 8000452:	fbb5 f0fc 	udiv	r0, r5, ip
 8000456:	fb0c 5510 	mls	r5, ip, r0, r5
 800045a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800045e:	fb00 f808 	mul.w	r8, r0, r8
 8000462:	45a0      	cmp	r8, r4
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x26e>
 8000466:	18e4      	adds	r4, r4, r3
 8000468:	f100 35ff 	add.w	r5, r0, #4294967295
 800046c:	d229      	bcs.n	80004c2 <__udivmoddi4+0x2ba>
 800046e:	45a0      	cmp	r8, r4
 8000470:	d927      	bls.n	80004c2 <__udivmoddi4+0x2ba>
 8000472:	3802      	subs	r0, #2
 8000474:	441c      	add	r4, r3
 8000476:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047a:	eba4 0408 	sub.w	r4, r4, r8
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	454c      	cmp	r4, r9
 8000484:	46c6      	mov	lr, r8
 8000486:	464d      	mov	r5, r9
 8000488:	d315      	bcc.n	80004b6 <__udivmoddi4+0x2ae>
 800048a:	d012      	beq.n	80004b2 <__udivmoddi4+0x2aa>
 800048c:	b156      	cbz	r6, 80004a4 <__udivmoddi4+0x29c>
 800048e:	ebba 030e 	subs.w	r3, sl, lr
 8000492:	eb64 0405 	sbc.w	r4, r4, r5
 8000496:	fa04 f707 	lsl.w	r7, r4, r7
 800049a:	40cb      	lsrs	r3, r1
 800049c:	431f      	orrs	r7, r3
 800049e:	40cc      	lsrs	r4, r1
 80004a0:	6037      	str	r7, [r6, #0]
 80004a2:	6074      	str	r4, [r6, #4]
 80004a4:	2100      	movs	r1, #0
 80004a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004aa:	4618      	mov	r0, r3
 80004ac:	e6f8      	b.n	80002a0 <__udivmoddi4+0x98>
 80004ae:	4690      	mov	r8, r2
 80004b0:	e6e0      	b.n	8000274 <__udivmoddi4+0x6c>
 80004b2:	45c2      	cmp	sl, r8
 80004b4:	d2ea      	bcs.n	800048c <__udivmoddi4+0x284>
 80004b6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ba:	eb69 0503 	sbc.w	r5, r9, r3
 80004be:	3801      	subs	r0, #1
 80004c0:	e7e4      	b.n	800048c <__udivmoddi4+0x284>
 80004c2:	4628      	mov	r0, r5
 80004c4:	e7d7      	b.n	8000476 <__udivmoddi4+0x26e>
 80004c6:	4640      	mov	r0, r8
 80004c8:	e791      	b.n	80003ee <__udivmoddi4+0x1e6>
 80004ca:	4681      	mov	r9, r0
 80004cc:	e7be      	b.n	800044c <__udivmoddi4+0x244>
 80004ce:	4601      	mov	r1, r0
 80004d0:	e778      	b.n	80003c4 <__udivmoddi4+0x1bc>
 80004d2:	3802      	subs	r0, #2
 80004d4:	443c      	add	r4, r7
 80004d6:	e745      	b.n	8000364 <__udivmoddi4+0x15c>
 80004d8:	4608      	mov	r0, r1
 80004da:	e708      	b.n	80002ee <__udivmoddi4+0xe6>
 80004dc:	f1a8 0802 	sub.w	r8, r8, #2
 80004e0:	443d      	add	r5, r7
 80004e2:	e72b      	b.n	800033c <__udivmoddi4+0x134>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004e8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004ea:	4a0e      	ldr	r2, [pc, #56]	; (8000524 <HAL_InitTick+0x3c>)
 80004ec:	4b0e      	ldr	r3, [pc, #56]	; (8000528 <HAL_InitTick+0x40>)
 80004ee:	7812      	ldrb	r2, [r2, #0]
 80004f0:	681b      	ldr	r3, [r3, #0]
{
 80004f2:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004f8:	fbb0 f0f2 	udiv	r0, r0, r2
 80004fc:	fbb3 f0f0 	udiv	r0, r3, r0
 8000500:	f000 f8aa 	bl	8000658 <HAL_SYSTICK_Config>
 8000504:	b908      	cbnz	r0, 800050a <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000506:	2d0f      	cmp	r5, #15
 8000508:	d901      	bls.n	800050e <HAL_InitTick+0x26>
    return HAL_ERROR;
 800050a:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800050c:	bd38      	pop	{r3, r4, r5, pc}
 800050e:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000510:	4602      	mov	r2, r0
 8000512:	4629      	mov	r1, r5
 8000514:	f04f 30ff 	mov.w	r0, #4294967295
 8000518:	f000 f85a 	bl	80005d0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800051c:	4b03      	ldr	r3, [pc, #12]	; (800052c <HAL_InitTick+0x44>)
 800051e:	4620      	mov	r0, r4
 8000520:	601d      	str	r5, [r3, #0]
 8000522:	bd38      	pop	{r3, r4, r5, pc}
 8000524:	20000000 	.word	0x20000000
 8000528:	20000008 	.word	0x20000008
 800052c:	20000004 	.word	0x20000004

08000530 <HAL_Init>:
{
 8000530:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000532:	4b0b      	ldr	r3, [pc, #44]	; (8000560 <HAL_Init+0x30>)
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800053a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800053c:	681a      	ldr	r2, [r3, #0]
 800053e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000542:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000544:	681a      	ldr	r2, [r3, #0]
 8000546:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800054a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800054c:	2003      	movs	r0, #3
 800054e:	f000 f82d 	bl	80005ac <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000552:	200f      	movs	r0, #15
 8000554:	f7ff ffc8 	bl	80004e8 <HAL_InitTick>
  HAL_MspInit();
 8000558:	f002 f8e6 	bl	8002728 <HAL_MspInit>
}
 800055c:	2000      	movs	r0, #0
 800055e:	bd08      	pop	{r3, pc}
 8000560:	40023c00 	.word	0x40023c00

08000564 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000564:	4a03      	ldr	r2, [pc, #12]	; (8000574 <HAL_IncTick+0x10>)
 8000566:	4b04      	ldr	r3, [pc, #16]	; (8000578 <HAL_IncTick+0x14>)
 8000568:	6811      	ldr	r1, [r2, #0]
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	440b      	add	r3, r1
 800056e:	6013      	str	r3, [r2, #0]
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	20000028 	.word	0x20000028
 8000578:	20000000 	.word	0x20000000

0800057c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800057c:	4b01      	ldr	r3, [pc, #4]	; (8000584 <HAL_GetTick+0x8>)
 800057e:	6818      	ldr	r0, [r3, #0]
}
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	20000028 	.word	0x20000028

08000588 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000588:	b538      	push	{r3, r4, r5, lr}
 800058a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800058c:	f7ff fff6 	bl	800057c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000590:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000592:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8000594:	d002      	beq.n	800059c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000596:	4b04      	ldr	r3, [pc, #16]	; (80005a8 <HAL_Delay+0x20>)
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800059c:	f7ff ffee 	bl	800057c <HAL_GetTick>
 80005a0:	1b40      	subs	r0, r0, r5
 80005a2:	4284      	cmp	r4, r0
 80005a4:	d8fa      	bhi.n	800059c <HAL_Delay+0x14>
  {
  }
}
 80005a6:	bd38      	pop	{r3, r4, r5, pc}
 80005a8:	20000000 	.word	0x20000000

080005ac <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005ac:	4a07      	ldr	r2, [pc, #28]	; (80005cc <HAL_NVIC_SetPriorityGrouping+0x20>)
 80005ae:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005b0:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 80005b4:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005b6:	0200      	lsls	r0, r0, #8
 80005b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005bc:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 80005c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80005c4:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80005c6:	60d3      	str	r3, [r2, #12]
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	e000ed00 	.word	0xe000ed00

080005d0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005d0:	4b18      	ldr	r3, [pc, #96]	; (8000634 <HAL_NVIC_SetPriority+0x64>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005d2:	b470      	push	{r4, r5, r6}
 80005d4:	68dc      	ldr	r4, [r3, #12]
 80005d6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005da:	f1c4 0607 	rsb	r6, r4, #7
 80005de:	2e04      	cmp	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005e0:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005e4:	bf28      	it	cs
 80005e6:	2604      	movcs	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005e8:	2b06      	cmp	r3, #6
 80005ea:	d917      	bls.n	800061c <HAL_NVIC_SetPriority+0x4c>
 80005ec:	3c03      	subs	r4, #3
 80005ee:	2501      	movs	r5, #1
 80005f0:	40a5      	lsls	r5, r4
 80005f2:	3d01      	subs	r5, #1
 80005f4:	402a      	ands	r2, r5

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005f6:	2301      	movs	r3, #1
 80005f8:	40b3      	lsls	r3, r6
 80005fa:	3b01      	subs	r3, #1
 80005fc:	4019      	ands	r1, r3
 80005fe:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 8000600:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000602:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8000606:	db0c      	blt.n	8000622 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000608:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800060c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000610:	0109      	lsls	r1, r1, #4
 8000612:	b2c9      	uxtb	r1, r1
 8000614:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000618:	bc70      	pop	{r4, r5, r6}
 800061a:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800061c:	2200      	movs	r2, #0
 800061e:	4614      	mov	r4, r2
 8000620:	e7e9      	b.n	80005f6 <HAL_NVIC_SetPriority+0x26>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000622:	4b05      	ldr	r3, [pc, #20]	; (8000638 <HAL_NVIC_SetPriority+0x68>)
 8000624:	f000 000f 	and.w	r0, r0, #15
 8000628:	0109      	lsls	r1, r1, #4
 800062a:	4403      	add	r3, r0
 800062c:	b2c9      	uxtb	r1, r1
 800062e:	7619      	strb	r1, [r3, #24]
 8000630:	bc70      	pop	{r4, r5, r6}
 8000632:	4770      	bx	lr
 8000634:	e000ed00 	.word	0xe000ed00
 8000638:	e000ecfc 	.word	0xe000ecfc

0800063c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800063c:	2800      	cmp	r0, #0
 800063e:	db07      	blt.n	8000650 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000640:	f000 011f 	and.w	r1, r0, #31
 8000644:	2301      	movs	r3, #1
 8000646:	0940      	lsrs	r0, r0, #5
 8000648:	4a02      	ldr	r2, [pc, #8]	; (8000654 <HAL_NVIC_EnableIRQ+0x18>)
 800064a:	408b      	lsls	r3, r1
 800064c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	e000e100 	.word	0xe000e100

08000658 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000658:	3801      	subs	r0, #1
 800065a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800065e:	d20e      	bcs.n	800067e <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000660:	4b08      	ldr	r3, [pc, #32]	; (8000684 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000662:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000664:	4c08      	ldr	r4, [pc, #32]	; (8000688 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000666:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000668:	20f0      	movs	r0, #240	; 0xf0
 800066a:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800066e:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000670:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000672:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000674:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000676:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 8000678:	f85d 4b04 	ldr.w	r4, [sp], #4
 800067c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800067e:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	e000e010 	.word	0xe000e010
 8000688:	e000ed00 	.word	0xe000ed00

0800068c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800068c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800068e:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8000690:	f7ff ff74 	bl	800057c <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000694:	2c00      	cmp	r4, #0
 8000696:	d073      	beq.n	8000780 <HAL_DMA_Init+0xf4>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000698:	2202      	movs	r2, #2

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800069a:	6823      	ldr	r3, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 800069c:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80006a0:	681a      	ldr	r2, [r3, #0]
  __HAL_UNLOCK(hdma);
 80006a2:	2100      	movs	r1, #0
  __HAL_DMA_DISABLE(hdma);
 80006a4:	f022 0201 	bic.w	r2, r2, #1
  __HAL_UNLOCK(hdma);
 80006a8:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
 80006ac:	4605      	mov	r5, r0
  __HAL_DMA_DISABLE(hdma);
 80006ae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80006b0:	e005      	b.n	80006be <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80006b2:	f7ff ff63 	bl	800057c <HAL_GetTick>
 80006b6:	1b40      	subs	r0, r0, r5
 80006b8:	2805      	cmp	r0, #5
 80006ba:	d83b      	bhi.n	8000734 <HAL_DMA_Init+0xa8>
 80006bc:	6823      	ldr	r3, [r4, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80006be:	681a      	ldr	r2, [r3, #0]
 80006c0:	07d1      	lsls	r1, r2, #31
 80006c2:	d4f6      	bmi.n	80006b2 <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80006c4:	68a7      	ldr	r7, [r4, #8]
 80006c6:	6862      	ldr	r2, [r4, #4]
 80006c8:	68e6      	ldr	r6, [r4, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80006ca:	6925      	ldr	r5, [r4, #16]
 80006cc:	6961      	ldr	r1, [r4, #20]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80006ce:	69a0      	ldr	r0, [r4, #24]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80006d0:	433a      	orrs	r2, r7
 80006d2:	4332      	orrs	r2, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80006d4:	432a      	orrs	r2, r5
 80006d6:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80006d8:	69e1      	ldr	r1, [r4, #28]
          hdma->Init.Mode                | hdma->Init.Priority;
 80006da:	6a25      	ldr	r5, [r4, #32]
  tmp = hdma->Instance->CR;
 80006dc:	681f      	ldr	r7, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80006de:	4e35      	ldr	r6, [pc, #212]	; (80007b4 <HAL_DMA_Init+0x128>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80006e0:	4302      	orrs	r2, r0
 80006e2:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80006e4:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hdma->Init.Mode                | hdma->Init.Priority;
 80006e6:	432a      	orrs	r2, r5
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80006e8:	403e      	ands	r6, r7
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80006ea:	2904      	cmp	r1, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80006ec:	ea42 0206 	orr.w	r2, r2, r6
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80006f0:	d027      	beq.n	8000742 <HAL_DMA_Init+0xb6>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80006f2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80006f4:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80006f6:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80006fa:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80006fc:	b2da      	uxtb	r2, r3
 80006fe:	4d2e      	ldr	r5, [pc, #184]	; (80007b8 <HAL_DMA_Init+0x12c>)
  hdma->Instance->FCR = tmp;
 8000700:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000702:	3a10      	subs	r2, #16
 8000704:	fba5 1202 	umull	r1, r2, r5, r2
 8000708:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800070a:	482c      	ldr	r0, [pc, #176]	; (80007bc <HAL_DMA_Init+0x130>)
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800070c:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000710:	5c81      	ldrb	r1, [r0, r2]
 8000712:	65e1      	str	r1, [r4, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000714:	f023 0303 	bic.w	r3, r3, #3
  if (stream_number > 3U)
 8000718:	2a03      	cmp	r2, #3
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800071a:	bf88      	it	hi
 800071c:	3304      	addhi	r3, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800071e:	223f      	movs	r2, #63	; 0x3f
 8000720:	408a      	lsls	r2, r1
  hdma->State = HAL_DMA_STATE_READY;
 8000722:	2501      	movs	r5, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000724:	2100      	movs	r1, #0
 8000726:	65a3      	str	r3, [r4, #88]	; 0x58
  return HAL_OK;
 8000728:	4608      	mov	r0, r1
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800072a:	609a      	str	r2, [r3, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800072c:	6561      	str	r1, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800072e:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
  return HAL_OK;
 8000732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000734:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000736:	2220      	movs	r2, #32
 8000738:	6562      	str	r2, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 800073a:	4618      	mov	r0, r3
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800073c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      return HAL_TIMEOUT;
 8000740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000742:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8000744:	6b21      	ldr	r1, [r4, #48]	; 0x30
    tmp |= hdma->Init.FIFOThreshold;
 8000746:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000748:	4329      	orrs	r1, r5
 800074a:	430a      	orrs	r2, r1
  hdma->Instance->CR = tmp;  
 800074c:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 800074e:	695a      	ldr	r2, [r3, #20]
    tmp |= hdma->Init.FIFOThreshold;
 8000750:	f046 0104 	orr.w	r1, r6, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000754:	f022 0207 	bic.w	r2, r2, #7
    tmp |= hdma->Init.FIFOThreshold;
 8000758:	4311      	orrs	r1, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800075a:	2d00      	cmp	r5, #0
 800075c:	d0ce      	beq.n	80006fc <HAL_DMA_Init+0x70>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800075e:	b188      	cbz	r0, 8000784 <HAL_DMA_Init+0xf8>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000760:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8000764:	d018      	beq.n	8000798 <HAL_DMA_Init+0x10c>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000766:	2e02      	cmp	r6, #2
 8000768:	d903      	bls.n	8000772 <HAL_DMA_Init+0xe6>
 800076a:	2e03      	cmp	r6, #3
 800076c:	d1c6      	bne.n	80006fc <HAL_DMA_Init+0x70>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800076e:	01ea      	lsls	r2, r5, #7
 8000770:	d5c4      	bpl.n	80006fc <HAL_DMA_Init+0x70>
        hdma->State = HAL_DMA_STATE_READY;
 8000772:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000774:	2240      	movs	r2, #64	; 0x40
 8000776:	6562      	str	r2, [r4, #84]	; 0x54
        return HAL_ERROR; 
 8000778:	4618      	mov	r0, r3
        hdma->State = HAL_DMA_STATE_READY;
 800077a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800077e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8000780:	2001      	movs	r0, #1
 8000782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (tmp)
 8000784:	2e01      	cmp	r6, #1
 8000786:	d003      	beq.n	8000790 <HAL_DMA_Init+0x104>
 8000788:	d3f1      	bcc.n	800076e <HAL_DMA_Init+0xe2>
 800078a:	2e02      	cmp	r6, #2
 800078c:	d1b6      	bne.n	80006fc <HAL_DMA_Init+0x70>
 800078e:	e7ee      	b.n	800076e <HAL_DMA_Init+0xe2>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000790:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8000794:	d1b2      	bne.n	80006fc <HAL_DMA_Init+0x70>
 8000796:	e7ec      	b.n	8000772 <HAL_DMA_Init+0xe6>
    switch (tmp)
 8000798:	2e03      	cmp	r6, #3
 800079a:	d8af      	bhi.n	80006fc <HAL_DMA_Init+0x70>
 800079c:	a201      	add	r2, pc, #4	; (adr r2, 80007a4 <HAL_DMA_Init+0x118>)
 800079e:	f852 f026 	ldr.w	pc, [r2, r6, lsl #2]
 80007a2:	bf00      	nop
 80007a4:	08000773 	.word	0x08000773
 80007a8:	0800076f 	.word	0x0800076f
 80007ac:	08000773 	.word	0x08000773
 80007b0:	08000791 	.word	0x08000791
 80007b4:	f010803f 	.word	0xf010803f
 80007b8:	aaaaaaab 	.word	0xaaaaaaab
 80007bc:	0800375c 	.word	0x0800375c

080007c0 <HAL_DMA_Start_IT>:
{
 80007c0:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hdma);
 80007c2:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 80007c6:	2c01      	cmp	r4, #1
 80007c8:	d00d      	beq.n	80007e6 <HAL_DMA_Start_IT+0x26>
  if(HAL_DMA_STATE_READY == hdma->State)
 80007ca:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80007ce:	6d86      	ldr	r6, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 80007d0:	2501      	movs	r5, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 80007d2:	42ac      	cmp	r4, r5
  __HAL_LOCK(hdma);
 80007d4:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80007d8:	d008      	beq.n	80007ec <HAL_DMA_Start_IT+0x2c>
    __HAL_UNLOCK(hdma);	  
 80007da:	2300      	movs	r3, #0
 80007dc:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    status = HAL_BUSY;
 80007e0:	2002      	movs	r0, #2
}
 80007e2:	bcf0      	pop	{r4, r5, r6, r7}
 80007e4:	4770      	bx	lr
  __HAL_LOCK(hdma);
 80007e6:	2002      	movs	r0, #2
}
 80007e8:	bcf0      	pop	{r4, r5, r6, r7}
 80007ea:	4770      	bx	lr
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80007ec:	6804      	ldr	r4, [r0, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 80007ee:	2702      	movs	r7, #2
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80007f0:	2500      	movs	r5, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 80007f2:	f880 7035 	strb.w	r7, [r0, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80007f6:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80007f8:	6825      	ldr	r5, [r4, #0]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80007fa:	6887      	ldr	r7, [r0, #8]
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80007fc:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000800:	2f40      	cmp	r7, #64	; 0x40
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000802:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8000804:	6063      	str	r3, [r4, #4]
    hdma->Instance->PAR = DstAddress;
 8000806:	bf0a      	itet	eq
 8000808:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 800080a:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 800080c:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800080e:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = DstAddress;
 8000810:	bf18      	it	ne
 8000812:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000814:	233f      	movs	r3, #63	; 0x3f
 8000816:	408b      	lsls	r3, r1
    if(hdma->XferHalfCpltCallback != NULL)
 8000818:	6c02      	ldr	r2, [r0, #64]	; 0x40
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800081a:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800081c:	6823      	ldr	r3, [r4, #0]
 800081e:	f043 0316 	orr.w	r3, r3, #22
 8000822:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8000824:	b11a      	cbz	r2, 800082e <HAL_DMA_Start_IT+0x6e>
      hdma->Instance->CR  |= DMA_IT_HT;
 8000826:	6823      	ldr	r3, [r4, #0]
 8000828:	f043 0308 	orr.w	r3, r3, #8
 800082c:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 800082e:	6823      	ldr	r3, [r4, #0]
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000836:	2000      	movs	r0, #0
 8000838:	e7d3      	b.n	80007e2 <HAL_DMA_Start_IT+0x22>
 800083a:	bf00      	nop

0800083c <HAL_DMA_IRQHandler>:
{
 800083c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800083e:	b083      	sub	sp, #12
  __IO uint32_t count = 0U;
 8000840:	2300      	movs	r3, #0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000842:	6d87      	ldr	r7, [r0, #88]	; 0x58
  __IO uint32_t count = 0U;
 8000844:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000846:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8000848:	683d      	ldr	r5, [r7, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800084a:	4962      	ldr	r1, [pc, #392]	; (80009d4 <HAL_DMA_IRQHandler+0x198>)
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800084c:	2208      	movs	r2, #8
 800084e:	409a      	lsls	r2, r3
 8000850:	4215      	tst	r5, r2
{
 8000852:	4604      	mov	r4, r0
  uint32_t timeout = SystemCoreClock / 9600U;
 8000854:	680e      	ldr	r6, [r1, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000856:	d003      	beq.n	8000860 <HAL_DMA_IRQHandler+0x24>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000858:	6801      	ldr	r1, [r0, #0]
 800085a:	6808      	ldr	r0, [r1, #0]
 800085c:	0740      	lsls	r0, r0, #29
 800085e:	d476      	bmi.n	800094e <HAL_DMA_IRQHandler+0x112>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000860:	2201      	movs	r2, #1
 8000862:	409a      	lsls	r2, r3
 8000864:	4215      	tst	r5, r2
 8000866:	d003      	beq.n	8000870 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000868:	6821      	ldr	r1, [r4, #0]
 800086a:	6949      	ldr	r1, [r1, #20]
 800086c:	0608      	lsls	r0, r1, #24
 800086e:	d468      	bmi.n	8000942 <HAL_DMA_IRQHandler+0x106>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000870:	2204      	movs	r2, #4
 8000872:	409a      	lsls	r2, r3
 8000874:	4215      	tst	r5, r2
 8000876:	d003      	beq.n	8000880 <HAL_DMA_IRQHandler+0x44>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000878:	6821      	ldr	r1, [r4, #0]
 800087a:	6809      	ldr	r1, [r1, #0]
 800087c:	0789      	lsls	r1, r1, #30
 800087e:	d45a      	bmi.n	8000936 <HAL_DMA_IRQHandler+0xfa>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000880:	2210      	movs	r2, #16
 8000882:	409a      	lsls	r2, r3
 8000884:	4215      	tst	r5, r2
 8000886:	d003      	beq.n	8000890 <HAL_DMA_IRQHandler+0x54>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000888:	6821      	ldr	r1, [r4, #0]
 800088a:	6808      	ldr	r0, [r1, #0]
 800088c:	0700      	lsls	r0, r0, #28
 800088e:	d43f      	bmi.n	8000910 <HAL_DMA_IRQHandler+0xd4>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000890:	2220      	movs	r2, #32
 8000892:	409a      	lsls	r2, r3
 8000894:	4215      	tst	r5, r2
 8000896:	d003      	beq.n	80008a0 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000898:	6821      	ldr	r1, [r4, #0]
 800089a:	6808      	ldr	r0, [r1, #0]
 800089c:	06c0      	lsls	r0, r0, #27
 800089e:	d425      	bmi.n	80008ec <HAL_DMA_IRQHandler+0xb0>
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80008a0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80008a2:	b30b      	cbz	r3, 80008e8 <HAL_DMA_IRQHandler+0xac>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80008a4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80008a6:	07da      	lsls	r2, r3, #31
 80008a8:	d51a      	bpl.n	80008e0 <HAL_DMA_IRQHandler+0xa4>
      hdma->State = HAL_DMA_STATE_ABORT;
 80008aa:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 80008ac:	6821      	ldr	r1, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 80008ae:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80008b2:	680b      	ldr	r3, [r1, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80008b4:	4a48      	ldr	r2, [pc, #288]	; (80009d8 <HAL_DMA_IRQHandler+0x19c>)
      __HAL_DMA_DISABLE(hdma);
 80008b6:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 80008ba:	fba2 0206 	umull	r0, r2, r2, r6
      __HAL_DMA_DISABLE(hdma);
 80008be:	600b      	str	r3, [r1, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80008c0:	0a92      	lsrs	r2, r2, #10
 80008c2:	e002      	b.n	80008ca <HAL_DMA_IRQHandler+0x8e>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80008c4:	680b      	ldr	r3, [r1, #0]
 80008c6:	07db      	lsls	r3, r3, #31
 80008c8:	d504      	bpl.n	80008d4 <HAL_DMA_IRQHandler+0x98>
        if (++count > timeout)
 80008ca:	9b01      	ldr	r3, [sp, #4]
 80008cc:	3301      	adds	r3, #1
 80008ce:	429a      	cmp	r2, r3
 80008d0:	9301      	str	r3, [sp, #4]
 80008d2:	d2f7      	bcs.n	80008c4 <HAL_DMA_IRQHandler+0x88>
      hdma->State = HAL_DMA_STATE_READY;
 80008d4:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma);
 80008d6:	2300      	movs	r3, #0
      hdma->State = HAL_DMA_STATE_READY;
 80008d8:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 80008dc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 80008e0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80008e2:	b10b      	cbz	r3, 80008e8 <HAL_DMA_IRQHandler+0xac>
      hdma->XferErrorCallback(hdma);
 80008e4:	4620      	mov	r0, r4
 80008e6:	4798      	blx	r3
}
 80008e8:	b003      	add	sp, #12
 80008ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80008ec:	60ba      	str	r2, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80008ee:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 80008f2:	2a05      	cmp	r2, #5
 80008f4:	d03b      	beq.n	800096e <HAL_DMA_IRQHandler+0x132>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80008f6:	680b      	ldr	r3, [r1, #0]
 80008f8:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80008fc:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80008fe:	d054      	beq.n	80009aa <HAL_DMA_IRQHandler+0x16e>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000900:	0319      	lsls	r1, r3, #12
 8000902:	d55f      	bpl.n	80009c4 <HAL_DMA_IRQHandler+0x188>
        if(hdma->XferCpltCallback != NULL)
 8000904:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000906:	2b00      	cmp	r3, #0
 8000908:	d0ca      	beq.n	80008a0 <HAL_DMA_IRQHandler+0x64>
          hdma->XferCpltCallback(hdma);
 800090a:	4620      	mov	r0, r4
 800090c:	4798      	blx	r3
 800090e:	e7c7      	b.n	80008a0 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000910:	60ba      	str	r2, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000912:	680a      	ldr	r2, [r1, #0]
 8000914:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000918:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800091a:	d122      	bne.n	8000962 <HAL_DMA_IRQHandler+0x126>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800091c:	05d2      	lsls	r2, r2, #23
 800091e:	d403      	bmi.n	8000928 <HAL_DMA_IRQHandler+0xec>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000920:	680a      	ldr	r2, [r1, #0]
 8000922:	f022 0208 	bic.w	r2, r2, #8
 8000926:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8000928:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800092a:	2a00      	cmp	r2, #0
 800092c:	d0b0      	beq.n	8000890 <HAL_DMA_IRQHandler+0x54>
          hdma->XferHalfCpltCallback(hdma);
 800092e:	4620      	mov	r0, r4
 8000930:	4790      	blx	r2
 8000932:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8000934:	e7ac      	b.n	8000890 <HAL_DMA_IRQHandler+0x54>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000936:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000938:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800093a:	f042 0204 	orr.w	r2, r2, #4
 800093e:	6562      	str	r2, [r4, #84]	; 0x54
 8000940:	e79e      	b.n	8000880 <HAL_DMA_IRQHandler+0x44>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000942:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000944:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000946:	f042 0202 	orr.w	r2, r2, #2
 800094a:	6562      	str	r2, [r4, #84]	; 0x54
 800094c:	e790      	b.n	8000870 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800094e:	6808      	ldr	r0, [r1, #0]
 8000950:	f020 0004 	bic.w	r0, r0, #4
 8000954:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000956:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000958:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800095a:	f042 0201 	orr.w	r2, r2, #1
 800095e:	6562      	str	r2, [r4, #84]	; 0x54
 8000960:	e77e      	b.n	8000860 <HAL_DMA_IRQHandler+0x24>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000962:	0311      	lsls	r1, r2, #12
 8000964:	d5e0      	bpl.n	8000928 <HAL_DMA_IRQHandler+0xec>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000966:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000968:	2a00      	cmp	r2, #0
 800096a:	d1e0      	bne.n	800092e <HAL_DMA_IRQHandler+0xf2>
 800096c:	e790      	b.n	8000890 <HAL_DMA_IRQHandler+0x54>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800096e:	680a      	ldr	r2, [r1, #0]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000970:	6c20      	ldr	r0, [r4, #64]	; 0x40
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000972:	f022 0216 	bic.w	r2, r2, #22
 8000976:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000978:	694a      	ldr	r2, [r1, #20]
 800097a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800097e:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000980:	b320      	cbz	r0, 80009cc <HAL_DMA_IRQHandler+0x190>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000982:	680a      	ldr	r2, [r1, #0]
 8000984:	f022 0208 	bic.w	r2, r2, #8
 8000988:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800098a:	223f      	movs	r2, #63	; 0x3f
        if(hdma->XferAbortCallback != NULL)
 800098c:	6d21      	ldr	r1, [r4, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800098e:	fa02 f303 	lsl.w	r3, r2, r3
        hdma->State = HAL_DMA_STATE_READY;
 8000992:	2001      	movs	r0, #1
        __HAL_UNLOCK(hdma);
 8000994:	2200      	movs	r2, #0
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000996:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8000998:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 800099c:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 80009a0:	2900      	cmp	r1, #0
 80009a2:	d0a1      	beq.n	80008e8 <HAL_DMA_IRQHandler+0xac>
          hdma->XferAbortCallback(hdma);
 80009a4:	4620      	mov	r0, r4
 80009a6:	4788      	blx	r1
 80009a8:	e79e      	b.n	80008e8 <HAL_DMA_IRQHandler+0xac>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80009aa:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 80009ae:	d1a9      	bne.n	8000904 <HAL_DMA_IRQHandler+0xc8>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80009b0:	680a      	ldr	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80009b2:	2001      	movs	r0, #1
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80009b4:	f022 0210 	bic.w	r2, r2, #16
 80009b8:	600a      	str	r2, [r1, #0]
          __HAL_UNLOCK(hdma);
 80009ba:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80009be:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
 80009c2:	e79f      	b.n	8000904 <HAL_DMA_IRQHandler+0xc8>
          if(hdma->XferM1CpltCallback != NULL)
 80009c4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d19f      	bne.n	800090a <HAL_DMA_IRQHandler+0xce>
 80009ca:	e769      	b.n	80008a0 <HAL_DMA_IRQHandler+0x64>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80009cc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80009ce:	2a00      	cmp	r2, #0
 80009d0:	d1d7      	bne.n	8000982 <HAL_DMA_IRQHandler+0x146>
 80009d2:	e7da      	b.n	800098a <HAL_DMA_IRQHandler+0x14e>
 80009d4:	20000008 	.word	0x20000008
 80009d8:	1b4e81b5 	.word	0x1b4e81b5

080009dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009e0:	f8d1 a000 	ldr.w	sl, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009e4:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 8000b98 <HAL_GPIO_Init+0x1bc>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80009e8:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 8000b9c <HAL_GPIO_Init+0x1c0>
{
 80009ec:	2600      	movs	r6, #0
    ioposition = 0x01U << position;
 80009ee:	46d0      	mov	r8, sl
{
 80009f0:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
 80009f2:	4634      	mov	r4, r6
    ioposition = 0x01U << position;
 80009f4:	f04f 0b01 	mov.w	fp, #1
 80009f8:	468a      	mov	sl, r1
 80009fa:	e005      	b.n	8000a08 <HAL_GPIO_Init+0x2c>
  for(position = 0U; position < GPIO_NUMBER; position++)
 80009fc:	3401      	adds	r4, #1
 80009fe:	2c10      	cmp	r4, #16
 8000a00:	f106 0602 	add.w	r6, r6, #2
 8000a04:	f000 8083 	beq.w	8000b0e <HAL_GPIO_Init+0x132>
    ioposition = 0x01U << position;
 8000a08:	fa0b f204 	lsl.w	r2, fp, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a0c:	ea08 0302 	and.w	r3, r8, r2
    if(iocurrent == ioposition)
 8000a10:	429a      	cmp	r2, r3
 8000a12:	d1f3      	bne.n	80009fc <HAL_GPIO_Init+0x20>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000a14:	f8da e004 	ldr.w	lr, [sl, #4]
 8000a18:	f00e 0203 	and.w	r2, lr, #3
 8000a1c:	1e51      	subs	r1, r2, #1
 8000a1e:	2901      	cmp	r1, #1
 8000a20:	f240 8091 	bls.w	8000b46 <HAL_GPIO_Init+0x16a>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a24:	2a03      	cmp	r2, #3
 8000a26:	d075      	beq.n	8000b14 <HAL_GPIO_Init+0x138>
 8000a28:	2103      	movs	r1, #3
 8000a2a:	40b1      	lsls	r1, r6
 8000a2c:	43c9      	mvns	r1, r1
 8000a2e:	9100      	str	r1, [sp, #0]
        temp = GPIOx->PUPDR;
 8000a30:	68c7      	ldr	r7, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a32:	f8da 5008 	ldr.w	r5, [sl, #8]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000a36:	400f      	ands	r7, r1
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a38:	40b5      	lsls	r5, r6
 8000a3a:	433d      	orrs	r5, r7
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a3c:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 8000a3e:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a40:	d06c      	beq.n	8000b1c <HAL_GPIO_Init+0x140>
 8000a42:	40b2      	lsls	r2, r6
      temp = GPIOx->MODER;
 8000a44:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000a46:	4029      	ands	r1, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a48:	430a      	orrs	r2, r1
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000a4a:	f41e 3f40 	tst.w	lr, #196608	; 0x30000
      GPIOx->MODER = temp;
 8000a4e:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000a50:	d0d4      	beq.n	80009fc <HAL_GPIO_Init+0x20>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a52:	2200      	movs	r2, #0
 8000a54:	9203      	str	r2, [sp, #12]
 8000a56:	f8d9 2044 	ldr.w	r2, [r9, #68]	; 0x44
 8000a5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000a5e:	f8c9 2044 	str.w	r2, [r9, #68]	; 0x44
 8000a62:	f8d9 2044 	ldr.w	r2, [r9, #68]	; 0x44
 8000a66:	f024 0103 	bic.w	r1, r4, #3
 8000a6a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8000a6e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000a72:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
 8000a76:	9203      	str	r2, [sp, #12]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a78:	f004 0203 	and.w	r2, r4, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a7c:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000a7e:	688f      	ldr	r7, [r1, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a80:	0092      	lsls	r2, r2, #2
 8000a82:	250f      	movs	r5, #15
 8000a84:	4095      	lsls	r5, r2
 8000a86:	ea27 0505 	bic.w	r5, r7, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a8a:	4f3f      	ldr	r7, [pc, #252]	; (8000b88 <HAL_GPIO_Init+0x1ac>)
 8000a8c:	42b8      	cmp	r0, r7
 8000a8e:	d06e      	beq.n	8000b6e <HAL_GPIO_Init+0x192>
 8000a90:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000a94:	42b8      	cmp	r0, r7
 8000a96:	d06c      	beq.n	8000b72 <HAL_GPIO_Init+0x196>
 8000a98:	4f3c      	ldr	r7, [pc, #240]	; (8000b8c <HAL_GPIO_Init+0x1b0>)
 8000a9a:	42b8      	cmp	r0, r7
 8000a9c:	d06c      	beq.n	8000b78 <HAL_GPIO_Init+0x19c>
 8000a9e:	4f3c      	ldr	r7, [pc, #240]	; (8000b90 <HAL_GPIO_Init+0x1b4>)
 8000aa0:	42b8      	cmp	r0, r7
 8000aa2:	d06d      	beq.n	8000b80 <HAL_GPIO_Init+0x1a4>
 8000aa4:	4f3b      	ldr	r7, [pc, #236]	; (8000b94 <HAL_GPIO_Init+0x1b8>)
 8000aa6:	42b8      	cmp	r0, r7
 8000aa8:	bf0c      	ite	eq
 8000aaa:	2704      	moveq	r7, #4
 8000aac:	2707      	movne	r7, #7
 8000aae:	fa07 f202 	lsl.w	r2, r7, r2
 8000ab2:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ab4:	608a      	str	r2, [r1, #8]
        temp = EXTI->RTSR;
 8000ab6:	f8dc 2008 	ldr.w	r2, [ip, #8]
        temp &= ~((uint32_t)iocurrent);
 8000aba:	43d9      	mvns	r1, r3
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000abc:	f41e 1f80 	tst.w	lr, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000ac0:	bf0c      	ite	eq
 8000ac2:	400a      	andeq	r2, r1
        {
          temp |= iocurrent;
 8000ac4:	431a      	orrne	r2, r3
        }
        EXTI->RTSR = temp;
 8000ac6:	f8cc 2008 	str.w	r2, [ip, #8]

        temp = EXTI->FTSR;
 8000aca:	f8dc 200c 	ldr.w	r2, [ip, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ace:	f41e 1f00 	tst.w	lr, #2097152	; 0x200000
        temp &= ~((uint32_t)iocurrent);
 8000ad2:	bf0c      	ite	eq
 8000ad4:	400a      	andeq	r2, r1
        {
          temp |= iocurrent;
 8000ad6:	431a      	orrne	r2, r3
        }
        EXTI->FTSR = temp;
 8000ad8:	f8cc 200c 	str.w	r2, [ip, #12]

        temp = EXTI->EMR;
 8000adc:	f8dc 2004 	ldr.w	r2, [ip, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ae0:	f41e 3f00 	tst.w	lr, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000ae4:	bf0c      	ite	eq
 8000ae6:	400a      	andeq	r2, r1
        {
          temp |= iocurrent;
 8000ae8:	431a      	orrne	r2, r3
        }
        EXTI->EMR = temp;
 8000aea:	f8cc 2004 	str.w	r2, [ip, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000aee:	f8dc 2000 	ldr.w	r2, [ip]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000af2:	f41e 3f80 	tst.w	lr, #65536	; 0x10000
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000af6:	f104 0401 	add.w	r4, r4, #1
        temp &= ~((uint32_t)iocurrent);
 8000afa:	bf0c      	ite	eq
 8000afc:	400a      	andeq	r2, r1
        {
          temp |= iocurrent;
 8000afe:	431a      	orrne	r2, r3
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b00:	2c10      	cmp	r4, #16
        }
        EXTI->IMR = temp;
 8000b02:	f8cc 2000 	str.w	r2, [ip]
 8000b06:	f106 0602 	add.w	r6, r6, #2
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b0a:	f47f af7d 	bne.w	8000a08 <HAL_GPIO_Init+0x2c>
      }
    }
  }
}
 8000b0e:	b005      	add	sp, #20
 8000b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b14:	40b2      	lsls	r2, r6
 8000b16:	43d1      	mvns	r1, r2
 8000b18:	9100      	str	r1, [sp, #0]
 8000b1a:	e793      	b.n	8000a44 <HAL_GPIO_Init+0x68>
        temp = GPIOx->AFR[position >> 3U];
 8000b1c:	08e5      	lsrs	r5, r4, #3
 8000b1e:	eb00 0185 	add.w	r1, r0, r5, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000b22:	f004 0507 	and.w	r5, r4, #7
 8000b26:	00af      	lsls	r7, r5, #2
 8000b28:	9101      	str	r1, [sp, #4]
 8000b2a:	250f      	movs	r5, #15
        temp = GPIOx->AFR[position >> 3U];
 8000b2c:	6a09      	ldr	r1, [r1, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000b2e:	40bd      	lsls	r5, r7
 8000b30:	ea21 0105 	bic.w	r1, r1, r5
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000b34:	f8da 5010 	ldr.w	r5, [sl, #16]
 8000b38:	40bd      	lsls	r5, r7
 8000b3a:	430d      	orrs	r5, r1
        GPIOx->AFR[position >> 3U] = temp;
 8000b3c:	9901      	ldr	r1, [sp, #4]
 8000b3e:	40b2      	lsls	r2, r6
 8000b40:	620d      	str	r5, [r1, #32]
 8000b42:	9900      	ldr	r1, [sp, #0]
 8000b44:	e77e      	b.n	8000a44 <HAL_GPIO_Init+0x68>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b46:	2103      	movs	r1, #3
        temp = GPIOx->OSPEEDR; 
 8000b48:	6887      	ldr	r7, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b4a:	f8da 500c 	ldr.w	r5, [sl, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b4e:	40b1      	lsls	r1, r6
 8000b50:	43c9      	mvns	r1, r1
 8000b52:	400f      	ands	r7, r1
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b54:	40b5      	lsls	r5, r6
 8000b56:	433d      	orrs	r5, r7
        GPIOx->OSPEEDR = temp;
 8000b58:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 8000b5a:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b5c:	9100      	str	r1, [sp, #0]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b5e:	f3ce 1500 	ubfx	r5, lr, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b62:	ea27 0703 	bic.w	r7, r7, r3
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b66:	40a5      	lsls	r5, r4
 8000b68:	433d      	orrs	r5, r7
        GPIOx->OTYPER = temp;
 8000b6a:	6045      	str	r5, [r0, #4]
 8000b6c:	e760      	b.n	8000a30 <HAL_GPIO_Init+0x54>
 8000b6e:	2200      	movs	r2, #0
 8000b70:	e79f      	b.n	8000ab2 <HAL_GPIO_Init+0xd6>
 8000b72:	fa0b f202 	lsl.w	r2, fp, r2
 8000b76:	e79c      	b.n	8000ab2 <HAL_GPIO_Init+0xd6>
 8000b78:	2702      	movs	r7, #2
 8000b7a:	fa07 f202 	lsl.w	r2, r7, r2
 8000b7e:	e798      	b.n	8000ab2 <HAL_GPIO_Init+0xd6>
 8000b80:	2703      	movs	r7, #3
 8000b82:	fa07 f202 	lsl.w	r2, r7, r2
 8000b86:	e794      	b.n	8000ab2 <HAL_GPIO_Init+0xd6>
 8000b88:	40020000 	.word	0x40020000
 8000b8c:	40020800 	.word	0x40020800
 8000b90:	40020c00 	.word	0x40020c00
 8000b94:	40021000 	.word	0x40021000
 8000b98:	40023800 	.word	0x40023800
 8000b9c:	40013c00 	.word	0x40013c00

08000ba0 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ba0:	2800      	cmp	r0, #0
 8000ba2:	f000 81dd 	beq.w	8000f60 <HAL_RCC_OscConfig+0x3c0>
{
 8000ba6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000baa:	6803      	ldr	r3, [r0, #0]
 8000bac:	07dd      	lsls	r5, r3, #31
{
 8000bae:	b082      	sub	sp, #8
 8000bb0:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bb2:	d52f      	bpl.n	8000c14 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000bb4:	49ab      	ldr	r1, [pc, #684]	; (8000e64 <HAL_RCC_OscConfig+0x2c4>)
 8000bb6:	688a      	ldr	r2, [r1, #8]
 8000bb8:	f002 020c 	and.w	r2, r2, #12
 8000bbc:	2a04      	cmp	r2, #4
 8000bbe:	f000 8123 	beq.w	8000e08 <HAL_RCC_OscConfig+0x268>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000bc2:	688a      	ldr	r2, [r1, #8]
 8000bc4:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000bc8:	2a08      	cmp	r2, #8
 8000bca:	f000 8119 	beq.w	8000e00 <HAL_RCC_OscConfig+0x260>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bce:	6863      	ldr	r3, [r4, #4]
 8000bd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bd4:	f000 815a 	beq.w	8000e8c <HAL_RCC_OscConfig+0x2ec>
 8000bd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000bdc:	f000 80e5 	beq.w	8000daa <HAL_RCC_OscConfig+0x20a>
 8000be0:	4da0      	ldr	r5, [pc, #640]	; (8000e64 <HAL_RCC_OscConfig+0x2c4>)
 8000be2:	682a      	ldr	r2, [r5, #0]
 8000be4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000be8:	602a      	str	r2, [r5, #0]
 8000bea:	682a      	ldr	r2, [r5, #0]
 8000bec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000bf0:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	f040 80e2 	bne.w	8000dbc <HAL_RCC_OscConfig+0x21c>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bf8:	f7ff fcc0 	bl	800057c <HAL_GetTick>
 8000bfc:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bfe:	e005      	b.n	8000c0c <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c00:	f7ff fcbc 	bl	800057c <HAL_GetTick>
 8000c04:	1b80      	subs	r0, r0, r6
 8000c06:	2864      	cmp	r0, #100	; 0x64
 8000c08:	f200 80f6 	bhi.w	8000df8 <HAL_RCC_OscConfig+0x258>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c0c:	682b      	ldr	r3, [r5, #0]
 8000c0e:	039b      	lsls	r3, r3, #14
 8000c10:	d4f6      	bmi.n	8000c00 <HAL_RCC_OscConfig+0x60>
 8000c12:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c14:	079f      	lsls	r7, r3, #30
 8000c16:	d528      	bpl.n	8000c6a <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000c18:	4a92      	ldr	r2, [pc, #584]	; (8000e64 <HAL_RCC_OscConfig+0x2c4>)
 8000c1a:	6891      	ldr	r1, [r2, #8]
 8000c1c:	f011 0f0c 	tst.w	r1, #12
 8000c20:	f000 8090 	beq.w	8000d44 <HAL_RCC_OscConfig+0x1a4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c24:	6891      	ldr	r1, [r2, #8]
 8000c26:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000c2a:	2908      	cmp	r1, #8
 8000c2c:	f000 8086 	beq.w	8000d3c <HAL_RCC_OscConfig+0x19c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000c30:	68e3      	ldr	r3, [r4, #12]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	f000 810f 	beq.w	8000e56 <HAL_RCC_OscConfig+0x2b6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c38:	4b8b      	ldr	r3, [pc, #556]	; (8000e68 <HAL_RCC_OscConfig+0x2c8>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c3a:	4d8a      	ldr	r5, [pc, #552]	; (8000e64 <HAL_RCC_OscConfig+0x2c4>)
        __HAL_RCC_HSI_ENABLE();
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000c40:	f7ff fc9c 	bl	800057c <HAL_GetTick>
 8000c44:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c46:	e005      	b.n	8000c54 <HAL_RCC_OscConfig+0xb4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c48:	f7ff fc98 	bl	800057c <HAL_GetTick>
 8000c4c:	1b80      	subs	r0, r0, r6
 8000c4e:	2802      	cmp	r0, #2
 8000c50:	f200 80d2 	bhi.w	8000df8 <HAL_RCC_OscConfig+0x258>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c54:	682b      	ldr	r3, [r5, #0]
 8000c56:	0798      	lsls	r0, r3, #30
 8000c58:	d5f6      	bpl.n	8000c48 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c5a:	682b      	ldr	r3, [r5, #0]
 8000c5c:	6922      	ldr	r2, [r4, #16]
 8000c5e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000c62:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000c66:	602b      	str	r3, [r5, #0]
 8000c68:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c6a:	071a      	lsls	r2, r3, #28
 8000c6c:	d452      	bmi.n	8000d14 <HAL_RCC_OscConfig+0x174>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c6e:	0758      	lsls	r0, r3, #29
 8000c70:	d530      	bpl.n	8000cd4 <HAL_RCC_OscConfig+0x134>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c72:	4a7c      	ldr	r2, [pc, #496]	; (8000e64 <HAL_RCC_OscConfig+0x2c4>)
 8000c74:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000c76:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 8000c7a:	d07e      	beq.n	8000d7a <HAL_RCC_OscConfig+0x1da>
    FlagStatus       pwrclkchanged = RESET;
 8000c7c:	2600      	movs	r6, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c7e:	4d7b      	ldr	r5, [pc, #492]	; (8000e6c <HAL_RCC_OscConfig+0x2cc>)
 8000c80:	682b      	ldr	r3, [r5, #0]
 8000c82:	05d9      	lsls	r1, r3, #23
 8000c84:	f140 80a8 	bpl.w	8000dd8 <HAL_RCC_OscConfig+0x238>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c88:	68a3      	ldr	r3, [r4, #8]
 8000c8a:	2b01      	cmp	r3, #1
 8000c8c:	f000 812e 	beq.w	8000eec <HAL_RCC_OscConfig+0x34c>
 8000c90:	2b05      	cmp	r3, #5
 8000c92:	f000 80c3 	beq.w	8000e1c <HAL_RCC_OscConfig+0x27c>
 8000c96:	4d73      	ldr	r5, [pc, #460]	; (8000e64 <HAL_RCC_OscConfig+0x2c4>)
 8000c98:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000c9a:	f022 0201 	bic.w	r2, r2, #1
 8000c9e:	672a      	str	r2, [r5, #112]	; 0x70
 8000ca0:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000ca2:	f022 0204 	bic.w	r2, r2, #4
 8000ca6:	672a      	str	r2, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	f040 80c0 	bne.w	8000e2e <HAL_RCC_OscConfig+0x28e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000cae:	f7ff fc65 	bl	800057c <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000cb2:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000cb6:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000cb8:	e006      	b.n	8000cc8 <HAL_RCC_OscConfig+0x128>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000cba:	f7ff fc5f 	bl	800057c <HAL_GetTick>
 8000cbe:	eba0 0008 	sub.w	r0, r0, r8
 8000cc2:	42b8      	cmp	r0, r7
 8000cc4:	f200 8098 	bhi.w	8000df8 <HAL_RCC_OscConfig+0x258>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000cc8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000cca:	0798      	lsls	r0, r3, #30
 8000ccc:	d4f5      	bmi.n	8000cba <HAL_RCC_OscConfig+0x11a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	f040 8112 	bne.w	8000ef8 <HAL_RCC_OscConfig+0x358>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000cd4:	69a0      	ldr	r0, [r4, #24]
 8000cd6:	b1c8      	cbz	r0, 8000d0c <HAL_RCC_OscConfig+0x16c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000cd8:	4d62      	ldr	r5, [pc, #392]	; (8000e64 <HAL_RCC_OscConfig+0x2c4>)
 8000cda:	68aa      	ldr	r2, [r5, #8]
 8000cdc:	f002 020c 	and.w	r2, r2, #12
 8000ce0:	2a08      	cmp	r2, #8
 8000ce2:	f000 80d9 	beq.w	8000e98 <HAL_RCC_OscConfig+0x2f8>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ce6:	4a62      	ldr	r2, [pc, #392]	; (8000e70 <HAL_RCC_OscConfig+0x2d0>)
 8000ce8:	2100      	movs	r1, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000cea:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000cec:	6011      	str	r1, [r2, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000cee:	f000 8109 	beq.w	8000f04 <HAL_RCC_OscConfig+0x364>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cf2:	f7ff fc43 	bl	800057c <HAL_GetTick>

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000cf6:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 8000cf8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000cfa:	e004      	b.n	8000d06 <HAL_RCC_OscConfig+0x166>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000cfc:	f7ff fc3e 	bl	800057c <HAL_GetTick>
 8000d00:	1b40      	subs	r0, r0, r5
 8000d02:	2802      	cmp	r0, #2
 8000d04:	d878      	bhi.n	8000df8 <HAL_RCC_OscConfig+0x258>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000d06:	6823      	ldr	r3, [r4, #0]
 8000d08:	019b      	lsls	r3, r3, #6
 8000d0a:	d4f7      	bmi.n	8000cfc <HAL_RCC_OscConfig+0x15c>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8000d0c:	2000      	movs	r0, #0
}
 8000d0e:	b002      	add	sp, #8
 8000d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000d14:	6963      	ldr	r3, [r4, #20]
 8000d16:	b303      	cbz	r3, 8000d5a <HAL_RCC_OscConfig+0x1ba>
      __HAL_RCC_LSI_ENABLE();
 8000d18:	4b56      	ldr	r3, [pc, #344]	; (8000e74 <HAL_RCC_OscConfig+0x2d4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d1a:	4d52      	ldr	r5, [pc, #328]	; (8000e64 <HAL_RCC_OscConfig+0x2c4>)
      __HAL_RCC_LSI_ENABLE();
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000d20:	f7ff fc2c 	bl	800057c <HAL_GetTick>
 8000d24:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d26:	e004      	b.n	8000d32 <HAL_RCC_OscConfig+0x192>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d28:	f7ff fc28 	bl	800057c <HAL_GetTick>
 8000d2c:	1b80      	subs	r0, r0, r6
 8000d2e:	2802      	cmp	r0, #2
 8000d30:	d862      	bhi.n	8000df8 <HAL_RCC_OscConfig+0x258>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d32:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000d34:	079b      	lsls	r3, r3, #30
 8000d36:	d5f7      	bpl.n	8000d28 <HAL_RCC_OscConfig+0x188>
 8000d38:	6823      	ldr	r3, [r4, #0]
 8000d3a:	e798      	b.n	8000c6e <HAL_RCC_OscConfig+0xce>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d3c:	6852      	ldr	r2, [r2, #4]
 8000d3e:	0256      	lsls	r6, r2, #9
 8000d40:	f53f af76 	bmi.w	8000c30 <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d44:	4a47      	ldr	r2, [pc, #284]	; (8000e64 <HAL_RCC_OscConfig+0x2c4>)
 8000d46:	6812      	ldr	r2, [r2, #0]
 8000d48:	0795      	lsls	r5, r2, #30
 8000d4a:	d522      	bpl.n	8000d92 <HAL_RCC_OscConfig+0x1f2>
 8000d4c:	68e2      	ldr	r2, [r4, #12]
 8000d4e:	2a01      	cmp	r2, #1
 8000d50:	d01f      	beq.n	8000d92 <HAL_RCC_OscConfig+0x1f2>
        return HAL_ERROR;
 8000d52:	2001      	movs	r0, #1
}
 8000d54:	b002      	add	sp, #8
 8000d56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8000d5a:	4a46      	ldr	r2, [pc, #280]	; (8000e74 <HAL_RCC_OscConfig+0x2d4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d5c:	4d41      	ldr	r5, [pc, #260]	; (8000e64 <HAL_RCC_OscConfig+0x2c4>)
      __HAL_RCC_LSI_DISABLE();
 8000d5e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000d60:	f7ff fc0c 	bl	800057c <HAL_GetTick>
 8000d64:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d66:	e004      	b.n	8000d72 <HAL_RCC_OscConfig+0x1d2>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d68:	f7ff fc08 	bl	800057c <HAL_GetTick>
 8000d6c:	1b80      	subs	r0, r0, r6
 8000d6e:	2802      	cmp	r0, #2
 8000d70:	d842      	bhi.n	8000df8 <HAL_RCC_OscConfig+0x258>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d72:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000d74:	079f      	lsls	r7, r3, #30
 8000d76:	d4f7      	bmi.n	8000d68 <HAL_RCC_OscConfig+0x1c8>
 8000d78:	e7de      	b.n	8000d38 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d7a:	9301      	str	r3, [sp, #4]
 8000d7c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000d7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d82:	6413      	str	r3, [r2, #64]	; 0x40
 8000d84:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d8a:	9301      	str	r3, [sp, #4]
 8000d8c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000d8e:	2601      	movs	r6, #1
 8000d90:	e775      	b.n	8000c7e <HAL_RCC_OscConfig+0xde>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d92:	4934      	ldr	r1, [pc, #208]	; (8000e64 <HAL_RCC_OscConfig+0x2c4>)
 8000d94:	6920      	ldr	r0, [r4, #16]
 8000d96:	680a      	ldr	r2, [r1, #0]
 8000d98:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000d9c:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8000da0:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000da2:	071a      	lsls	r2, r3, #28
 8000da4:	f57f af63 	bpl.w	8000c6e <HAL_RCC_OscConfig+0xce>
 8000da8:	e7b4      	b.n	8000d14 <HAL_RCC_OscConfig+0x174>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000daa:	4b2e      	ldr	r3, [pc, #184]	; (8000e64 <HAL_RCC_OscConfig+0x2c4>)
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000dba:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000dbc:	f7ff fbde 	bl	800057c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dc0:	4d28      	ldr	r5, [pc, #160]	; (8000e64 <HAL_RCC_OscConfig+0x2c4>)
        tickstart = HAL_GetTick();
 8000dc2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dc4:	e004      	b.n	8000dd0 <HAL_RCC_OscConfig+0x230>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000dc6:	f7ff fbd9 	bl	800057c <HAL_GetTick>
 8000dca:	1b80      	subs	r0, r0, r6
 8000dcc:	2864      	cmp	r0, #100	; 0x64
 8000dce:	d813      	bhi.n	8000df8 <HAL_RCC_OscConfig+0x258>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dd0:	682b      	ldr	r3, [r5, #0]
 8000dd2:	039a      	lsls	r2, r3, #14
 8000dd4:	d5f7      	bpl.n	8000dc6 <HAL_RCC_OscConfig+0x226>
 8000dd6:	e71c      	b.n	8000c12 <HAL_RCC_OscConfig+0x72>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000dd8:	682b      	ldr	r3, [r5, #0]
 8000dda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dde:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000de0:	f7ff fbcc 	bl	800057c <HAL_GetTick>
 8000de4:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000de6:	682b      	ldr	r3, [r5, #0]
 8000de8:	05da      	lsls	r2, r3, #23
 8000dea:	f53f af4d 	bmi.w	8000c88 <HAL_RCC_OscConfig+0xe8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000dee:	f7ff fbc5 	bl	800057c <HAL_GetTick>
 8000df2:	1bc0      	subs	r0, r0, r7
 8000df4:	2802      	cmp	r0, #2
 8000df6:	d9f6      	bls.n	8000de6 <HAL_RCC_OscConfig+0x246>
            return HAL_TIMEOUT;
 8000df8:	2003      	movs	r0, #3
}
 8000dfa:	b002      	add	sp, #8
 8000dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000e00:	684a      	ldr	r2, [r1, #4]
 8000e02:	0250      	lsls	r0, r2, #9
 8000e04:	f57f aee3 	bpl.w	8000bce <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e08:	4a16      	ldr	r2, [pc, #88]	; (8000e64 <HAL_RCC_OscConfig+0x2c4>)
 8000e0a:	6812      	ldr	r2, [r2, #0]
 8000e0c:	0391      	lsls	r1, r2, #14
 8000e0e:	f57f af01 	bpl.w	8000c14 <HAL_RCC_OscConfig+0x74>
 8000e12:	6862      	ldr	r2, [r4, #4]
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f47f aefd 	bne.w	8000c14 <HAL_RCC_OscConfig+0x74>
 8000e1a:	e79a      	b.n	8000d52 <HAL_RCC_OscConfig+0x1b2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e1c:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <HAL_RCC_OscConfig+0x2c4>)
 8000e1e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000e20:	f042 0204 	orr.w	r2, r2, #4
 8000e24:	671a      	str	r2, [r3, #112]	; 0x70
 8000e26:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000e28:	f042 0201 	orr.w	r2, r2, #1
 8000e2c:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000e2e:	f7ff fba5 	bl	800057c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e32:	4d0c      	ldr	r5, [pc, #48]	; (8000e64 <HAL_RCC_OscConfig+0x2c4>)
      tickstart = HAL_GetTick();
 8000e34:	4680      	mov	r8, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e36:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e3a:	e005      	b.n	8000e48 <HAL_RCC_OscConfig+0x2a8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e3c:	f7ff fb9e 	bl	800057c <HAL_GetTick>
 8000e40:	eba0 0008 	sub.w	r0, r0, r8
 8000e44:	42b8      	cmp	r0, r7
 8000e46:	d8d7      	bhi.n	8000df8 <HAL_RCC_OscConfig+0x258>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e48:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000e4a:	079b      	lsls	r3, r3, #30
 8000e4c:	d5f6      	bpl.n	8000e3c <HAL_RCC_OscConfig+0x29c>
    if(pwrclkchanged == SET)
 8000e4e:	2e00      	cmp	r6, #0
 8000e50:	f43f af40 	beq.w	8000cd4 <HAL_RCC_OscConfig+0x134>
 8000e54:	e050      	b.n	8000ef8 <HAL_RCC_OscConfig+0x358>
        __HAL_RCC_HSI_DISABLE();
 8000e56:	4a04      	ldr	r2, [pc, #16]	; (8000e68 <HAL_RCC_OscConfig+0x2c8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e58:	4d02      	ldr	r5, [pc, #8]	; (8000e64 <HAL_RCC_OscConfig+0x2c4>)
        __HAL_RCC_HSI_DISABLE();
 8000e5a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000e5c:	f7ff fb8e 	bl	800057c <HAL_GetTick>
 8000e60:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e62:	e00e      	b.n	8000e82 <HAL_RCC_OscConfig+0x2e2>
 8000e64:	40023800 	.word	0x40023800
 8000e68:	42470000 	.word	0x42470000
 8000e6c:	40007000 	.word	0x40007000
 8000e70:	42470060 	.word	0x42470060
 8000e74:	42470e80 	.word	0x42470e80
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e78:	f7ff fb80 	bl	800057c <HAL_GetTick>
 8000e7c:	1b80      	subs	r0, r0, r6
 8000e7e:	2802      	cmp	r0, #2
 8000e80:	d8ba      	bhi.n	8000df8 <HAL_RCC_OscConfig+0x258>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e82:	682b      	ldr	r3, [r5, #0]
 8000e84:	0799      	lsls	r1, r3, #30
 8000e86:	d4f7      	bmi.n	8000e78 <HAL_RCC_OscConfig+0x2d8>
 8000e88:	6823      	ldr	r3, [r4, #0]
 8000e8a:	e6ee      	b.n	8000c6a <HAL_RCC_OscConfig+0xca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e8c:	4a35      	ldr	r2, [pc, #212]	; (8000f64 <HAL_RCC_OscConfig+0x3c4>)
 8000e8e:	6813      	ldr	r3, [r2, #0]
 8000e90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e94:	6013      	str	r3, [r2, #0]
 8000e96:	e791      	b.n	8000dbc <HAL_RCC_OscConfig+0x21c>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000e98:	2801      	cmp	r0, #1
 8000e9a:	f43f af38 	beq.w	8000d0e <HAL_RCC_OscConfig+0x16e>
        pll_config = RCC->PLLCFGR;
 8000e9e:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000ea0:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ea2:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000ea6:	4291      	cmp	r1, r2
 8000ea8:	f47f af53 	bne.w	8000d52 <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000eac:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000eae:	f003 013f 	and.w	r1, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000eb2:	4291      	cmp	r1, r2
 8000eb4:	f47f af4d 	bne.w	8000d52 <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000eb8:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8000ebc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000ebe:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000ec0:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8000ec4:	f47f af45 	bne.w	8000d52 <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000ec8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000eca:	0852      	lsrs	r2, r2, #1
 8000ecc:	3a01      	subs	r2, #1
 8000ece:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000ed2:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8000ed6:	f47f af3c 	bne.w	8000d52 <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8000eda:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000edc:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000ee0:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
    return HAL_ERROR;
 8000ee4:	bf14      	ite	ne
 8000ee6:	2001      	movne	r0, #1
 8000ee8:	2000      	moveq	r0, #0
 8000eea:	e710      	b.n	8000d0e <HAL_RCC_OscConfig+0x16e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000eec:	4a1d      	ldr	r2, [pc, #116]	; (8000f64 <HAL_RCC_OscConfig+0x3c4>)
 8000eee:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8000ef0:	f043 0301 	orr.w	r3, r3, #1
 8000ef4:	6713      	str	r3, [r2, #112]	; 0x70
 8000ef6:	e79a      	b.n	8000e2e <HAL_RCC_OscConfig+0x28e>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ef8:	4a1a      	ldr	r2, [pc, #104]	; (8000f64 <HAL_RCC_OscConfig+0x3c4>)
 8000efa:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000efc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f00:	6413      	str	r3, [r2, #64]	; 0x40
 8000f02:	e6e7      	b.n	8000cd4 <HAL_RCC_OscConfig+0x134>
        tickstart = HAL_GetTick();
 8000f04:	f7ff fb3a 	bl	800057c <HAL_GetTick>
 8000f08:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f0a:	e005      	b.n	8000f18 <HAL_RCC_OscConfig+0x378>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f0c:	f7ff fb36 	bl	800057c <HAL_GetTick>
 8000f10:	1b80      	subs	r0, r0, r6
 8000f12:	2802      	cmp	r0, #2
 8000f14:	f63f af70 	bhi.w	8000df8 <HAL_RCC_OscConfig+0x258>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f18:	682b      	ldr	r3, [r5, #0]
 8000f1a:	0199      	lsls	r1, r3, #6
 8000f1c:	d4f6      	bmi.n	8000f0c <HAL_RCC_OscConfig+0x36c>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000f1e:	69e3      	ldr	r3, [r4, #28]
 8000f20:	6a27      	ldr	r7, [r4, #32]
 8000f22:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8000f24:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000f26:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8000f28:	490f      	ldr	r1, [pc, #60]	; (8000f68 <HAL_RCC_OscConfig+0x3c8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f2a:	4c0e      	ldr	r4, [pc, #56]	; (8000f64 <HAL_RCC_OscConfig+0x3c4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000f2c:	433b      	orrs	r3, r7
 8000f2e:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 8000f32:	0852      	lsrs	r2, r2, #1
 8000f34:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8000f38:	3a01      	subs	r2, #1
 8000f3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8000f3e:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000f40:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000f42:	600a      	str	r2, [r1, #0]
        tickstart = HAL_GetTick();
 8000f44:	f7ff fb1a 	bl	800057c <HAL_GetTick>
 8000f48:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f4a:	e005      	b.n	8000f58 <HAL_RCC_OscConfig+0x3b8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f4c:	f7ff fb16 	bl	800057c <HAL_GetTick>
 8000f50:	1b40      	subs	r0, r0, r5
 8000f52:	2802      	cmp	r0, #2
 8000f54:	f63f af50 	bhi.w	8000df8 <HAL_RCC_OscConfig+0x258>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f58:	6823      	ldr	r3, [r4, #0]
 8000f5a:	019a      	lsls	r2, r3, #6
 8000f5c:	d5f6      	bpl.n	8000f4c <HAL_RCC_OscConfig+0x3ac>
 8000f5e:	e6d5      	b.n	8000d0c <HAL_RCC_OscConfig+0x16c>
    return HAL_ERROR;
 8000f60:	2001      	movs	r0, #1
}
 8000f62:	4770      	bx	lr
 8000f64:	40023800 	.word	0x40023800
 8000f68:	42470060 	.word	0x42470060

08000f6c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000f6c:	4917      	ldr	r1, [pc, #92]	; (8000fcc <HAL_RCC_GetSysClockFreq+0x60>)
{
 8000f6e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000f70:	688b      	ldr	r3, [r1, #8]
 8000f72:	f003 030c 	and.w	r3, r3, #12
 8000f76:	2b04      	cmp	r3, #4
 8000f78:	d01b      	beq.n	8000fb2 <HAL_RCC_GetSysClockFreq+0x46>
 8000f7a:	2b08      	cmp	r3, #8
 8000f7c:	d117      	bne.n	8000fae <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000f7e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000f80:	684b      	ldr	r3, [r1, #4]
 8000f82:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000f86:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000f8a:	d114      	bne.n	8000fb6 <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f8c:	6849      	ldr	r1, [r1, #4]
 8000f8e:	4810      	ldr	r0, [pc, #64]	; (8000fd0 <HAL_RCC_GetSysClockFreq+0x64>)
 8000f90:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000f94:	fba1 0100 	umull	r0, r1, r1, r0
 8000f98:	f7ff f91e 	bl	80001d8 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000f9c:	4b0b      	ldr	r3, [pc, #44]	; (8000fcc <HAL_RCC_GetSysClockFreq+0x60>)
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8000fa8:	fbb0 f0f3 	udiv	r0, r0, r3
 8000fac:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8000fae:	4808      	ldr	r0, [pc, #32]	; (8000fd0 <HAL_RCC_GetSysClockFreq+0x64>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000fb0:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000fb2:	4808      	ldr	r0, [pc, #32]	; (8000fd4 <HAL_RCC_GetSysClockFreq+0x68>)
 8000fb4:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000fb6:	684b      	ldr	r3, [r1, #4]
 8000fb8:	4806      	ldr	r0, [pc, #24]	; (8000fd4 <HAL_RCC_GetSysClockFreq+0x68>)
 8000fba:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8000fbe:	fba3 0100 	umull	r0, r1, r3, r0
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	f7ff f908 	bl	80001d8 <__aeabi_uldivmod>
 8000fc8:	e7e8      	b.n	8000f9c <HAL_RCC_GetSysClockFreq+0x30>
 8000fca:	bf00      	nop
 8000fcc:	40023800 	.word	0x40023800
 8000fd0:	00f42400 	.word	0x00f42400
 8000fd4:	007a1200 	.word	0x007a1200

08000fd8 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8000fd8:	b160      	cbz	r0, 8000ff4 <HAL_RCC_ClockConfig+0x1c>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000fda:	4a49      	ldr	r2, [pc, #292]	; (8001100 <HAL_RCC_ClockConfig+0x128>)
 8000fdc:	6813      	ldr	r3, [r2, #0]
 8000fde:	f003 0307 	and.w	r3, r3, #7
 8000fe2:	428b      	cmp	r3, r1
 8000fe4:	d208      	bcs.n	8000ff8 <HAL_RCC_ClockConfig+0x20>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fe6:	b2cb      	uxtb	r3, r1
 8000fe8:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000fea:	6813      	ldr	r3, [r2, #0]
 8000fec:	f003 0307 	and.w	r3, r3, #7
 8000ff0:	4299      	cmp	r1, r3
 8000ff2:	d001      	beq.n	8000ff8 <HAL_RCC_ClockConfig+0x20>
    return HAL_ERROR;
 8000ff4:	2001      	movs	r0, #1
}
 8000ff6:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ff8:	6803      	ldr	r3, [r0, #0]
{
 8000ffa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ffe:	079d      	lsls	r5, r3, #30
 8001000:	d514      	bpl.n	800102c <HAL_RCC_ClockConfig+0x54>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001002:	075c      	lsls	r4, r3, #29
 8001004:	d504      	bpl.n	8001010 <HAL_RCC_ClockConfig+0x38>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001006:	4c3f      	ldr	r4, [pc, #252]	; (8001104 <HAL_RCC_ClockConfig+0x12c>)
 8001008:	68a2      	ldr	r2, [r4, #8]
 800100a:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 800100e:	60a2      	str	r2, [r4, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001010:	071a      	lsls	r2, r3, #28
 8001012:	d504      	bpl.n	800101e <HAL_RCC_ClockConfig+0x46>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001014:	4c3b      	ldr	r4, [pc, #236]	; (8001104 <HAL_RCC_ClockConfig+0x12c>)
 8001016:	68a2      	ldr	r2, [r4, #8]
 8001018:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 800101c:	60a2      	str	r2, [r4, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800101e:	4c39      	ldr	r4, [pc, #228]	; (8001104 <HAL_RCC_ClockConfig+0x12c>)
 8001020:	6885      	ldr	r5, [r0, #8]
 8001022:	68a2      	ldr	r2, [r4, #8]
 8001024:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001028:	432a      	orrs	r2, r5
 800102a:	60a2      	str	r2, [r4, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800102c:	07df      	lsls	r7, r3, #31
 800102e:	4604      	mov	r4, r0
 8001030:	460d      	mov	r5, r1
 8001032:	d522      	bpl.n	800107a <HAL_RCC_ClockConfig+0xa2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001034:	6842      	ldr	r2, [r0, #4]
 8001036:	2a01      	cmp	r2, #1
 8001038:	d05c      	beq.n	80010f4 <HAL_RCC_ClockConfig+0x11c>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800103a:	1e93      	subs	r3, r2, #2
 800103c:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800103e:	4b31      	ldr	r3, [pc, #196]	; (8001104 <HAL_RCC_ClockConfig+0x12c>)
 8001040:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001042:	d951      	bls.n	80010e8 <HAL_RCC_ClockConfig+0x110>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001044:	0799      	lsls	r1, r3, #30
 8001046:	d525      	bpl.n	8001094 <HAL_RCC_ClockConfig+0xbc>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001048:	4e2e      	ldr	r6, [pc, #184]	; (8001104 <HAL_RCC_ClockConfig+0x12c>)
 800104a:	68b3      	ldr	r3, [r6, #8]
 800104c:	f023 0303 	bic.w	r3, r3, #3
 8001050:	4313      	orrs	r3, r2
 8001052:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001054:	f7ff fa92 	bl	800057c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001058:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800105c:	4680      	mov	r8, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800105e:	e005      	b.n	800106c <HAL_RCC_ClockConfig+0x94>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001060:	f7ff fa8c 	bl	800057c <HAL_GetTick>
 8001064:	eba0 0008 	sub.w	r0, r0, r8
 8001068:	42b8      	cmp	r0, r7
 800106a:	d840      	bhi.n	80010ee <HAL_RCC_ClockConfig+0x116>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800106c:	68b3      	ldr	r3, [r6, #8]
 800106e:	6862      	ldr	r2, [r4, #4]
 8001070:	f003 030c 	and.w	r3, r3, #12
 8001074:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001078:	d1f2      	bne.n	8001060 <HAL_RCC_ClockConfig+0x88>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800107a:	4a21      	ldr	r2, [pc, #132]	; (8001100 <HAL_RCC_ClockConfig+0x128>)
 800107c:	6813      	ldr	r3, [r2, #0]
 800107e:	f003 0307 	and.w	r3, r3, #7
 8001082:	429d      	cmp	r5, r3
 8001084:	d209      	bcs.n	800109a <HAL_RCC_ClockConfig+0xc2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001086:	b2eb      	uxtb	r3, r5
 8001088:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800108a:	6813      	ldr	r3, [r2, #0]
 800108c:	f003 0307 	and.w	r3, r3, #7
 8001090:	429d      	cmp	r5, r3
 8001092:	d002      	beq.n	800109a <HAL_RCC_ClockConfig+0xc2>
    return HAL_ERROR;
 8001094:	2001      	movs	r0, #1
 8001096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800109a:	6823      	ldr	r3, [r4, #0]
 800109c:	075a      	lsls	r2, r3, #29
 800109e:	d506      	bpl.n	80010ae <HAL_RCC_ClockConfig+0xd6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80010a0:	4918      	ldr	r1, [pc, #96]	; (8001104 <HAL_RCC_ClockConfig+0x12c>)
 80010a2:	68e0      	ldr	r0, [r4, #12]
 80010a4:	688a      	ldr	r2, [r1, #8]
 80010a6:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 80010aa:	4302      	orrs	r2, r0
 80010ac:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010ae:	071b      	lsls	r3, r3, #28
 80010b0:	d507      	bpl.n	80010c2 <HAL_RCC_ClockConfig+0xea>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80010b2:	4a14      	ldr	r2, [pc, #80]	; (8001104 <HAL_RCC_ClockConfig+0x12c>)
 80010b4:	6921      	ldr	r1, [r4, #16]
 80010b6:	6893      	ldr	r3, [r2, #8]
 80010b8:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80010bc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80010c0:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80010c2:	f7ff ff53 	bl	8000f6c <HAL_RCC_GetSysClockFreq>
 80010c6:	4b0f      	ldr	r3, [pc, #60]	; (8001104 <HAL_RCC_ClockConfig+0x12c>)
 80010c8:	4c0f      	ldr	r4, [pc, #60]	; (8001108 <HAL_RCC_ClockConfig+0x130>)
 80010ca:	689b      	ldr	r3, [r3, #8]
  HAL_InitTick (uwTickPrio);
 80010cc:	490f      	ldr	r1, [pc, #60]	; (800110c <HAL_RCC_ClockConfig+0x134>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80010ce:	4a10      	ldr	r2, [pc, #64]	; (8001110 <HAL_RCC_ClockConfig+0x138>)
 80010d0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80010d4:	5ce3      	ldrb	r3, [r4, r3]
 80010d6:	fa20 f303 	lsr.w	r3, r0, r3
  HAL_InitTick (uwTickPrio);
 80010da:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80010dc:	6013      	str	r3, [r2, #0]
  HAL_InitTick (uwTickPrio);
 80010de:	f7ff fa03 	bl	80004e8 <HAL_InitTick>
  return HAL_OK;
 80010e2:	2000      	movs	r0, #0
 80010e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010e8:	0198      	lsls	r0, r3, #6
 80010ea:	d4ad      	bmi.n	8001048 <HAL_RCC_ClockConfig+0x70>
 80010ec:	e7d2      	b.n	8001094 <HAL_RCC_ClockConfig+0xbc>
        return HAL_TIMEOUT;
 80010ee:	2003      	movs	r0, #3
}
 80010f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010f4:	4b03      	ldr	r3, [pc, #12]	; (8001104 <HAL_RCC_ClockConfig+0x12c>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	039e      	lsls	r6, r3, #14
 80010fa:	d4a5      	bmi.n	8001048 <HAL_RCC_ClockConfig+0x70>
 80010fc:	e7ca      	b.n	8001094 <HAL_RCC_ClockConfig+0xbc>
 80010fe:	bf00      	nop
 8001100:	40023c00 	.word	0x40023c00
 8001104:	40023800 	.word	0x40023800
 8001108:	08003764 	.word	0x08003764
 800110c:	20000004 	.word	0x20000004
 8001110:	20000008 	.word	0x20000008

08001114 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001114:	4b04      	ldr	r3, [pc, #16]	; (8001128 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001116:	4a05      	ldr	r2, [pc, #20]	; (800112c <HAL_RCC_GetPCLK1Freq+0x18>)
 8001118:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800111a:	4905      	ldr	r1, [pc, #20]	; (8001130 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800111c:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001120:	6808      	ldr	r0, [r1, #0]
 8001122:	5cd3      	ldrb	r3, [r2, r3]
}
 8001124:	40d8      	lsrs	r0, r3
 8001126:	4770      	bx	lr
 8001128:	40023800 	.word	0x40023800
 800112c:	08003774 	.word	0x08003774
 8001130:	20000008 	.word	0x20000008

08001134 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001134:	4b04      	ldr	r3, [pc, #16]	; (8001148 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001136:	4a05      	ldr	r2, [pc, #20]	; (800114c <HAL_RCC_GetPCLK2Freq+0x18>)
 8001138:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800113a:	4905      	ldr	r1, [pc, #20]	; (8001150 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800113c:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001140:	6808      	ldr	r0, [r1, #0]
 8001142:	5cd3      	ldrb	r3, [r2, r3]
}
 8001144:	40d8      	lsrs	r0, r3
 8001146:	4770      	bx	lr
 8001148:	40023800 	.word	0x40023800
 800114c:	08003774 	.word	0x08003774
 8001150:	20000008 	.word	0x20000008

08001154 <HAL_SPI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001154:	2800      	cmp	r0, #0
 8001156:	d058      	beq.n	800120a <HAL_SPI_Init+0xb6>
{
 8001158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800115a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800115c:	2d00      	cmp	r5, #0
 800115e:	d045      	beq.n	80011ec <HAL_SPI_Init+0x98>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001160:	2300      	movs	r3, #0
 8001162:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001164:	6143      	str	r3, [r0, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001166:	f890 2051 	ldrb.w	r2, [r0, #81]	; 0x51
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800116a:	2600      	movs	r6, #0
 800116c:	4604      	mov	r4, r0
  if (hspi->State == HAL_SPI_STATE_RESET)
 800116e:	f002 01ff 	and.w	r1, r2, #255	; 0xff
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001172:	6286      	str	r6, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001174:	2a00      	cmp	r2, #0
 8001176:	d03f      	beq.n	80011f8 <HAL_SPI_Init+0xa4>
  __HAL_SPI_DISABLE(hspi);

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001178:	1d22      	adds	r2, r4, #4
 800117a:	ca8c      	ldmia	r2, {r2, r3, r7}
 800117c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001180:	f402 7282 	and.w	r2, r2, #260	; 0x104
 8001184:	6920      	ldr	r0, [r4, #16]
 8001186:	69a1      	ldr	r1, [r4, #24]
 8001188:	431a      	orrs	r2, r3
 800118a:	6963      	ldr	r3, [r4, #20]
 800118c:	f407 6700 	and.w	r7, r7, #2048	; 0x800
 8001190:	433a      	orrs	r2, r7
 8001192:	f000 0002 	and.w	r0, r0, #2
 8001196:	f003 0701 	and.w	r7, r3, #1
 800119a:	69e3      	ldr	r3, [r4, #28]
 800119c:	4302      	orrs	r2, r0
 800119e:	433a      	orrs	r2, r7
 80011a0:	f003 0738 	and.w	r7, r3, #56	; 0x38
 80011a4:	f401 7300 	and.w	r3, r1, #512	; 0x200
 80011a8:	4313      	orrs	r3, r2
  hspi->State = HAL_SPI_STATE_BUSY;
 80011aa:	2202      	movs	r2, #2
 80011ac:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80011b0:	6a20      	ldr	r0, [r4, #32]
  __HAL_SPI_DISABLE(hspi);
 80011b2:	6822      	ldr	r2, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80011b4:	433b      	orrs	r3, r7
 80011b6:	f000 0080 	and.w	r0, r0, #128	; 0x80
  __HAL_SPI_DISABLE(hspi);
 80011ba:	6817      	ldr	r7, [r2, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80011bc:	0c09      	lsrs	r1, r1, #16
 80011be:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80011c2:	4303      	orrs	r3, r0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80011c4:	f005 0510 	and.w	r5, r5, #16
 80011c8:	430d      	orrs	r5, r1
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80011ca:	4333      	orrs	r3, r6
  __HAL_SPI_DISABLE(hspi);
 80011cc:	f027 0740 	bic.w	r7, r7, #64	; 0x40
 80011d0:	6017      	str	r7, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80011d2:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80011d4:	6055      	str	r5, [r2, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80011d6:	69d3      	ldr	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80011d8:	2100      	movs	r1, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80011da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 80011de:	2501      	movs	r5, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80011e0:	61d3      	str	r3, [r2, #28]

  return HAL_OK;
 80011e2:	4608      	mov	r0, r1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80011e4:	6561      	str	r1, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80011e6:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
  return HAL_OK;
 80011ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80011ec:	6843      	ldr	r3, [r0, #4]
 80011ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80011f2:	d0b8      	beq.n	8001166 <HAL_SPI_Init+0x12>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011f4:	61c5      	str	r5, [r0, #28]
 80011f6:	e7b6      	b.n	8001166 <HAL_SPI_Init+0x12>
    hspi->Lock = HAL_UNLOCKED;
 80011f8:	f880 1050 	strb.w	r1, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 80011fc:	f001 fa48 	bl	8002690 <HAL_SPI_MspInit>
 8001200:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001202:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8001204:	f403 5600 	and.w	r6, r3, #8192	; 0x2000
 8001208:	e7b6      	b.n	8001178 <HAL_SPI_Init+0x24>
    return HAL_ERROR;
 800120a:	2001      	movs	r0, #1
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop

08001210 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001210:	2800      	cmp	r0, #0
 8001212:	d076      	beq.n	8001302 <HAL_TIM_Base_Init+0xf2>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001214:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 8001218:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800121a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800121e:	4604      	mov	r4, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d055      	beq.n	80012d0 <HAL_TIM_Base_Init+0xc0>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001224:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001226:	4938      	ldr	r1, [pc, #224]	; (8001308 <HAL_TIM_Base_Init+0xf8>)
  htim->State = HAL_TIM_STATE_BUSY;
 8001228:	2302      	movs	r3, #2
 800122a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800122e:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8001230:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001232:	d052      	beq.n	80012da <HAL_TIM_Base_Init+0xca>
 8001234:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8001238:	d038      	beq.n	80012ac <HAL_TIM_Base_Init+0x9c>
 800123a:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 800123e:	428a      	cmp	r2, r1
 8001240:	d034      	beq.n	80012ac <HAL_TIM_Base_Init+0x9c>
 8001242:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8001246:	428a      	cmp	r2, r1
 8001248:	d030      	beq.n	80012ac <HAL_TIM_Base_Init+0x9c>
 800124a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800124e:	428a      	cmp	r2, r1
 8001250:	d02c      	beq.n	80012ac <HAL_TIM_Base_Init+0x9c>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001252:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 8001256:	428a      	cmp	r2, r1
 8001258:	d02c      	beq.n	80012b4 <HAL_TIM_Base_Init+0xa4>
 800125a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800125e:	428a      	cmp	r2, r1
 8001260:	d028      	beq.n	80012b4 <HAL_TIM_Base_Init+0xa4>
 8001262:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8001266:	428a      	cmp	r2, r1
 8001268:	d024      	beq.n	80012b4 <HAL_TIM_Base_Init+0xa4>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800126a:	69a5      	ldr	r5, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800126c:	68e0      	ldr	r0, [r4, #12]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800126e:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001270:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001274:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8001276:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001278:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800127a:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800127c:	2301      	movs	r3, #1
 800127e:	6153      	str	r3, [r2, #20]
  return HAL_OK;
 8001280:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001282:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001286:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800128a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800128e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8001292:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001296:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800129a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800129e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80012a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80012a6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80012aa:	bd70      	pop	{r4, r5, r6, pc}
    tmpcr1 |= Structure->CounterMode;
 80012ac:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80012ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80012b2:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80012b4:	6926      	ldr	r6, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80012b6:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80012b8:	68e5      	ldr	r5, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 80012ba:	6861      	ldr	r1, [r4, #4]
    tmpcr1 &= ~TIM_CR1_CKD;
 80012bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80012c0:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80012c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80012c6:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 80012c8:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80012ca:	62d5      	str	r5, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80012cc:	6291      	str	r1, [r2, #40]	; 0x28
 80012ce:	e7d5      	b.n	800127c <HAL_TIM_Base_Init+0x6c>
    htim->Lock = HAL_UNLOCKED;
 80012d0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80012d4:	f002 f8ec 	bl	80034b0 <HAL_TIM_Base_MspInit>
 80012d8:	e7a4      	b.n	8001224 <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 80012da:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80012dc:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80012de:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80012e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80012e4:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 80012e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80012ea:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80012ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80012f0:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 80012f2:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80012f4:	68e3      	ldr	r3, [r4, #12]
 80012f6:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80012f8:	6863      	ldr	r3, [r4, #4]
 80012fa:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80012fc:	6963      	ldr	r3, [r4, #20]
 80012fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001300:	e7bc      	b.n	800127c <HAL_TIM_Base_Init+0x6c>
    return HAL_ERROR;
 8001302:	2001      	movs	r0, #1
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	40010000 	.word	0x40010000

0800130c <HAL_TIM_PWM_MspInit>:
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop

08001310 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8001310:	2800      	cmp	r0, #0
 8001312:	d076      	beq.n	8001402 <HAL_TIM_PWM_Init+0xf2>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001314:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 8001318:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800131a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800131e:	4604      	mov	r4, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d055      	beq.n	80013d0 <HAL_TIM_PWM_Init+0xc0>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001324:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001326:	4938      	ldr	r1, [pc, #224]	; (8001408 <HAL_TIM_PWM_Init+0xf8>)
  htim->State = HAL_TIM_STATE_BUSY;
 8001328:	2302      	movs	r3, #2
 800132a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800132e:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8001330:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001332:	d052      	beq.n	80013da <HAL_TIM_PWM_Init+0xca>
 8001334:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8001338:	d038      	beq.n	80013ac <HAL_TIM_PWM_Init+0x9c>
 800133a:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 800133e:	428a      	cmp	r2, r1
 8001340:	d034      	beq.n	80013ac <HAL_TIM_PWM_Init+0x9c>
 8001342:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8001346:	428a      	cmp	r2, r1
 8001348:	d030      	beq.n	80013ac <HAL_TIM_PWM_Init+0x9c>
 800134a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800134e:	428a      	cmp	r2, r1
 8001350:	d02c      	beq.n	80013ac <HAL_TIM_PWM_Init+0x9c>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001352:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 8001356:	428a      	cmp	r2, r1
 8001358:	d02c      	beq.n	80013b4 <HAL_TIM_PWM_Init+0xa4>
 800135a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800135e:	428a      	cmp	r2, r1
 8001360:	d028      	beq.n	80013b4 <HAL_TIM_PWM_Init+0xa4>
 8001362:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8001366:	428a      	cmp	r2, r1
 8001368:	d024      	beq.n	80013b4 <HAL_TIM_PWM_Init+0xa4>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800136a:	69a5      	ldr	r5, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800136c:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 800136e:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001370:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001374:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8001376:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001378:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800137a:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 800137c:	2301      	movs	r3, #1
 800137e:	6153      	str	r3, [r2, #20]
  return HAL_OK;
 8001380:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001382:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001386:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800138a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800138e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8001392:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001396:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800139a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800139e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80013a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80013a6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80013aa:	bd70      	pop	{r4, r5, r6, pc}
    tmpcr1 |= Structure->CounterMode;
 80013ac:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80013ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80013b2:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80013b4:	6926      	ldr	r6, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80013b6:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80013b8:	68e5      	ldr	r5, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 80013ba:	6861      	ldr	r1, [r4, #4]
    tmpcr1 &= ~TIM_CR1_CKD;
 80013bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80013c0:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80013c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80013c6:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 80013c8:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80013ca:	62d5      	str	r5, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80013cc:	6291      	str	r1, [r2, #40]	; 0x28
 80013ce:	e7d5      	b.n	800137c <HAL_TIM_PWM_Init+0x6c>
    htim->Lock = HAL_UNLOCKED;
 80013d0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80013d4:	f7ff ff9a 	bl	800130c <HAL_TIM_PWM_MspInit>
 80013d8:	e7a4      	b.n	8001324 <HAL_TIM_PWM_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 80013da:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80013dc:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80013de:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80013e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80013e4:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 80013e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80013ea:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80013ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80013f0:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 80013f2:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80013f4:	68e3      	ldr	r3, [r4, #12]
 80013f6:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80013f8:	6863      	ldr	r3, [r4, #4]
 80013fa:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80013fc:	6963      	ldr	r3, [r4, #20]
 80013fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001400:	e7bc      	b.n	800137c <HAL_TIM_PWM_Init+0x6c>
    return HAL_ERROR;
 8001402:	2001      	movs	r0, #1
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	40010000 	.word	0x40010000

0800140c <HAL_TIM_PWM_Start>:
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800140c:	bb89      	cbnz	r1, 8001472 <HAL_TIM_PWM_Start+0x66>
 800140e:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8001412:	2b01      	cmp	r3, #1
 8001414:	d139      	bne.n	800148a <HAL_TIM_PWM_Start+0x7e>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001416:	2302      	movs	r3, #2
 8001418:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800141c:	6803      	ldr	r3, [r0, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800141e:	2201      	movs	r2, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001420:	6a18      	ldr	r0, [r3, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001422:	f001 011f 	and.w	r1, r1, #31
 8001426:	fa02 f101 	lsl.w	r1, r2, r1
  TIMx->CCER &= ~tmp;
 800142a:	ea20 0001 	bic.w	r0, r0, r1
{
 800142e:	b410      	push	{r4}
  TIMx->CCER &= ~tmp;
 8001430:	6218      	str	r0, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001432:	6a1a      	ldr	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001434:	4c24      	ldr	r4, [pc, #144]	; (80014c8 <HAL_TIM_PWM_Start+0xbc>)
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001436:	4311      	orrs	r1, r2
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001438:	42a3      	cmp	r3, r4
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800143a:	6219      	str	r1, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800143c:	d027      	beq.n	800148e <HAL_TIM_PWM_Start+0x82>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800143e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001442:	d028      	beq.n	8001496 <HAL_TIM_PWM_Start+0x8a>
 8001444:	4a21      	ldr	r2, [pc, #132]	; (80014cc <HAL_TIM_PWM_Start+0xc0>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d025      	beq.n	8001496 <HAL_TIM_PWM_Start+0x8a>
 800144a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800144e:	4293      	cmp	r3, r2
 8001450:	d021      	beq.n	8001496 <HAL_TIM_PWM_Start+0x8a>
 8001452:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001456:	4293      	cmp	r3, r2
 8001458:	d01d      	beq.n	8001496 <HAL_TIM_PWM_Start+0x8a>
 800145a:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800145e:	4293      	cmp	r3, r2
 8001460:	d019      	beq.n	8001496 <HAL_TIM_PWM_Start+0x8a>
    __HAL_TIM_ENABLE(htim);
 8001462:	681a      	ldr	r2, [r3, #0]
}
 8001464:	f85d 4b04 	ldr.w	r4, [sp], #4
    __HAL_TIM_ENABLE(htim);
 8001468:	f042 0201 	orr.w	r2, r2, #1
  return HAL_OK;
 800146c:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 800146e:	601a      	str	r2, [r3, #0]
}
 8001470:	4770      	bx	lr
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001472:	2904      	cmp	r1, #4
 8001474:	d018      	beq.n	80014a8 <HAL_TIM_PWM_Start+0x9c>
 8001476:	2908      	cmp	r1, #8
 8001478:	d01e      	beq.n	80014b8 <HAL_TIM_PWM_Start+0xac>
 800147a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800147e:	2b01      	cmp	r3, #1
 8001480:	d103      	bne.n	800148a <HAL_TIM_PWM_Start+0x7e>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001482:	2302      	movs	r3, #2
 8001484:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8001488:	e7c8      	b.n	800141c <HAL_TIM_PWM_Start+0x10>
    return HAL_ERROR;
 800148a:	2001      	movs	r0, #1
 800148c:	4770      	bx	lr
    __HAL_TIM_MOE_ENABLE(htim);
 800148e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001490:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001494:	645a      	str	r2, [r3, #68]	; 0x44
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001496:	689a      	ldr	r2, [r3, #8]
 8001498:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800149c:	2a06      	cmp	r2, #6
 800149e:	d1e0      	bne.n	8001462 <HAL_TIM_PWM_Start+0x56>
  return HAL_OK;
 80014a0:	2000      	movs	r0, #0
}
 80014a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80014a6:	4770      	bx	lr
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80014a8:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d1ec      	bne.n	800148a <HAL_TIM_PWM_Start+0x7e>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80014b0:	2302      	movs	r3, #2
 80014b2:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 80014b6:	e7b1      	b.n	800141c <HAL_TIM_PWM_Start+0x10>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80014b8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d1e4      	bne.n	800148a <HAL_TIM_PWM_Start+0x7e>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80014c0:	2302      	movs	r3, #2
 80014c2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 80014c6:	e7a9      	b.n	800141c <HAL_TIM_PWM_Start+0x10>
 80014c8:	40010000 	.word	0x40010000
 80014cc:	40000400 	.word	0x40000400

080014d0 <HAL_TIM_PWM_Stop>:
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80014d0:	6803      	ldr	r3, [r0, #0]
{
 80014d2:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~tmp;
 80014d4:	6a1a      	ldr	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80014d6:	4d21      	ldr	r5, [pc, #132]	; (800155c <HAL_TIM_PWM_Stop+0x8c>)
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80014d8:	f001 061f 	and.w	r6, r1, #31
 80014dc:	2401      	movs	r4, #1
 80014de:	40b4      	lsls	r4, r6
  TIMx->CCER &= ~tmp;
 80014e0:	ea22 0204 	bic.w	r2, r2, r4
 80014e4:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80014e6:	6a1a      	ldr	r2, [r3, #32]
 80014e8:	621a      	str	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80014ea:	42ab      	cmp	r3, r5
 80014ec:	d027      	beq.n	800153e <HAL_TIM_PWM_Stop+0x6e>
  __HAL_TIM_DISABLE(htim);
 80014ee:	6a1c      	ldr	r4, [r3, #32]
 80014f0:	f241 1211 	movw	r2, #4369	; 0x1111
 80014f4:	4214      	tst	r4, r2
 80014f6:	d104      	bne.n	8001502 <HAL_TIM_PWM_Stop+0x32>
 80014f8:	6a1c      	ldr	r4, [r3, #32]
 80014fa:	f240 4244 	movw	r2, #1092	; 0x444
 80014fe:	4214      	tst	r4, r2
 8001500:	d00c      	beq.n	800151c <HAL_TIM_PWM_Stop+0x4c>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8001502:	2301      	movs	r3, #1
 8001504:	b189      	cbz	r1, 800152a <HAL_TIM_PWM_Stop+0x5a>
 8001506:	2904      	cmp	r1, #4
 8001508:	d014      	beq.n	8001534 <HAL_TIM_PWM_Stop+0x64>
 800150a:	2908      	cmp	r1, #8
 800150c:	bf0c      	ite	eq
 800150e:	f880 3040 	strbeq.w	r3, [r0, #64]	; 0x40
 8001512:	f880 3041 	strbne.w	r3, [r0, #65]	; 0x41
}
 8001516:	bc70      	pop	{r4, r5, r6}
 8001518:	2000      	movs	r0, #0
 800151a:	4770      	bx	lr
  __HAL_TIM_DISABLE(htim);
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	f022 0201 	bic.w	r2, r2, #1
 8001522:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8001524:	2301      	movs	r3, #1
 8001526:	2900      	cmp	r1, #0
 8001528:	d1ed      	bne.n	8001506 <HAL_TIM_PWM_Stop+0x36>
 800152a:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
}
 800152e:	bc70      	pop	{r4, r5, r6}
 8001530:	2000      	movs	r0, #0
 8001532:	4770      	bx	lr
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8001534:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
}
 8001538:	bc70      	pop	{r4, r5, r6}
 800153a:	2000      	movs	r0, #0
 800153c:	4770      	bx	lr
    __HAL_TIM_MOE_DISABLE(htim);
 800153e:	6a1c      	ldr	r4, [r3, #32]
 8001540:	f241 1211 	movw	r2, #4369	; 0x1111
 8001544:	4214      	tst	r4, r2
 8001546:	d1d2      	bne.n	80014ee <HAL_TIM_PWM_Stop+0x1e>
 8001548:	6a1c      	ldr	r4, [r3, #32]
 800154a:	f240 4244 	movw	r2, #1092	; 0x444
 800154e:	4214      	tst	r4, r2
 8001550:	d1cd      	bne.n	80014ee <HAL_TIM_PWM_Stop+0x1e>
 8001552:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001554:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001558:	645a      	str	r2, [r3, #68]	; 0x44
 800155a:	e7c8      	b.n	80014ee <HAL_TIM_PWM_Stop+0x1e>
 800155c:	40010000 	.word	0x40010000

08001560 <HAL_TIM_PWM_ConfigChannel>:
{
 8001560:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8001562:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
 8001566:	2801      	cmp	r0, #1
 8001568:	d015      	beq.n	8001596 <HAL_TIM_PWM_ConfigChannel+0x36>
 800156a:	2001      	movs	r0, #1
{
 800156c:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 800156e:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  switch (Channel)
 8001572:	2a0c      	cmp	r2, #12
 8001574:	f200 80cd 	bhi.w	8001712 <HAL_TIM_PWM_ConfigChannel+0x1b2>
 8001578:	e8df f012 	tbh	[pc, r2, lsl #1]
 800157c:	00cb003f 	.word	0x00cb003f
 8001580:	00cb00cb 	.word	0x00cb00cb
 8001584:	00cb006e 	.word	0x00cb006e
 8001588:	00cb00cb 	.word	0x00cb00cb
 800158c:	00cb009d 	.word	0x00cb009d
 8001590:	00cb00cb 	.word	0x00cb00cb
 8001594:	000f      	.short	0x000f
  __HAL_LOCK(htim);
 8001596:	2002      	movs	r0, #2
 8001598:	4770      	bx	lr
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800159a:	681a      	ldr	r2, [r3, #0]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800159c:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800159e:	6a15      	ldr	r5, [r2, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80015a0:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80015a2:	f8df e1d8 	ldr.w	lr, [pc, #472]	; 800177c <HAL_TIM_PWM_ConfigChannel+0x21c>
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80015a6:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
 80015aa:	6215      	str	r5, [r2, #32]
  tmpccer = TIMx->CCER;
 80015ac:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 80015ae:	f8d2 c004 	ldr.w	ip, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 80015b2:	69d4      	ldr	r4, [r2, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 80015b4:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80015b8:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80015bc:	4572      	cmp	r2, lr
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80015be:	ea40 3007 	orr.w	r0, r0, r7, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80015c2:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80015c6:	f000 80a6 	beq.w	8001716 <HAL_TIM_PWM_ConfigChannel+0x1b6>
  TIMx->CCR4 = OC_Config->Pulse;
 80015ca:	684d      	ldr	r5, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80015cc:	f8c2 c004 	str.w	ip, [r2, #4]
  TIMx->CCMR2 = tmpccmrx;
 80015d0:	61d4      	str	r4, [r2, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 80015d2:	6415      	str	r5, [r2, #64]	; 0x40
  TIMx->CCER = tmpccer;
 80015d4:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80015d6:	69d0      	ldr	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80015d8:	690c      	ldr	r4, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80015da:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 80015de:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80015e0:	69d0      	ldr	r0, [r2, #28]
 80015e2:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
 80015e6:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80015e8:	69d1      	ldr	r1, [r2, #28]
 80015ea:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
 80015ee:	61d1      	str	r1, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80015f0:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 80015f2:	2200      	movs	r2, #0
 80015f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  return status;
 80015f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80015fa:	681a      	ldr	r2, [r3, #0]
  tmpccer |= OC_Config->OCPolarity;
 80015fc:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001600:	6a15      	ldr	r5, [r2, #32]
  tmpccmrx |= OC_Config->OCMode;
 8001602:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001604:	4e5d      	ldr	r6, [pc, #372]	; (800177c <HAL_TIM_PWM_ConfigChannel+0x21c>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001606:	f025 0501 	bic.w	r5, r5, #1
 800160a:	6215      	str	r5, [r2, #32]
  tmpccer = TIMx->CCER;
 800160c:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 800160e:	f8d2 e004 	ldr.w	lr, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 8001612:	6994      	ldr	r4, [r2, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 8001614:	f020 0002 	bic.w	r0, r0, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001618:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800161c:	42b2      	cmp	r2, r6
  tmpccer |= OC_Config->OCPolarity;
 800161e:	ea40 000c 	orr.w	r0, r0, ip
  tmpccmrx |= OC_Config->OCMode;
 8001622:	ea44 0407 	orr.w	r4, r4, r7
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001626:	f000 809a 	beq.w	800175e <HAL_TIM_PWM_ConfigChannel+0x1fe>
  TIMx->CCR1 = OC_Config->Pulse;
 800162a:	684d      	ldr	r5, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800162c:	f8c2 e004 	str.w	lr, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001630:	6194      	str	r4, [r2, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8001632:	6355      	str	r5, [r2, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8001634:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001636:	6990      	ldr	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001638:	690c      	ldr	r4, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800163a:	f040 0008 	orr.w	r0, r0, #8
 800163e:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001640:	6990      	ldr	r0, [r2, #24]
 8001642:	f020 0004 	bic.w	r0, r0, #4
 8001646:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001648:	6991      	ldr	r1, [r2, #24]
 800164a:	4321      	orrs	r1, r4
 800164c:	6191      	str	r1, [r2, #24]
  __HAL_UNLOCK(htim);
 800164e:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001650:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 8001652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  return status;
 8001656:	bdf0      	pop	{r4, r5, r6, r7, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001658:	681a      	ldr	r2, [r3, #0]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800165a:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800165c:	6a15      	ldr	r5, [r2, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800165e:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001660:	f8df c118 	ldr.w	ip, [pc, #280]	; 800177c <HAL_TIM_PWM_ConfigChannel+0x21c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001664:	f025 0510 	bic.w	r5, r5, #16
 8001668:	6215      	str	r5, [r2, #32]
  tmpccer = TIMx->CCER;
 800166a:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 800166c:	f8d2 e004 	ldr.w	lr, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 8001670:	6994      	ldr	r4, [r2, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 8001672:	f020 0020 	bic.w	r0, r0, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001676:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800167a:	4562      	cmp	r2, ip
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800167c:	ea40 1007 	orr.w	r0, r0, r7, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001680:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001684:	d05c      	beq.n	8001740 <HAL_TIM_PWM_ConfigChannel+0x1e0>
  TIMx->CCR2 = OC_Config->Pulse;
 8001686:	684d      	ldr	r5, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8001688:	f8c2 e004 	str.w	lr, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 800168c:	6194      	str	r4, [r2, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800168e:	6395      	str	r5, [r2, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8001690:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001692:	6990      	ldr	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001694:	690c      	ldr	r4, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001696:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 800169a:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800169c:	6990      	ldr	r0, [r2, #24]
 800169e:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
 80016a2:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80016a4:	6991      	ldr	r1, [r2, #24]
 80016a6:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
 80016aa:	6191      	str	r1, [r2, #24]
  __HAL_UNLOCK(htim);
 80016ac:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 80016ae:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 80016b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  return status;
 80016b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80016b6:	681a      	ldr	r2, [r3, #0]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80016b8:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80016ba:	6a15      	ldr	r5, [r2, #32]
  tmpccmrx |= OC_Config->OCMode;
 80016bc:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80016be:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 800177c <HAL_TIM_PWM_ConfigChannel+0x21c>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80016c2:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 80016c6:	6215      	str	r5, [r2, #32]
  tmpccer = TIMx->CCER;
 80016c8:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 80016ca:	f8d2 e004 	ldr.w	lr, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 80016ce:	69d4      	ldr	r4, [r2, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 80016d0:	f420 7000 	bic.w	r0, r0, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80016d4:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80016d8:	4562      	cmp	r2, ip
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80016da:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 80016de:	ea44 0406 	orr.w	r4, r4, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80016e2:	d01e      	beq.n	8001722 <HAL_TIM_PWM_ConfigChannel+0x1c2>
  TIMx->CCR3 = OC_Config->Pulse;
 80016e4:	684d      	ldr	r5, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80016e6:	f8c2 e004 	str.w	lr, [r2, #4]
  TIMx->CCMR2 = tmpccmrx;
 80016ea:	61d4      	str	r4, [r2, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80016ec:	63d5      	str	r5, [r2, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 80016ee:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80016f0:	69d0      	ldr	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80016f2:	690c      	ldr	r4, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80016f4:	f040 0008 	orr.w	r0, r0, #8
 80016f8:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80016fa:	69d0      	ldr	r0, [r2, #28]
 80016fc:	f020 0004 	bic.w	r0, r0, #4
 8001700:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001702:	69d1      	ldr	r1, [r2, #28]
 8001704:	4321      	orrs	r1, r4
 8001706:	61d1      	str	r1, [r2, #28]
  __HAL_UNLOCK(htim);
 8001708:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 800170a:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 800170c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  return status;
 8001710:	bdf0      	pop	{r4, r5, r6, r7, pc}
      status = HAL_ERROR;
 8001712:	2001      	movs	r0, #1
 8001714:	e76d      	b.n	80015f2 <HAL_TIM_PWM_ConfigChannel+0x92>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001716:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001718:	f42c 4c80 	bic.w	ip, ip, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800171c:	ea4c 1c85 	orr.w	ip, ip, r5, lsl #6
 8001720:	e753      	b.n	80015ca <HAL_TIM_PWM_ConfigChannel+0x6a>
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001722:	694f      	ldr	r7, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001724:	698d      	ldr	r5, [r1, #24]
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001726:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8001728:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800172c:	f42e 5e40 	bic.w	lr, lr, #12288	; 0x3000
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001730:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001734:	433d      	orrs	r5, r7
    tmpccer &= ~TIM_CCER_CC3NE;
 8001736:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800173a:	ea4e 1e05 	orr.w	lr, lr, r5, lsl #4
 800173e:	e7d1      	b.n	80016e4 <HAL_TIM_PWM_ConfigChannel+0x184>
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001740:	694f      	ldr	r7, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001742:	698d      	ldr	r5, [r1, #24]
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001744:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8001746:	f020 0080 	bic.w	r0, r0, #128	; 0x80
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800174a:	f42e 6e40 	bic.w	lr, lr, #3072	; 0xc00
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800174e:	ea40 1006 	orr.w	r0, r0, r6, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001752:	433d      	orrs	r5, r7
    tmpccer &= ~TIM_CCER_CC2NE;
 8001754:	f020 0040 	bic.w	r0, r0, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001758:	ea4e 0e85 	orr.w	lr, lr, r5, lsl #2
 800175c:	e793      	b.n	8001686 <HAL_TIM_PWM_ConfigChannel+0x126>
    tmpccer |= OC_Config->OCNPolarity;
 800175e:	68cf      	ldr	r7, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 8001760:	694d      	ldr	r5, [r1, #20]
 8001762:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 8001764:	f020 0008 	bic.w	r0, r0, #8
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001768:	f42e 7e40 	bic.w	lr, lr, #768	; 0x300
    tmpccer |= OC_Config->OCNPolarity;
 800176c:	4338      	orrs	r0, r7
    tmpcr2 |= OC_Config->OCNIdleState;
 800176e:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8001770:	f020 0004 	bic.w	r0, r0, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001774:	ea45 0e0e 	orr.w	lr, r5, lr
 8001778:	e757      	b.n	800162a <HAL_TIM_PWM_ConfigChannel+0xca>
 800177a:	bf00      	nop
 800177c:	40010000 	.word	0x40010000

08001780 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001780:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8001784:	2a01      	cmp	r2, #1
 8001786:	d03a      	beq.n	80017fe <HAL_TIM_ConfigClockSource+0x7e>
 8001788:	4603      	mov	r3, r0
  htim->State = HAL_TIM_STATE_BUSY;
 800178a:	2002      	movs	r0, #2
  tmpsmcr = htim->Instance->SMCR;
 800178c:	681a      	ldr	r2, [r3, #0]
{
 800178e:	b470      	push	{r4, r5, r6}
  htim->State = HAL_TIM_STATE_BUSY;
 8001790:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001794:	6890      	ldr	r0, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8001796:	680c      	ldr	r4, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001798:	f420 407f 	bic.w	r0, r0, #65280	; 0xff00
 800179c:	f020 0077 	bic.w	r0, r0, #119	; 0x77
  __HAL_LOCK(htim);
 80017a0:	2501      	movs	r5, #1
  switch (sClockSourceConfig->ClockSource)
 80017a2:	2c40      	cmp	r4, #64	; 0x40
  __HAL_LOCK(htim);
 80017a4:	f883 503c 	strb.w	r5, [r3, #60]	; 0x3c
  htim->Instance->SMCR = tmpsmcr;
 80017a8:	6090      	str	r0, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80017aa:	d042      	beq.n	8001832 <HAL_TIM_ConfigClockSource+0xb2>
 80017ac:	d95a      	bls.n	8001864 <HAL_TIM_ConfigClockSource+0xe4>
 80017ae:	2c70      	cmp	r4, #112	; 0x70
 80017b0:	d06e      	beq.n	8001890 <HAL_TIM_ConfigClockSource+0x110>
 80017b2:	d826      	bhi.n	8001802 <HAL_TIM_ConfigClockSource+0x82>
 80017b4:	2c50      	cmp	r4, #80	; 0x50
 80017b6:	d07d      	beq.n	80018b4 <HAL_TIM_ConfigClockSource+0x134>
 80017b8:	2c60      	cmp	r4, #96	; 0x60
 80017ba:	d167      	bne.n	800188c <HAL_TIM_ConfigClockSource+0x10c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80017bc:	6a14      	ldr	r4, [r2, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80017be:	684d      	ldr	r5, [r1, #4]
 80017c0:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80017c2:	f024 0410 	bic.w	r4, r4, #16
 80017c6:	6214      	str	r4, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 80017c8:	6990      	ldr	r0, [r2, #24]
  tmpccer = TIMx->CCER;
 80017ca:	6a11      	ldr	r1, [r2, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80017cc:	f420 4070 	bic.w	r0, r0, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80017d0:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80017d4:	ea40 3006 	orr.w	r0, r0, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 80017d8:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 80017dc:	6190      	str	r0, [r2, #24]
  TIMx->CCER = tmpccer;
 80017de:	6211      	str	r1, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 80017e0:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80017e2:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80017e6:	f041 0167 	orr.w	r1, r1, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 80017ea:	6091      	str	r1, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80017ec:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80017ee:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 80017f0:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 80017f2:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80017f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80017fa:	bc70      	pop	{r4, r5, r6}
 80017fc:	4770      	bx	lr
  __HAL_LOCK(htim);
 80017fe:	2002      	movs	r0, #2
 8001800:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8001802:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8001806:	d03d      	beq.n	8001884 <HAL_TIM_ConfigClockSource+0x104>
 8001808:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 800180c:	d13e      	bne.n	800188c <HAL_TIM_ConfigClockSource+0x10c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800180e:	6888      	ldr	r0, [r1, #8]
 8001810:	684e      	ldr	r6, [r1, #4]
 8001812:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8001814:	6894      	ldr	r4, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001816:	ea40 0106 	orr.w	r1, r0, r6
 800181a:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800181e:	f424 407f 	bic.w	r0, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001822:	4301      	orrs	r1, r0
  TIMx->SMCR = tmpsmcr;
 8001824:	6091      	str	r1, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001826:	6891      	ldr	r1, [r2, #8]
 8001828:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800182c:	6091      	str	r1, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800182e:	2000      	movs	r0, #0
      break;
 8001830:	e7dd      	b.n	80017ee <HAL_TIM_ConfigClockSource+0x6e>
  tmpccer = TIMx->CCER;
 8001832:	6a14      	ldr	r4, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001834:	6a15      	ldr	r5, [r2, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001836:	6848      	ldr	r0, [r1, #4]
 8001838:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800183a:	f025 0501 	bic.w	r5, r5, #1
 800183e:	6215      	str	r5, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001840:	6991      	ldr	r1, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001842:	f024 040a 	bic.w	r4, r4, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001846:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 800184a:	4320      	orrs	r0, r4
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800184c:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001850:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 8001852:	6210      	str	r0, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8001854:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001856:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800185a:	f041 0147 	orr.w	r1, r1, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 800185e:	6091      	str	r1, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001860:	2000      	movs	r0, #0
 8001862:	e7c4      	b.n	80017ee <HAL_TIM_ConfigClockSource+0x6e>
  switch (sClockSourceConfig->ClockSource)
 8001864:	2c10      	cmp	r4, #16
 8001866:	d004      	beq.n	8001872 <HAL_TIM_ConfigClockSource+0xf2>
 8001868:	d90e      	bls.n	8001888 <HAL_TIM_ConfigClockSource+0x108>
 800186a:	2c20      	cmp	r4, #32
 800186c:	d001      	beq.n	8001872 <HAL_TIM_ConfigClockSource+0xf2>
 800186e:	2c30      	cmp	r4, #48	; 0x30
 8001870:	d10c      	bne.n	800188c <HAL_TIM_ConfigClockSource+0x10c>
  tmpsmcr = TIMx->SMCR;
 8001872:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001874:	f044 0407 	orr.w	r4, r4, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8001878:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800187c:	430c      	orrs	r4, r1
  TIMx->SMCR = tmpsmcr;
 800187e:	6094      	str	r4, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001880:	2000      	movs	r0, #0
 8001882:	e7b4      	b.n	80017ee <HAL_TIM_ConfigClockSource+0x6e>
 8001884:	2000      	movs	r0, #0
 8001886:	e7b2      	b.n	80017ee <HAL_TIM_ConfigClockSource+0x6e>
  switch (sClockSourceConfig->ClockSource)
 8001888:	2c00      	cmp	r4, #0
 800188a:	d0f2      	beq.n	8001872 <HAL_TIM_ConfigClockSource+0xf2>
      status = HAL_ERROR;
 800188c:	2001      	movs	r0, #1
 800188e:	e7ae      	b.n	80017ee <HAL_TIM_ConfigClockSource+0x6e>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001890:	6888      	ldr	r0, [r1, #8]
 8001892:	684e      	ldr	r6, [r1, #4]
 8001894:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8001896:	6894      	ldr	r4, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001898:	ea40 0106 	orr.w	r1, r0, r6
 800189c:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80018a0:	f424 407f 	bic.w	r0, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80018a4:	4301      	orrs	r1, r0
  TIMx->SMCR = tmpsmcr;
 80018a6:	6091      	str	r1, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 80018a8:	6891      	ldr	r1, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80018aa:	f041 0177 	orr.w	r1, r1, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 80018ae:	6091      	str	r1, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80018b0:	2000      	movs	r0, #0
      break;
 80018b2:	e79c      	b.n	80017ee <HAL_TIM_ConfigClockSource+0x6e>
  tmpccer = TIMx->CCER;
 80018b4:	6a14      	ldr	r4, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80018b6:	6a15      	ldr	r5, [r2, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80018b8:	6848      	ldr	r0, [r1, #4]
 80018ba:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80018bc:	f025 0501 	bic.w	r5, r5, #1
 80018c0:	6215      	str	r5, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 80018c2:	6991      	ldr	r1, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80018c4:	f024 040a 	bic.w	r4, r4, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80018c8:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 80018cc:	4320      	orrs	r0, r4
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80018ce:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80018d2:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 80018d4:	6210      	str	r0, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 80018d6:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80018d8:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80018dc:	f041 0157 	orr.w	r1, r1, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80018e0:	6091      	str	r1, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80018e2:	2000      	movs	r0, #0
 80018e4:	e783      	b.n	80017ee <HAL_TIM_ConfigClockSource+0x6e>
 80018e6:	bf00      	nop

080018e8 <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 80018e8:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80018ec:	2a01      	cmp	r2, #1
 80018ee:	d101      	bne.n	80018f4 <HAL_TIM_SlaveConfigSynchro+0xc>
 80018f0:	2002      	movs	r0, #2
 80018f2:	4770      	bx	lr
 80018f4:	4603      	mov	r3, r0
  htim->State = HAL_TIM_STATE_BUSY;
 80018f6:	2202      	movs	r2, #2
  tmpsmcr = htim->Instance->SMCR;
 80018f8:	6800      	ldr	r0, [r0, #0]
{
 80018fa:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 80018fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001900:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8001902:	684c      	ldr	r4, [r1, #4]
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8001904:	680d      	ldr	r5, [r1, #0]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001906:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800190a:	4322      	orrs	r2, r4
  tmpsmcr &= ~TIM_SMCR_SMS;
 800190c:	f022 0207 	bic.w	r2, r2, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8001910:	432a      	orrs	r2, r5
  __HAL_LOCK(htim);
 8001912:	2601      	movs	r6, #1
  switch (sSlaveConfig->InputTrigger)
 8001914:	2c30      	cmp	r4, #48	; 0x30
  __HAL_LOCK(htim);
 8001916:	f883 603c 	strb.w	r6, [r3, #60]	; 0x3c
  htim->Instance->SMCR = tmpsmcr;
 800191a:	6082      	str	r2, [r0, #8]
  switch (sSlaveConfig->InputTrigger)
 800191c:	d012      	beq.n	8001944 <HAL_TIM_SlaveConfigSynchro+0x5c>
 800191e:	d934      	bls.n	800198a <HAL_TIM_SlaveConfigSynchro+0xa2>
 8001920:	2c50      	cmp	r4, #80	; 0x50
 8001922:	d020      	beq.n	8001966 <HAL_TIM_SlaveConfigSynchro+0x7e>
 8001924:	d93f      	bls.n	80019a6 <HAL_TIM_SlaveConfigSynchro+0xbe>
 8001926:	2c60      	cmp	r4, #96	; 0x60
 8001928:	d04f      	beq.n	80019ca <HAL_TIM_SlaveConfigSynchro+0xe2>
 800192a:	2c70      	cmp	r4, #112	; 0x70
 800192c:	d133      	bne.n	8001996 <HAL_TIM_SlaveConfigSynchro+0xae>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800192e:	68ca      	ldr	r2, [r1, #12]
 8001930:	688d      	ldr	r5, [r1, #8]
 8001932:	690c      	ldr	r4, [r1, #16]
  tmpsmcr = TIMx->SMCR;
 8001934:	6881      	ldr	r1, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001936:	432a      	orrs	r2, r5
 8001938:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800193c:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001940:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 8001942:	6082      	str	r2, [r0, #8]
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8001944:	68c2      	ldr	r2, [r0, #12]
 8001946:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800194a:	60c2      	str	r2, [r0, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800194c:	68c2      	ldr	r2, [r0, #12]
  htim->State = HAL_TIM_STATE_READY;
 800194e:	2401      	movs	r4, #1
  __HAL_UNLOCK(htim);
 8001950:	2100      	movs	r1, #0
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8001952:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001956:	60c2      	str	r2, [r0, #12]
  return HAL_OK;
 8001958:	4608      	mov	r0, r1
  htim->State = HAL_TIM_STATE_READY;
 800195a:	f883 403d 	strb.w	r4, [r3, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800195e:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
}
 8001962:	bcf0      	pop	{r4, r5, r6, r7}
 8001964:	4770      	bx	lr
  tmpccer = TIMx->CCER;
 8001966:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001968:	6a06      	ldr	r6, [r0, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800196a:	688c      	ldr	r4, [r1, #8]
 800196c:	690f      	ldr	r7, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800196e:	f026 0601 	bic.w	r6, r6, #1
 8001972:	6206      	str	r6, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001974:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001976:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800197a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 800197e:	4321      	orrs	r1, r4
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001980:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001984:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001986:	6201      	str	r1, [r0, #32]
 8001988:	e7dc      	b.n	8001944 <HAL_TIM_SlaveConfigSynchro+0x5c>
  switch (sSlaveConfig->InputTrigger)
 800198a:	2c10      	cmp	r4, #16
 800198c:	d0da      	beq.n	8001944 <HAL_TIM_SlaveConfigSynchro+0x5c>
 800198e:	2c20      	cmp	r4, #32
 8001990:	d0d8      	beq.n	8001944 <HAL_TIM_SlaveConfigSynchro+0x5c>
 8001992:	2c00      	cmp	r4, #0
 8001994:	d0d6      	beq.n	8001944 <HAL_TIM_SlaveConfigSynchro+0x5c>
    htim->State = HAL_TIM_STATE_READY;
 8001996:	2001      	movs	r0, #1
    __HAL_UNLOCK(htim);
 8001998:	2200      	movs	r2, #0
    htim->State = HAL_TIM_STATE_READY;
 800199a:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800199e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80019a2:	bcf0      	pop	{r4, r5, r6, r7}
 80019a4:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 80019a6:	2c40      	cmp	r4, #64	; 0x40
 80019a8:	d1f5      	bne.n	8001996 <HAL_TIM_SlaveConfigSynchro+0xae>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80019aa:	2d05      	cmp	r5, #5
 80019ac:	d0f3      	beq.n	8001996 <HAL_TIM_SlaveConfigSynchro+0xae>
      tmpccer = htim->Instance->CCER;
 80019ae:	6a05      	ldr	r5, [r0, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80019b0:	6a04      	ldr	r4, [r0, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80019b2:	690e      	ldr	r6, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80019b4:	f024 0401 	bic.w	r4, r4, #1
 80019b8:	6204      	str	r4, [r0, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80019ba:	6982      	ldr	r2, [r0, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80019bc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80019c0:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 80019c4:	6182      	str	r2, [r0, #24]
      htim->Instance->CCER = tmpccer;
 80019c6:	6205      	str	r5, [r0, #32]
 80019c8:	e7bc      	b.n	8001944 <HAL_TIM_SlaveConfigSynchro+0x5c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80019ca:	6a04      	ldr	r4, [r0, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80019cc:	688d      	ldr	r5, [r1, #8]
 80019ce:	690e      	ldr	r6, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80019d0:	f024 0410 	bic.w	r4, r4, #16
 80019d4:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80019d6:	6981      	ldr	r1, [r0, #24]
  tmpccer = TIMx->CCER;
 80019d8:	6a02      	ldr	r2, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80019da:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80019de:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80019e2:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 80019e6:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 80019ea:	6181      	str	r1, [r0, #24]
  TIMx->CCER = tmpccer;
 80019ec:	6202      	str	r2, [r0, #32]
 80019ee:	e7a9      	b.n	8001944 <HAL_TIM_SlaveConfigSynchro+0x5c>

080019f0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80019f0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d033      	beq.n	8001a60 <HAL_TIMEx_MasterConfigSynchronization+0x70>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80019f8:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80019fa:	2202      	movs	r2, #2
{
 80019fc:	b470      	push	{r4, r5, r6}
  htim->State = HAL_TIM_STATE_BUSY;
 80019fe:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8001a02:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001a04:	680e      	ldr	r6, [r1, #0]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a06:	4d17      	ldr	r5, [pc, #92]	; (8001a64 <HAL_TIMEx_MasterConfigSynchronization+0x74>)
  tmpsmcr = htim->Instance->SMCR;
 8001a08:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8001a0a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001a0e:	4332      	orrs	r2, r6
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a10:	42ab      	cmp	r3, r5
  __HAL_LOCK(htim);
 8001a12:	f04f 0601 	mov.w	r6, #1
 8001a16:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c
  htim->Instance->CR2 = tmpcr2;
 8001a1a:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a1c:	d01a      	beq.n	8001a54 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8001a1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a22:	d017      	beq.n	8001a54 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8001a24:	4a10      	ldr	r2, [pc, #64]	; (8001a68 <HAL_TIMEx_MasterConfigSynchronization+0x78>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d014      	beq.n	8001a54 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8001a2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d010      	beq.n	8001a54 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8001a32:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d00c      	beq.n	8001a54 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8001a3a:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d008      	beq.n	8001a54 <HAL_TIMEx_MasterConfigSynchronization+0x64>
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8001a42:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8001a44:	2201      	movs	r2, #1
 8001a46:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001a4a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8001a4e:	bc70      	pop	{r4, r5, r6}
  return HAL_OK;
 8001a50:	4618      	mov	r0, r3
}
 8001a52:	4770      	bx	lr
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001a54:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001a56:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001a5a:	4314      	orrs	r4, r2
    htim->Instance->SMCR = tmpsmcr;
 8001a5c:	609c      	str	r4, [r3, #8]
 8001a5e:	e7f0      	b.n	8001a42 <HAL_TIMEx_MasterConfigSynchronization+0x52>
  __HAL_LOCK(htim);
 8001a60:	2002      	movs	r0, #2
 8001a62:	4770      	bx	lr
 8001a64:	40010000 	.word	0x40010000
 8001a68:	40000400 	.word	0x40000400

08001a6c <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8001a6c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d021      	beq.n	8001ab8 <HAL_TIMEx_ConfigBreakDeadTime+0x4c>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8001a74:	68ca      	ldr	r2, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8001a76:	684b      	ldr	r3, [r1, #4]
{
 8001a78:	b4f0      	push	{r4, r5, r6, r7}
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8001a7a:	688f      	ldr	r7, [r1, #8]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8001a7c:	680e      	ldr	r6, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8001a7e:	690d      	ldr	r5, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8001a80:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001a82:	69c9      	ldr	r1, [r1, #28]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8001a84:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001a88:	433a      	orrs	r2, r7
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8001a8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a8e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8001a90:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001a94:	4333      	orrs	r3, r6
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8001a96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001a9a:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8001a9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001aa0:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001aa2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8001aa6:	6804      	ldr	r4, [r0, #0]

  __HAL_UNLOCK(htim);
 8001aa8:	2200      	movs	r2, #0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001aaa:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 8001aac:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8001aae:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8001ab2:	bcf0      	pop	{r4, r5, r6, r7}
 8001ab4:	4610      	mov	r0, r2
 8001ab6:	4770      	bx	lr
  __HAL_LOCK(htim);
 8001ab8:	2302      	movs	r3, #2
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop

08001ac0 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ac0:	2800      	cmp	r0, #0
 8001ac2:	f000 8093 	beq.w	8001bec <HAL_UART_Init+0x12c>
{
 8001ac6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ac8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001acc:	4604      	mov	r4, r0
 8001ace:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	f000 8085 	beq.w	8001be2 <HAL_UART_Init+0x122>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ad8:	6823      	ldr	r3, [r4, #0]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ada:	f8d4 e00c 	ldr.w	lr, [r4, #12]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001ade:	6927      	ldr	r7, [r4, #16]
 8001ae0:	6966      	ldr	r6, [r4, #20]
 8001ae2:	69e5      	ldr	r5, [r4, #28]
  huart->gState = HAL_UART_STATE_BUSY;
 8001ae4:	2224      	movs	r2, #36	; 0x24
 8001ae6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8001aea:	68d8      	ldr	r0, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001aec:	68a2      	ldr	r2, [r4, #8]
  __HAL_UART_DISABLE(huart);
 8001aee:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
 8001af2:	60d8      	str	r0, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001af4:	6919      	ldr	r1, [r3, #16]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001af6:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001af8:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8001afc:	ea41 010e 	orr.w	r1, r1, lr
 8001b00:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 8001b02:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001b04:	433a      	orrs	r2, r7
  MODIFY_REG(huart->Instance->CR1,
 8001b06:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001b0a:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR1,
 8001b0c:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001b10:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 8001b12:	430a      	orrs	r2, r1
 8001b14:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001b16:	695a      	ldr	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001b18:	4935      	ldr	r1, [pc, #212]	; (8001bf0 <HAL_UART_Init+0x130>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001b1a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001b1e:	4302      	orrs	r2, r0
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001b20:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001b22:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001b24:	d035      	beq.n	8001b92 <HAL_UART_Init+0xd2>
 8001b26:	4a33      	ldr	r2, [pc, #204]	; (8001bf4 <HAL_UART_Init+0x134>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d032      	beq.n	8001b92 <HAL_UART_Init+0xd2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001b2c:	f7ff faf2 	bl	8001114 <HAL_RCC_GetPCLK1Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001b30:	69e3      	ldr	r3, [r4, #28]
 8001b32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b36:	d032      	beq.n	8001b9e <HAL_UART_Init+0xde>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001b38:	6863      	ldr	r3, [r4, #4]
 8001b3a:	6825      	ldr	r5, [r4, #0]
 8001b3c:	2119      	movs	r1, #25
 8001b3e:	009a      	lsls	r2, r3, #2
 8001b40:	fba0 0101 	umull	r0, r1, r0, r1
 8001b44:	0f9b      	lsrs	r3, r3, #30
 8001b46:	f7fe fb47 	bl	80001d8 <__aeabi_uldivmod>
 8001b4a:	492b      	ldr	r1, [pc, #172]	; (8001bf8 <HAL_UART_Init+0x138>)
 8001b4c:	fba1 3200 	umull	r3, r2, r1, r0
 8001b50:	0952      	lsrs	r2, r2, #5
 8001b52:	2364      	movs	r3, #100	; 0x64
 8001b54:	fb03 0312 	mls	r3, r3, r2, r0
 8001b58:	011b      	lsls	r3, r3, #4
 8001b5a:	3332      	adds	r3, #50	; 0x32
 8001b5c:	fba1 1303 	umull	r1, r3, r1, r3
 8001b60:	0112      	lsls	r2, r2, #4
 8001b62:	eb02 1353 	add.w	r3, r2, r3, lsr #5
 8001b66:	60ab      	str	r3, [r5, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b68:	692b      	ldr	r3, [r5, #16]
 8001b6a:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001b6e:	612b      	str	r3, [r5, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b70:	696b      	ldr	r3, [r5, #20]
 8001b72:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8001b76:	616b      	str	r3, [r5, #20]
  __HAL_UART_ENABLE(huart);
 8001b78:	68eb      	ldr	r3, [r5, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b7a:	2100      	movs	r1, #0
  huart->gState = HAL_UART_STATE_READY;
 8001b7c:	2220      	movs	r2, #32
  __HAL_UART_ENABLE(huart);
 8001b7e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b82:	60eb      	str	r3, [r5, #12]
  return HAL_OK;
 8001b84:	4608      	mov	r0, r1
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b86:	6421      	str	r1, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001b88:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001b8c:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
  return HAL_OK;
 8001b90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 8001b92:	f7ff facf 	bl	8001134 <HAL_RCC_GetPCLK2Freq>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001b96:	69e3      	ldr	r3, [r4, #28]
 8001b98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b9c:	d1cc      	bne.n	8001b38 <HAL_UART_Init+0x78>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001b9e:	6862      	ldr	r2, [r4, #4]
 8001ba0:	4e15      	ldr	r6, [pc, #84]	; (8001bf8 <HAL_UART_Init+0x138>)
 8001ba2:	6825      	ldr	r5, [r4, #0]
 8001ba4:	1892      	adds	r2, r2, r2
 8001ba6:	f04f 0300 	mov.w	r3, #0
 8001baa:	f04f 0119 	mov.w	r1, #25
 8001bae:	415b      	adcs	r3, r3
 8001bb0:	fba0 0101 	umull	r0, r1, r0, r1
 8001bb4:	f7fe fb10 	bl	80001d8 <__aeabi_uldivmod>
 8001bb8:	fba6 3200 	umull	r3, r2, r6, r0
 8001bbc:	0951      	lsrs	r1, r2, #5
 8001bbe:	2364      	movs	r3, #100	; 0x64
 8001bc0:	fb03 0311 	mls	r3, r3, r1, r0
 8001bc4:	00db      	lsls	r3, r3, #3
 8001bc6:	3332      	adds	r3, #50	; 0x32
 8001bc8:	fba6 2303 	umull	r2, r3, r6, r3
 8001bcc:	095b      	lsrs	r3, r3, #5
 8001bce:	f003 0207 	and.w	r2, r3, #7
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001bd8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001bdc:	4413      	add	r3, r2
 8001bde:	60ab      	str	r3, [r5, #8]
 8001be0:	e7c2      	b.n	8001b68 <HAL_UART_Init+0xa8>
    huart->Lock = HAL_UNLOCKED;
 8001be2:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8001be6:	f001 fcf3 	bl	80035d0 <HAL_UART_MspInit>
 8001bea:	e775      	b.n	8001ad8 <HAL_UART_Init+0x18>
    return HAL_ERROR;
 8001bec:	2001      	movs	r0, #1
 8001bee:	4770      	bx	lr
 8001bf0:	40011000 	.word	0x40011000
 8001bf4:	40011400 	.word	0x40011400
 8001bf8:	51eb851f 	.word	0x51eb851f

08001bfc <HAL_UART_Receive_DMA>:
{
 8001bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8001bfe:	f890 403e 	ldrb.w	r4, [r0, #62]	; 0x3e
 8001c02:	2c20      	cmp	r4, #32
{
 8001c04:	b083      	sub	sp, #12
  if (huart->RxState == HAL_UART_STATE_READY)
 8001c06:	d002      	beq.n	8001c0e <HAL_UART_Receive_DMA+0x12>
    return HAL_BUSY;
 8001c08:	2002      	movs	r0, #2
}
 8001c0a:	b003      	add	sp, #12
 8001c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((pData == NULL) || (Size == 0U))
 8001c0e:	2900      	cmp	r1, #0
 8001c10:	d04f      	beq.n	8001cb2 <HAL_UART_Receive_DMA+0xb6>
 8001c12:	2a00      	cmp	r2, #0
 8001c14:	d04d      	beq.n	8001cb2 <HAL_UART_Receive_DMA+0xb6>
    __HAL_LOCK(huart);
 8001c16:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d0f4      	beq.n	8001c08 <HAL_UART_Receive_DMA+0xc>
 8001c1e:	4604      	mov	r4, r0
 8001c20:	2701      	movs	r7, #1
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8001c22:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8001c24:	4e24      	ldr	r6, [pc, #144]	; (8001cb8 <HAL_UART_Receive_DMA+0xbc>)
    __HAL_LOCK(huart);
 8001c26:	f884 703c 	strb.w	r7, [r4, #60]	; 0x3c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c2a:	2500      	movs	r5, #0
 8001c2c:	4613      	mov	r3, r2
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001c2e:	2722      	movs	r7, #34	; 0x22
 8001c30:	460a      	mov	r2, r1
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8001c32:	6821      	ldr	r1, [r4, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c34:	6325      	str	r5, [r4, #48]	; 0x30
  huart->pRxBuffPtr = pData;
 8001c36:	62a2      	str	r2, [r4, #40]	; 0x28
  huart->RxXferSize = Size;
 8001c38:	85a3      	strh	r3, [r4, #44]	; 0x2c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c3a:	6425      	str	r5, [r4, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001c3c:	f884 703e 	strb.w	r7, [r4, #62]	; 0x3e
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8001c40:	63c6      	str	r6, [r0, #60]	; 0x3c
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8001c42:	4f1e      	ldr	r7, [pc, #120]	; (8001cbc <HAL_UART_Receive_DMA+0xc0>)
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8001c44:	4e1e      	ldr	r6, [pc, #120]	; (8001cc0 <HAL_UART_Receive_DMA+0xc4>)
  huart->hdmarx->XferAbortCallback = NULL;
 8001c46:	6505      	str	r5, [r0, #80]	; 0x50
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8001c48:	3104      	adds	r1, #4
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8001c4a:	6407      	str	r7, [r0, #64]	; 0x40
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8001c4c:	64c6      	str	r6, [r0, #76]	; 0x4c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8001c4e:	f7fe fdb7 	bl	80007c0 <HAL_DMA_Start_IT>
  __HAL_UART_CLEAR_OREFLAG(huart);
 8001c52:	6823      	ldr	r3, [r4, #0]
 8001c54:	9501      	str	r5, [sp, #4]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	9201      	str	r2, [sp, #4]
 8001c5a:	6859      	ldr	r1, [r3, #4]
  if (huart->Init.Parity != UART_PARITY_NONE)
 8001c5c:	6922      	ldr	r2, [r4, #16]
  __HAL_UART_CLEAR_OREFLAG(huart);
 8001c5e:	9101      	str	r1, [sp, #4]
  __HAL_UNLOCK(huart);
 8001c60:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  __HAL_UART_CLEAR_OREFLAG(huart);
 8001c64:	9901      	ldr	r1, [sp, #4]
  if (huart->Init.Parity != UART_PARITY_NONE)
 8001c66:	b15a      	cbz	r2, 8001c80 <HAL_UART_Receive_DMA+0x84>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c68:	f103 020c 	add.w	r2, r3, #12
 8001c6c:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001c70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c74:	f103 000c 	add.w	r0, r3, #12
 8001c78:	e840 2100 	strex	r1, r2, [r0]
 8001c7c:	2900      	cmp	r1, #0
 8001c7e:	d1f3      	bne.n	8001c68 <HAL_UART_Receive_DMA+0x6c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c80:	f103 0214 	add.w	r2, r3, #20
 8001c84:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c88:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c8c:	f103 0014 	add.w	r0, r3, #20
 8001c90:	e840 2100 	strex	r1, r2, [r0]
 8001c94:	2900      	cmp	r1, #0
 8001c96:	d1f3      	bne.n	8001c80 <HAL_UART_Receive_DMA+0x84>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c98:	f103 0214 	add.w	r2, r3, #20
 8001c9c:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001ca0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ca4:	f103 0114 	add.w	r1, r3, #20
 8001ca8:	e841 2000 	strex	r0, r2, [r1]
 8001cac:	2800      	cmp	r0, #0
 8001cae:	d1f3      	bne.n	8001c98 <HAL_UART_Receive_DMA+0x9c>
 8001cb0:	e7ab      	b.n	8001c0a <HAL_UART_Receive_DMA+0xe>
      return HAL_ERROR;
 8001cb2:	2001      	movs	r0, #1
 8001cb4:	e7a9      	b.n	8001c0a <HAL_UART_Receive_DMA+0xe>
 8001cb6:	bf00      	nop
 8001cb8:	08001da5 	.word	0x08001da5
 8001cbc:	08001d89 	.word	0x08001d89
 8001cc0:	08001cd1 	.word	0x08001cd1

08001cc4 <HAL_UART_RxCpltCallback>:
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop

08001cc8 <HAL_UART_RxHalfCpltCallback>:
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop

08001ccc <HAL_UART_ErrorCallback>:
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop

08001cd0 <UART_DMAError>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001cd0:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8001cd2:	b508      	push	{r3, lr}
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8001cd4:	6803      	ldr	r3, [r0, #0]
 8001cd6:	6959      	ldr	r1, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8001cd8:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8001cdc:	2a21      	cmp	r2, #33	; 0x21
 8001cde:	d030      	beq.n	8001d42 <UART_DMAError+0x72>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001ce0:	6959      	ldr	r1, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8001ce2:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8001ce6:	2a22      	cmp	r2, #34	; 0x22
 8001ce8:	d006      	beq.n	8001cf8 <UART_DMAError+0x28>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8001cea:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001cec:	f043 0310 	orr.w	r3, r3, #16
 8001cf0:	6403      	str	r3, [r0, #64]	; 0x40
  HAL_UART_ErrorCallback(huart);
 8001cf2:	f7ff ffeb 	bl	8001ccc <HAL_UART_ErrorCallback>
 8001cf6:	bd08      	pop	{r3, pc}
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8001cf8:	064a      	lsls	r2, r1, #25
 8001cfa:	d5f6      	bpl.n	8001cea <UART_DMAError+0x1a>
    huart->RxXferCount = 0x00U;
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	85c2      	strh	r2, [r0, #46]	; 0x2e
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d00:	f103 020c 	add.w	r2, r3, #12
 8001d04:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001d08:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d0c:	f103 0e0c 	add.w	lr, r3, #12
 8001d10:	e84e 2100 	strex	r1, r2, [lr]
 8001d14:	2900      	cmp	r1, #0
 8001d16:	d1f3      	bne.n	8001d00 <UART_DMAError+0x30>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d18:	f103 0214 	add.w	r2, r3, #20
 8001d1c:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d20:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d24:	f103 0e14 	add.w	lr, r3, #20
 8001d28:	e84e 2100 	strex	r1, r2, [lr]
 8001d2c:	2900      	cmp	r1, #0
 8001d2e:	d1f3      	bne.n	8001d18 <UART_DMAError+0x48>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001d30:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8001d32:	2a01      	cmp	r2, #1
 8001d34:	d019      	beq.n	8001d6a <UART_DMAError+0x9a>
  huart->RxState = HAL_UART_STATE_READY;
 8001d36:	2220      	movs	r2, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d38:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8001d3a:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d3e:	6303      	str	r3, [r0, #48]	; 0x30
 8001d40:	e7d3      	b.n	8001cea <UART_DMAError+0x1a>
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8001d42:	0609      	lsls	r1, r1, #24
 8001d44:	d5cc      	bpl.n	8001ce0 <UART_DMAError+0x10>
    huart->TxXferCount = 0x00U;
 8001d46:	2200      	movs	r2, #0
 8001d48:	84c2      	strh	r2, [r0, #38]	; 0x26
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d4a:	f103 020c 	add.w	r2, r3, #12
 8001d4e:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8001d52:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d56:	f103 0e0c 	add.w	lr, r3, #12
 8001d5a:	e84e 2100 	strex	r1, r2, [lr]
 8001d5e:	2900      	cmp	r1, #0
 8001d60:	d1f3      	bne.n	8001d4a <UART_DMAError+0x7a>
  huart->gState = HAL_UART_STATE_READY;
 8001d62:	2220      	movs	r2, #32
 8001d64:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
 8001d68:	e7ba      	b.n	8001ce0 <UART_DMAError+0x10>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d6a:	f103 020c 	add.w	r2, r3, #12
 8001d6e:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001d72:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d76:	f103 0e0c 	add.w	lr, r3, #12
 8001d7a:	e84e 2100 	strex	r1, r2, [lr]
 8001d7e:	2900      	cmp	r1, #0
 8001d80:	d1f3      	bne.n	8001d6a <UART_DMAError+0x9a>
 8001d82:	e7d8      	b.n	8001d36 <UART_DMAError+0x66>

08001d84 <HAL_UARTEx_RxEventCallback>:
{
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop

08001d88 <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d88:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8001d8a:	b508      	push	{r3, lr}
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001d8c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d002      	beq.n	8001d98 <UART_DMARxHalfCplt+0x10>
    HAL_UART_RxHalfCpltCallback(huart);
 8001d92:	f7ff ff99 	bl	8001cc8 <HAL_UART_RxHalfCpltCallback>
 8001d96:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8001d98:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8001d9a:	0849      	lsrs	r1, r1, #1
 8001d9c:	f7ff fff2 	bl	8001d84 <HAL_UARTEx_RxEventCallback>
 8001da0:	bd08      	pop	{r3, pc}
 8001da2:	bf00      	nop

08001da4 <UART_DMAReceiveCplt>:
{
 8001da4:	b508      	push	{r3, lr}
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8001da6:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001da8:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8001db0:	d12b      	bne.n	8001e0a <UART_DMAReceiveCplt+0x66>
 8001db2:	6803      	ldr	r3, [r0, #0]
    huart->RxXferCount = 0U;
 8001db4:	85c2      	strh	r2, [r0, #46]	; 0x2e
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001db6:	f103 020c 	add.w	r2, r3, #12
 8001dba:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001dbe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001dc2:	f103 0e0c 	add.w	lr, r3, #12
 8001dc6:	e84e 2100 	strex	r1, r2, [lr]
 8001dca:	2900      	cmp	r1, #0
 8001dcc:	d1f3      	bne.n	8001db6 <UART_DMAReceiveCplt+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001dce:	f103 0214 	add.w	r2, r3, #20
 8001dd2:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001dd6:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001dda:	f103 0e14 	add.w	lr, r3, #20
 8001dde:	e84e 2100 	strex	r1, r2, [lr]
 8001de2:	2900      	cmp	r1, #0
 8001de4:	d1f3      	bne.n	8001dce <UART_DMAReceiveCplt+0x2a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001de6:	f103 0214 	add.w	r2, r3, #20
 8001dea:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001dee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001df2:	f103 0e14 	add.w	lr, r3, #20
 8001df6:	e84e 2100 	strex	r1, r2, [lr]
 8001dfa:	2900      	cmp	r1, #0
 8001dfc:	d1f3      	bne.n	8001de6 <UART_DMAReceiveCplt+0x42>
    huart->RxState = HAL_UART_STATE_READY;
 8001dfe:	2220      	movs	r2, #32
 8001e00:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001e04:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8001e06:	2a01      	cmp	r2, #1
 8001e08:	d005      	beq.n	8001e16 <UART_DMAReceiveCplt+0x72>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001e0a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d00f      	beq.n	8001e30 <UART_DMAReceiveCplt+0x8c>
    HAL_UART_RxCpltCallback(huart);
 8001e10:	f7ff ff58 	bl	8001cc4 <HAL_UART_RxCpltCallback>
 8001e14:	bd08      	pop	{r3, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e16:	f103 020c 	add.w	r2, r3, #12
 8001e1a:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001e1e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e22:	f103 0e0c 	add.w	lr, r3, #12
 8001e26:	e84e 2100 	strex	r1, r2, [lr]
 8001e2a:	2900      	cmp	r1, #0
 8001e2c:	d1f3      	bne.n	8001e16 <UART_DMAReceiveCplt+0x72>
 8001e2e:	e7ec      	b.n	8001e0a <UART_DMAReceiveCplt+0x66>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8001e30:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8001e32:	f7ff ffa7 	bl	8001d84 <HAL_UARTEx_RxEventCallback>
 8001e36:	bd08      	pop	{r3, pc}

08001e38 <init_config>:

void motor_set_freq(motor_config_t* config, float freq){
	config->freq = freq;
	TIM_HandleTypeDef* tim = config->tim;
	uint32_t preescaler = 0;
	uint32_t period = SYSCLK / config->freq / (preescaler + 1);
 8001e38:	4b22      	ldr	r3, [pc, #136]	; (8001ec4 <init_config+0x8c>)
 8001e3a:	edd3 7a00 	vldr	s15, [r3]
 8001e3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
void init_config(motor_config_t* config, float freq, float duty, float delay){
 8001e42:	b470      	push	{r4, r5, r6}
	uint32_t period = SYSCLK / config->freq / (preescaler + 1);
 8001e44:	eec7 6a80 	vdiv.f32	s13, s15, s0
void init_config(motor_config_t* config, float freq, float duty, float delay){
 8001e48:	b083      	sub	sp, #12
	TIM_HandleTypeDef* tim = config->tim;
 8001e4a:	6905      	ldr	r5, [r0, #16]
	uint32_t period = SYSCLK / config->freq / (preescaler + 1);
 8001e4c:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8001e50:	ee17 3a90 	vmov	r3, s15
	while(period > (1<<16) - 1){
 8001e54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e58:	d332      	bcc.n	8001ec0 <init_config+0x88>
 8001e5a:	2200      	movs	r2, #0
		preescaler++;
		period = SYSCLK / config->freq / (preescaler + 1);
 8001e5c:	1c93      	adds	r3, r2, #2
 8001e5e:	ee07 3a10 	vmov	s14, r3
 8001e62:	eeb8 7a47 	vcvt.f32.u32	s14, s14
		preescaler++;
 8001e66:	1c51      	adds	r1, r2, #1
		period = SYSCLK / config->freq / (preescaler + 1);
 8001e68:	eec6 7a87 	vdiv.f32	s15, s13, s14
		preescaler++;
 8001e6c:	460a      	mov	r2, r1
		period = SYSCLK / config->freq / (preescaler + 1);
 8001e6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e72:	ee17 3a90 	vmov	r3, s15
	while(period > (1<<16) - 1){
 8001e76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e7a:	d2ef      	bcs.n	8001e5c <init_config+0x24>
	__HAL_TIM_SET_AUTORELOAD(config->tim, period - 1);
}

void motor_set_duty(motor_config_t* config, float duty){
//	uint32_t ARR = config->tim->Instance->ARR;
	uint32_t pwm_value = duty * config->period;
 8001e7c:	ee07 3a90 	vmov	s15, r3
 8001e80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	tim->Instance->PSC = preescaler;
 8001e84:	682a      	ldr	r2, [r5, #0]
}

void motor_set_delay(motor_config_t* config, float delay){
	TIM_HandleTypeDef* tim = config->tim;
	config->delay = delay;
	uint16_t phase_shift = config->delay * config->period;
 8001e86:	ee21 7a27 	vmul.f32	s14, s2, s15
	uint32_t pwm_value = duty * config->period;
 8001e8a:	ee60 7aa7 	vmul.f32	s15, s1, s15
	uint16_t phase_shift = config->delay * config->period;
 8001e8e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
	uint32_t pwm_value = duty * config->period;
 8001e92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	uint16_t phase_shift = config->delay * config->period;
 8001e96:	ed8d 7a01 	vstr	s14, [sp, #4]
  __HAL_TIM_SET_COUNTER(tim, phase_shift);
 8001e9a:	f8bd 4004 	ldrh.w	r4, [sp, #4]
	tim->Instance->PSC = preescaler;
 8001e9e:	6291      	str	r1, [r2, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(config->tim, period - 1);
 8001ea0:	1e5e      	subs	r6, r3, #1
	config->period = period;
 8001ea2:	60c3      	str	r3, [r0, #12]
	config->freq = freq;
 8001ea4:	ed80 0a00 	vstr	s0, [r0]
	__HAL_TIM_SET_AUTORELOAD(config->tim, period - 1);
 8001ea8:	62d6      	str	r6, [r2, #44]	; 0x2c
 8001eaa:	60ee      	str	r6, [r5, #12]
	config->duty = duty;
 8001eac:	edc0 0a01 	vstr	s1, [r0, #4]
	__HAL_TIM_SET_COMPARE(config->tim, TIM_CHANNEL_1, pwm_value);
 8001eb0:	edc2 7a0d 	vstr	s15, [r2, #52]	; 0x34
	config->delay = delay;
 8001eb4:	ed80 1a02 	vstr	s2, [r0, #8]
  __HAL_TIM_SET_COUNTER(tim, phase_shift);
 8001eb8:	6254      	str	r4, [r2, #36]	; 0x24
}
 8001eba:	b003      	add	sp, #12
 8001ebc:	bc70      	pop	{r4, r5, r6}
 8001ebe:	4770      	bx	lr
	uint32_t preescaler = 0;
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	e7db      	b.n	8001e7c <init_config+0x44>
 8001ec4:	2000002c 	.word	0x2000002c

08001ec8 <motor_set_freq>:
	uint32_t period = SYSCLK / config->freq / (preescaler + 1);
 8001ec8:	4b16      	ldr	r3, [pc, #88]	; (8001f24 <motor_set_freq+0x5c>)
 8001eca:	edd3 7a00 	vldr	s15, [r3]
 8001ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
void motor_set_freq(motor_config_t* config, float freq){
 8001ed2:	b430      	push	{r4, r5}
	uint32_t period = SYSCLK / config->freq / (preescaler + 1);
 8001ed4:	eec7 6a80 	vdiv.f32	s13, s15, s0
	TIM_HandleTypeDef* tim = config->tim;
 8001ed8:	6904      	ldr	r4, [r0, #16]
	uint32_t period = SYSCLK / config->freq / (preescaler + 1);
 8001eda:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8001ede:	ee17 3a90 	vmov	r3, s15
	while(period > (1<<16) - 1){
 8001ee2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ee6:	d31a      	bcc.n	8001f1e <motor_set_freq+0x56>
 8001ee8:	2200      	movs	r2, #0
		period = SYSCLK / config->freq / (preescaler + 1);
 8001eea:	1c93      	adds	r3, r2, #2
 8001eec:	ee07 3a10 	vmov	s14, r3
 8001ef0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
		preescaler++;
 8001ef4:	1c51      	adds	r1, r2, #1
		period = SYSCLK / config->freq / (preescaler + 1);
 8001ef6:	eec6 7a87 	vdiv.f32	s15, s13, s14
		preescaler++;
 8001efa:	460a      	mov	r2, r1
		period = SYSCLK / config->freq / (preescaler + 1);
 8001efc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f00:	ee17 3a90 	vmov	r3, s15
	while(period > (1<<16) - 1){
 8001f04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f08:	d2ef      	bcs.n	8001eea <motor_set_freq+0x22>
	tim->Instance->PSC = preescaler;
 8001f0a:	6825      	ldr	r5, [r4, #0]
	__HAL_TIM_SET_AUTORELOAD(config->tim, period - 1);
 8001f0c:	1e5a      	subs	r2, r3, #1
	tim->Instance->PSC = preescaler;
 8001f0e:	62a9      	str	r1, [r5, #40]	; 0x28
	config->period = period;
 8001f10:	60c3      	str	r3, [r0, #12]
	config->freq = freq;
 8001f12:	ed80 0a00 	vstr	s0, [r0]
	__HAL_TIM_SET_AUTORELOAD(config->tim, period - 1);
 8001f16:	62ea      	str	r2, [r5, #44]	; 0x2c
 8001f18:	60e2      	str	r2, [r4, #12]
}
 8001f1a:	bc30      	pop	{r4, r5}
 8001f1c:	4770      	bx	lr
	uint32_t preescaler = 0;
 8001f1e:	2100      	movs	r1, #0
 8001f20:	e7f3      	b.n	8001f0a <motor_set_freq+0x42>
 8001f22:	bf00      	nop
 8001f24:	2000002c 	.word	0x2000002c

08001f28 <motor_set_duty>:
	uint32_t pwm_value = duty * config->period;
 8001f28:	edd0 7a03 	vldr	s15, [r0, #12]
	__HAL_TIM_SET_COMPARE(config->tim, TIM_CHANNEL_1, pwm_value);
 8001f2c:	6903      	ldr	r3, [r0, #16]
	config->duty = duty;
 8001f2e:	ed80 0a01 	vstr	s0, [r0, #4]
	uint32_t pwm_value = duty * config->period;
 8001f32:	eef8 7a67 	vcvt.f32.u32	s15, s15
	__HAL_TIM_SET_COMPARE(config->tim, TIM_CHANNEL_1, pwm_value);
 8001f36:	681b      	ldr	r3, [r3, #0]
	uint32_t pwm_value = duty * config->period;
 8001f38:	ee27 0a80 	vmul.f32	s0, s15, s0
 8001f3c:	eebc 0ac0 	vcvt.u32.f32	s0, s0
	__HAL_TIM_SET_COMPARE(config->tim, TIM_CHANNEL_1, pwm_value);
 8001f40:	ed83 0a0d 	vstr	s0, [r3, #52]	; 0x34
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop

08001f48 <motor_set_delay_us>:
}

void motor_set_delay_us(motor_config_t* config, float delay_us){
	TIM_HandleTypeDef* tim = config->tim;
	uint32_t ARR = tim->Instance->ARR;
	float period_us = 1e6 / config->freq;
 8001f48:	edd0 6a00 	vldr	s13, [r0]
 8001f4c:	ed9f 6a11 	vldr	s12, [pc, #68]	; 8001f94 <motor_set_delay_us+0x4c>
	if(delay_us > period_us){
		delay_us = 0;
 8001f50:	eddf 7a11 	vldr	s15, [pc, #68]	; 8001f98 <motor_set_delay_us+0x50>
	uint32_t ARR = tim->Instance->ARR;
 8001f54:	6903      	ldr	r3, [r0, #16]
	float period_us = 1e6 / config->freq;
 8001f56:	ee86 7a26 	vdiv.f32	s14, s12, s13
	uint32_t ARR = tim->Instance->ARR;
 8001f5a:	6819      	ldr	r1, [r3, #0]
 8001f5c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
void motor_set_delay_us(motor_config_t* config, float delay_us){
 8001f5e:	b082      	sub	sp, #8
		delay_us = 0;
 8001f60:	eeb4 7a40 	vcmp.f32	s14, s0
 8001f64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f68:	bf48      	it	mi
 8001f6a:	eeb0 0a67 	vmovmi.f32	s0, s15
	}
	uint16_t phase_shift = delay_us/period_us * ARR;
 8001f6e:	eec0 7a07 	vdiv.f32	s15, s0, s14
 8001f72:	ee07 3a10 	vmov	s14, r3
 8001f76:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001f7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f82:	edcd 7a01 	vstr	s15, [sp, #4]
  __HAL_TIM_SET_COUNTER(tim, ARR - phase_shift);
 8001f86:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8001f8a:	1a9b      	subs	r3, r3, r2
 8001f8c:	624b      	str	r3, [r1, #36]	; 0x24
}
 8001f8e:	b002      	add	sp, #8
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	49742400 	.word	0x49742400
 8001f98:	00000000 	.word	0x00000000

08001f9c <start_motors>:

void start_motors(motor_config_t* config, uint16_t length){
	for (int i = 0; i < length; ++i) {
 8001f9c:	b169      	cbz	r1, 8001fba <start_motors+0x1e>
void start_motors(motor_config_t* config, uint16_t length){
 8001f9e:	b570      	push	{r4, r5, r6, lr}
 8001fa0:	460e      	mov	r6, r1
 8001fa2:	4604      	mov	r4, r0
	for (int i = 0; i < length; ++i) {
 8001fa4:	2500      	movs	r5, #0
		HAL_TIM_PWM_Start(config[i].tim, TIM_CHANNEL_1);
 8001fa6:	6920      	ldr	r0, [r4, #16]
	for (int i = 0; i < length; ++i) {
 8001fa8:	3501      	adds	r5, #1
		HAL_TIM_PWM_Start(config[i].tim, TIM_CHANNEL_1);
 8001faa:	2100      	movs	r1, #0
 8001fac:	f7ff fa2e 	bl	800140c <HAL_TIM_PWM_Start>
	for (int i = 0; i < length; ++i) {
 8001fb0:	42b5      	cmp	r5, r6
 8001fb2:	f104 0414 	add.w	r4, r4, #20
 8001fb6:	d1f6      	bne.n	8001fa6 <start_motors+0xa>
 8001fb8:	bd70      	pop	{r4, r5, r6, pc}
 8001fba:	4770      	bx	lr

08001fbc <stop_motors>:
	}
//	HAL_TIM_PWM_Start(config[0].tim, TIM_CHANNEL_1);
}

void stop_motors(motor_config_t* config, uint16_t length){
	for (int i = 0; i < length; ++i) {
 8001fbc:	b1e1      	cbz	r1, 8001ff8 <stop_motors+0x3c>
void stop_motors(motor_config_t* config, uint16_t length){
 8001fbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001fc2:	4688      	mov	r8, r1
 8001fc4:	4607      	mov	r7, r0
 8001fc6:	4604      	mov	r4, r0
	for (int i = 0; i < length; ++i) {
 8001fc8:	4606      	mov	r6, r0
 8001fca:	2500      	movs	r5, #0
		HAL_TIM_PWM_Stop(config[i].tim, TIM_CHANNEL_1);
 8001fcc:	6930      	ldr	r0, [r6, #16]
	for (int i = 0; i < length; ++i) {
 8001fce:	3501      	adds	r5, #1
		HAL_TIM_PWM_Stop(config[i].tim, TIM_CHANNEL_1);
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	f7ff fa7d 	bl	80014d0 <HAL_TIM_PWM_Stop>
	for (int i = 0; i < length; ++i) {
 8001fd6:	4545      	cmp	r5, r8
 8001fd8:	f106 0614 	add.w	r6, r6, #20
 8001fdc:	d1f6      	bne.n	8001fcc <stop_motors+0x10>
 8001fde:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8001fe2:	eb07 0585 	add.w	r5, r7, r5, lsl #2
	reset_motor_timers(config, length);
}

void reset_motor_timers(motor_config_t* config, uint16_t length){
	for (int i = 0; i < length; ++i) {
		__HAL_TIM_SET_COUNTER(config[i].tim, 0);
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	6923      	ldr	r3, [r4, #16]
 8001fea:	3414      	adds	r4, #20
 8001fec:	681b      	ldr	r3, [r3, #0]
	for (int i = 0; i < length; ++i) {
 8001fee:	42a5      	cmp	r5, r4
		__HAL_TIM_SET_COUNTER(config[i].tim, 0);
 8001ff0:	625a      	str	r2, [r3, #36]	; 0x24
	for (int i = 0; i < length; ++i) {
 8001ff2:	d1f9      	bne.n	8001fe8 <stop_motors+0x2c>
 8001ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop

08001ffc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001ffc:	b500      	push	{lr}
 8001ffe:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002000:	2200      	movs	r2, #0
 8002002:	4b0a      	ldr	r3, [pc, #40]	; (800202c <MX_DMA_Init+0x30>)
 8002004:	9201      	str	r2, [sp, #4]
 8002006:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002008:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 800200c:	6319      	str	r1, [r3, #48]	; 0x30
 800200e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002010:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002014:	9301      	str	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8002016:	4611      	mov	r1, r2
 8002018:	203a      	movs	r0, #58	; 0x3a
  __HAL_RCC_DMA2_CLK_ENABLE();
 800201a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800201c:	f7fe fad8 	bl	80005d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002020:	203a      	movs	r0, #58	; 0x3a
 8002022:	f7fe fb0b 	bl	800063c <HAL_NVIC_EnableIRQ>

}
 8002026:	b003      	add	sp, #12
 8002028:	f85d fb04 	ldr.w	pc, [sp], #4
 800202c:	40023800 	.word	0x40023800

08002030 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002030:	b086      	sub	sp, #24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002032:	4b1b      	ldr	r3, [pc, #108]	; (80020a0 <MX_GPIO_Init+0x70>)
 8002034:	2200      	movs	r2, #0
 8002036:	9201      	str	r2, [sp, #4]
 8002038:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800203a:	f041 0110 	orr.w	r1, r1, #16
 800203e:	6319      	str	r1, [r3, #48]	; 0x30
 8002040:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002042:	f001 0110 	and.w	r1, r1, #16
 8002046:	9101      	str	r1, [sp, #4]
 8002048:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800204a:	9202      	str	r2, [sp, #8]
 800204c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800204e:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8002052:	6319      	str	r1, [r3, #48]	; 0x30
 8002054:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002056:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800205a:	9102      	str	r1, [sp, #8]
 800205c:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800205e:	9203      	str	r2, [sp, #12]
 8002060:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002062:	f041 0101 	orr.w	r1, r1, #1
 8002066:	6319      	str	r1, [r3, #48]	; 0x30
 8002068:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800206a:	f001 0101 	and.w	r1, r1, #1
 800206e:	9103      	str	r1, [sp, #12]
 8002070:	9903      	ldr	r1, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002072:	9204      	str	r2, [sp, #16]
 8002074:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002076:	f041 0108 	orr.w	r1, r1, #8
 800207a:	6319      	str	r1, [r3, #48]	; 0x30
 800207c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800207e:	f001 0108 	and.w	r1, r1, #8
 8002082:	9104      	str	r1, [sp, #16]
 8002084:	9904      	ldr	r1, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002086:	9205      	str	r2, [sp, #20]
 8002088:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800208a:	f042 0202 	orr.w	r2, r2, #2
 800208e:	631a      	str	r2, [r3, #48]	; 0x30
 8002090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	9305      	str	r3, [sp, #20]
 8002098:	9b05      	ldr	r3, [sp, #20]

}
 800209a:	b006      	add	sp, #24
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	40023800 	.word	0x40023800

080020a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020a6:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020a8:	2230      	movs	r2, #48	; 0x30
 80020aa:	2100      	movs	r1, #0
 80020ac:	a808      	add	r0, sp, #32
 80020ae:	f001 fb40 	bl	8003732 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020b2:	2300      	movs	r3, #0

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80020b4:	4921      	ldr	r1, [pc, #132]	; (800213c <SystemClock_Config+0x98>)
 80020b6:	9301      	str	r3, [sp, #4]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020b8:	9304      	str	r3, [sp, #16]
 80020ba:	9303      	str	r3, [sp, #12]
 80020bc:	9305      	str	r3, [sp, #20]
 80020be:	9306      	str	r3, [sp, #24]
 80020c0:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020c2:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80020c4:	4a1e      	ldr	r2, [pc, #120]	; (8002140 <SystemClock_Config+0x9c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80020c6:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 80020ca:	6408      	str	r0, [r1, #64]	; 0x40
 80020cc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80020ce:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 80020d2:	9101      	str	r1, [sp, #4]
 80020d4:	9901      	ldr	r1, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80020d6:	9302      	str	r3, [sp, #8]
 80020d8:	6813      	ldr	r3, [r2, #0]
 80020da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80020de:	6013      	str	r3, [r2, #0]
 80020e0:	6813      	ldr	r3, [r2, #0]
 80020e2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80020e6:	9302      	str	r3, [sp, #8]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020e8:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
 80020ea:	2304      	movs	r3, #4
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80020ec:	2601      	movs	r6, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80020ee:	f44f 3580 	mov.w	r5, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80020f2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLN = 100;
 80020f6:	2264      	movs	r2, #100	; 0x64
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020f8:	a808      	add	r0, sp, #32
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80020fa:	9f02      	ldr	r7, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80020fc:	9608      	str	r6, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80020fe:	9509      	str	r5, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002100:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002102:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002104:	910f      	str	r1, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002106:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002108:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 100;
 800210a:	9211      	str	r2, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800210c:	f7fe fd48 	bl	8000ba0 <HAL_RCC_OscConfig>
 8002110:	b108      	cbz	r0, 8002116 <SystemClock_Config+0x72>
  __ASM volatile ("cpsid i" : : : "memory");
 8002112:	b672      	cpsid	i
 8002114:	e7fe      	b.n	8002114 <SystemClock_Config+0x70>
 8002116:	4603      	mov	r3, r0
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002118:	250f      	movs	r5, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800211a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800211e:	a803      	add	r0, sp, #12
 8002120:	2103      	movs	r1, #3
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002122:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002124:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002126:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002128:	9503      	str	r5, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800212a:	9206      	str	r2, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800212c:	f7fe ff54 	bl	8000fd8 <HAL_RCC_ClockConfig>
 8002130:	b108      	cbz	r0, 8002136 <SystemClock_Config+0x92>
 8002132:	b672      	cpsid	i
 8002134:	e7fe      	b.n	8002134 <SystemClock_Config+0x90>
  {
    Error_Handler();
  }
}
 8002136:	b015      	add	sp, #84	; 0x54
 8002138:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800213a:	bf00      	nop
 800213c:	40023800 	.word	0x40023800
 8002140:	40007000 	.word	0x40007000

08002144 <main>:
{
 8002144:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002146:	ed2d 8b02 	vpush	{d8}
 800214a:	f5ad 7d73 	sub.w	sp, sp, #972	; 0x3cc
  HAL_Init();
 800214e:	f7fe f9ef 	bl	8000530 <HAL_Init>
  SystemClock_Config();
 8002152:	f7ff ffa7 	bl	80020a4 <SystemClock_Config>
  MX_GPIO_Init();
 8002156:	f7ff ff6b 	bl	8002030 <MX_GPIO_Init>
  MX_TIM1_Init();
 800215a:	f000 fb23 	bl	80027a4 <MX_TIM1_Init>
  MX_TIM3_Init();
 800215e:	f000 fd5b 	bl	8002c18 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002162:	f000 fe71 	bl	8002e48 <MX_TIM4_Init>
  MX_TIM9_Init();
 8002166:	f001 f89b 	bl	80032a0 <MX_TIM9_Init>
  MX_DMA_Init();
 800216a:	f7ff ff47 	bl	8001ffc <MX_DMA_Init>
  MX_USART1_UART_Init();
 800216e:	f001 fa13 	bl	8003598 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8002172:	f000 fa6d 	bl	8002650 <MX_SPI1_Init>
  MX_TIM2_Init();
 8002176:	f000 fc37 	bl	80029e8 <MX_TIM2_Init>
  MX_TIM5_Init();
 800217a:	f000 ff7b 	bl	8003074 <MX_TIM5_Init>
  SYSCLK = HAL_RCC_GetSysClockFreq();
 800217e:	f7fe fef5 	bl	8000f6c <HAL_RCC_GetSysClockFreq>
 8002182:	4b32      	ldr	r3, [pc, #200]	; (800224c <main+0x108>)
  TIM_HandleTypeDef timers[] = {htim1, htim2, htim3, htim4, htim5, htim9};
 8002184:	4932      	ldr	r1, [pc, #200]	; (8002250 <main+0x10c>)
  SYSCLK = HAL_RCC_GetSysClockFreq();
 8002186:	6018      	str	r0, [r3, #0]
  TIM_HandleTypeDef timers[] = {htim1, htim2, htim3, htim4, htim5, htim9};
 8002188:	2248      	movs	r2, #72	; 0x48
 800218a:	a886      	add	r0, sp, #536	; 0x218
 800218c:	f001 fac6 	bl	800371c <memcpy>
 8002190:	2248      	movs	r2, #72	; 0x48
 8002192:	4930      	ldr	r1, [pc, #192]	; (8002254 <main+0x110>)
  num_motors = sizeof(timers)/sizeof(timers[0]);
 8002194:	4e30      	ldr	r6, [pc, #192]	; (8002258 <main+0x114>)
	  init_config(&motors[i], 100, 0, 0);
 8002196:	eddf 8a31 	vldr	s17, [pc, #196]	; 800225c <main+0x118>
 800219a:	ed9f 8a31 	vldr	s16, [pc, #196]	; 8002260 <main+0x11c>
  TIM_HandleTypeDef timers[] = {htim1, htim2, htim3, htim4, htim5, htim9};
 800219e:	a898      	add	r0, sp, #608	; 0x260
 80021a0:	f001 fabc 	bl	800371c <memcpy>
 80021a4:	2248      	movs	r2, #72	; 0x48
 80021a6:	492f      	ldr	r1, [pc, #188]	; (8002264 <main+0x120>)
 80021a8:	a8aa      	add	r0, sp, #680	; 0x2a8
 80021aa:	f001 fab7 	bl	800371c <memcpy>
 80021ae:	2248      	movs	r2, #72	; 0x48
 80021b0:	492d      	ldr	r1, [pc, #180]	; (8002268 <main+0x124>)
 80021b2:	a8bc      	add	r0, sp, #752	; 0x2f0
 80021b4:	f001 fab2 	bl	800371c <memcpy>
 80021b8:	2248      	movs	r2, #72	; 0x48
 80021ba:	492c      	ldr	r1, [pc, #176]	; (800226c <main+0x128>)
 80021bc:	a8ce      	add	r0, sp, #824	; 0x338
 80021be:	f001 faad 	bl	800371c <memcpy>
 80021c2:	2248      	movs	r2, #72	; 0x48
 80021c4:	492a      	ldr	r1, [pc, #168]	; (8002270 <main+0x12c>)
 80021c6:	a8e0      	add	r0, sp, #896	; 0x380
 80021c8:	f001 faa8 	bl	800371c <memcpy>
  num_motors = sizeof(timers)/sizeof(timers[0]);
 80021cc:	2306      	movs	r3, #6
 80021ce:	ac86      	add	r4, sp, #536	; 0x218
 80021d0:	6033      	str	r3, [r6, #0]
 80021d2:	ad0a      	add	r5, sp, #40	; 0x28
 80021d4:	2700      	movs	r7, #0
	  init_config(&motors[i], 100, 0, 0);
 80021d6:	4628      	mov	r0, r5
 80021d8:	eeb0 1a68 	vmov.f32	s2, s17
 80021dc:	eddf 0a1f 	vldr	s1, [pc, #124]	; 800225c <main+0x118>
	  motors[i].tim = &timers[i];
 80021e0:	612c      	str	r4, [r5, #16]
	  init_config(&motors[i], 100, 0, 0);
 80021e2:	eeb0 0a48 	vmov.f32	s0, s16
 80021e6:	f7ff fe27 	bl	8001e38 <init_config>
  for (int i = 0; i < num_motors; ++i) {
 80021ea:	6831      	ldr	r1, [r6, #0]
 80021ec:	3701      	adds	r7, #1
 80021ee:	428f      	cmp	r7, r1
 80021f0:	f104 0448 	add.w	r4, r4, #72	; 0x48
 80021f4:	f105 0514 	add.w	r5, r5, #20
 80021f8:	d3ed      	bcc.n	80021d6 <main+0x92>
  start_motors(motors, num_motors);
 80021fa:	b289      	uxth	r1, r1
 80021fc:	a80a      	add	r0, sp, #40	; 0x28
 80021fe:	f7ff fecd 	bl	8001f9c <start_motors>
  decoder_initialise(&decoder, &huart1);
 8002202:	4c1c      	ldr	r4, [pc, #112]	; (8002274 <main+0x130>)
  HAL_Delay(10);
 8002204:	200a      	movs	r0, #10
 8002206:	f7fe f9bf 	bl	8000588 <HAL_Delay>
  stop_motors(motors, num_motors);
 800220a:	8831      	ldrh	r1, [r6, #0]
 800220c:	a80a      	add	r0, sp, #40	; 0x28
 800220e:	f7ff fed5 	bl	8001fbc <stop_motors>
  decoder_initialise(&decoder, &huart1);
 8002212:	4621      	mov	r1, r4
 8002214:	a828      	add	r0, sp, #160	; 0xa0
 8002216:	f000 f831 	bl	800227c <decoder_initialise>
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);   // enable idle line interrupt
 800221a:	6822      	ldr	r2, [r4, #0]
 800221c:	68d3      	ldr	r3, [r2, #12]
 800221e:	f043 0310 	orr.w	r3, r3, #16
 8002222:	60d3      	str	r3, [r2, #12]
  HAL_UART_Receive_DMA(&huart1, decoder.buffer, DECODE_BUFFER_SIZE);
 8002224:	4620      	mov	r0, r4
 8002226:	f44f 7280 	mov.w	r2, #256	; 0x100
 800222a:	a92a      	add	r1, sp, #168	; 0xa8
 800222c:	f7ff fce6 	bl	8001bfc <HAL_UART_Receive_DMA>
	  get_new_data(&decoder);
 8002230:	a828      	add	r0, sp, #160	; 0xa0
 8002232:	f000 f83f 	bl	80022b4 <get_new_data>
	  ret = check_new_msg(&decoder, &packet);
 8002236:	a901      	add	r1, sp, #4
 8002238:	a828      	add	r0, sp, #160	; 0xa0
 800223a:	f000 f909 	bl	8002450 <check_new_msg>
	  if(ret == RET_OK){
 800223e:	2800      	cmp	r0, #0
 8002240:	d1f6      	bne.n	8002230 <main+0xec>
		  process_packet(&packet, motors);
 8002242:	a90a      	add	r1, sp, #40	; 0x28
 8002244:	a801      	add	r0, sp, #4
 8002246:	f000 f9a1 	bl	800258c <process_packet>
 800224a:	e7f1      	b.n	8002230 <main+0xec>
 800224c:	2000002c 	.word	0x2000002c
 8002250:	20000164 	.word	0x20000164
 8002254:	200001f4 	.word	0x200001f4
 8002258:	20000030 	.word	0x20000030
 800225c:	00000000 	.word	0x00000000
 8002260:	42c80000 	.word	0x42c80000
 8002264:	2000011c 	.word	0x2000011c
 8002268:	2000008c 	.word	0x2000008c
 800226c:	200000d4 	.word	0x200000d4
 8002270:	200001ac 	.word	0x200001ac
 8002274:	2000029c 	.word	0x2000029c

08002278 <Error_Handler>:
 8002278:	b672      	cpsid	i
 800227a:	e7fe      	b.n	800227a <Error_Handler+0x2>

0800227c <decoder_initialise>:
#include "protocol.h"

void decoder_initialise(decoder_t *decoder, UART_HandleTypeDef *huart){
 800227c:	b538      	push	{r3, r4, r5, lr}
 800227e:	4604      	mov	r4, r0
	decoder->buffer_length = 0;
 8002280:	2500      	movs	r5, #0
	decoder->huart = huart;
	decoder->head = decoder->buffer;
 8002282:	3008      	adds	r0, #8
	decoder->huart = huart;
 8002284:	f8c4 1174 	str.w	r1, [r4, #372]	; 0x174
	decoder->head = decoder->buffer;
 8002288:	6020      	str	r0, [r4, #0]
	decoder->tail = decoder->buffer;
	decoder->input_msg_byte_count = 0;
	decoder->input_msg_str_current_count = 0;
	memset(decoder->buffer, 0, DECODE_BUFFER_SIZE);
 800228a:	4629      	mov	r1, r5
	decoder->tail = decoder->buffer;
 800228c:	6060      	str	r0, [r4, #4]
	decoder->buffer_length = 0;
 800228e:	f8a4 5170 	strh.w	r5, [r4, #368]	; 0x170
	decoder->input_msg_byte_count = 0;
 8002292:	f8a4 516c 	strh.w	r5, [r4, #364]	; 0x16c
	decoder->input_msg_str_current_count = 0;
 8002296:	f8a4 516e 	strh.w	r5, [r4, #366]	; 0x16e
	memset(decoder->buffer, 0, DECODE_BUFFER_SIZE);
 800229a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800229e:	f001 fa48 	bl	8003732 <memset>
	memset(decoder->input_msg_buf, 0, 3 * MAX_PACKET_LENGTH);
 80022a2:	4629      	mov	r1, r5
 80022a4:	f504 7084 	add.w	r0, r4, #264	; 0x108
 80022a8:	2263      	movs	r2, #99	; 0x63
}
 80022aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memset(decoder->input_msg_buf, 0, 3 * MAX_PACKET_LENGTH);
 80022ae:	f001 ba40 	b.w	8003732 <memset>
 80022b2:	bf00      	nop

080022b4 <get_new_data>:
//	}
//	return bool_status;
//}

retval_t get_new_data(decoder_t *decoder) {
	decoder->head = decoder->buffer + DECODE_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(decoder->huart->hdmarx);
 80022b4:	f8d0 2174 	ldr.w	r2, [r0, #372]	; 0x174
	if (decoder->head > decoder->tail) {
 80022b8:	6843      	ldr	r3, [r0, #4]
	decoder->head = decoder->buffer + DECODE_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(decoder->huart->hdmarx);
 80022ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80022bc:	6812      	ldr	r2, [r2, #0]
retval_t get_new_data(decoder_t *decoder) {
 80022be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	decoder->head = decoder->buffer + DECODE_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(decoder->huart->hdmarx);
 80022c2:	6851      	ldr	r1, [r2, #4]
 80022c4:	f100 0e08 	add.w	lr, r0, #8
 80022c8:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 80022cc:	448e      	add	lr, r1
	if (decoder->head > decoder->tail) {
 80022ce:	459e      	cmp	lr, r3
retval_t get_new_data(decoder_t *decoder) {
 80022d0:	b083      	sub	sp, #12
	decoder->head = decoder->buffer + DECODE_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(decoder->huart->hdmarx);
 80022d2:	f8c0 e000 	str.w	lr, [r0]
	if (decoder->head > decoder->tail) {
 80022d6:	d965      	bls.n	80023a4 <get_new_data+0xf0>
		uint32_t new_data = decoder->head - decoder->tail;
		if ((decoder->input_msg_byte_count + new_data) > DECODE_BUFFER_SIZE) {
 80022d8:	f8b0 216c 	ldrh.w	r2, [r0, #364]	; 0x16c
		uint32_t new_data = decoder->head - decoder->tail;
 80022dc:	ebae 0503 	sub.w	r5, lr, r3
		if ((decoder->input_msg_byte_count + new_data) > DECODE_BUFFER_SIZE) {
 80022e0:	eb05 0802 	add.w	r8, r5, r2
 80022e4:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
 80022e8:	f200 8082 	bhi.w	80023f0 <get_new_data+0x13c>
			decoder->input_msg_byte_count = 0;
			return RET_ERROR;	//COMMAND BUFFER OVERFLOW
		}
		for (int i = 0; i < new_data; i++) {
 80022ec:	2d00      	cmp	r5, #0
 80022ee:	d051      	beq.n	8002394 <get_new_data+0xe0>
 80022f0:	f502 7684 	add.w	r6, r2, #264	; 0x108
 80022f4:	f502 7186 	add.w	r1, r2, #268	; 0x10c
 80022f8:	1984      	adds	r4, r0, r6
 80022fa:	4401      	add	r1, r0
 80022fc:	1d1f      	adds	r7, r3, #4
 80022fe:	4299      	cmp	r1, r3
 8002300:	bf88      	it	hi
 8002302:	42a7      	cmphi	r7, r4
 8002304:	f200 8091 	bhi.w	800242a <get_new_data+0x176>
 8002308:	2d0b      	cmp	r5, #11
 800230a:	f240 808e 	bls.w	800242a <get_new_data+0x176>
 800230e:	4264      	negs	r4, r4
 8002310:	f014 0403 	ands.w	r4, r4, #3
 8002314:	d07e      	beq.n	8002414 <get_new_data+0x160>
			decoder->input_msg_buf[i + decoder->input_msg_byte_count] = decoder->tail[i];
 8002316:	1881      	adds	r1, r0, r2
 8002318:	781f      	ldrb	r7, [r3, #0]
 800231a:	f881 7108 	strb.w	r7, [r1, #264]	; 0x108
 800231e:	2c01      	cmp	r4, #1
 8002320:	d078      	beq.n	8002414 <get_new_data+0x160>
 8002322:	785f      	ldrb	r7, [r3, #1]
 8002324:	f881 7109 	strb.w	r7, [r1, #265]	; 0x109
 8002328:	2c03      	cmp	r4, #3
 800232a:	f040 808b 	bne.w	8002444 <get_new_data+0x190>
 800232e:	789f      	ldrb	r7, [r3, #2]
 8002330:	f881 710a 	strb.w	r7, [r1, #266]	; 0x10a
		for (int i = 0; i < new_data; i++) {
 8002334:	46a1      	mov	r9, r4
 8002336:	9401      	str	r4, [sp, #4]
 8002338:	eba5 0b04 	sub.w	fp, r5, r4
 800233c:	f1ab 0c04 	sub.w	ip, fp, #4
 8002340:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
 8002344:	4426      	add	r6, r4
 8002346:	f10c 0c01 	add.w	ip, ip, #1
 800234a:	4406      	add	r6, r0
 800234c:	441c      	add	r4, r3
 800234e:	ea4f 0a8c 	mov.w	sl, ip, lsl #2
 8002352:	2100      	movs	r1, #0
 8002354:	3101      	adds	r1, #1
			decoder->input_msg_buf[i + decoder->input_msg_byte_count] = decoder->tail[i];
 8002356:	f854 7b04 	ldr.w	r7, [r4], #4
 800235a:	f846 7b04 	str.w	r7, [r6], #4
 800235e:	458c      	cmp	ip, r1
 8002360:	d8f8      	bhi.n	8002354 <get_new_data+0xa0>
 8002362:	9901      	ldr	r1, [sp, #4]
 8002364:	45d3      	cmp	fp, sl
 8002366:	4451      	add	r1, sl
 8002368:	44d1      	add	r9, sl
 800236a:	d013      	beq.n	8002394 <get_new_data+0xe0>
 800236c:	4402      	add	r2, r0
 800236e:	1854      	adds	r4, r2, r1
 8002370:	f813 6009 	ldrb.w	r6, [r3, r9]
 8002374:	f884 6108 	strb.w	r6, [r4, #264]	; 0x108
		for (int i = 0; i < new_data; i++) {
 8002378:	1c4c      	adds	r4, r1, #1
 800237a:	42a5      	cmp	r5, r4
 800237c:	d90a      	bls.n	8002394 <get_new_data+0xe0>
			decoder->input_msg_buf[i + decoder->input_msg_byte_count] = decoder->tail[i];
 800237e:	1916      	adds	r6, r2, r4
		for (int i = 0; i < new_data; i++) {
 8002380:	3102      	adds	r1, #2
			decoder->input_msg_buf[i + decoder->input_msg_byte_count] = decoder->tail[i];
 8002382:	5d1c      	ldrb	r4, [r3, r4]
 8002384:	f886 4108 	strb.w	r4, [r6, #264]	; 0x108
		for (int i = 0; i < new_data; i++) {
 8002388:	428d      	cmp	r5, r1
 800238a:	d903      	bls.n	8002394 <get_new_data+0xe0>
			decoder->input_msg_buf[i + decoder->input_msg_byte_count] = decoder->tail[i];
 800238c:	440a      	add	r2, r1
 800238e:	5c5b      	ldrb	r3, [r3, r1]
 8002390:	f882 3108 	strb.w	r3, [r2, #264]	; 0x108
		}
		decoder->input_msg_byte_count += new_data;
 8002394:	f8a0 816c 	strh.w	r8, [r0, #364]	; 0x16c
		decoder->tail = decoder->head;
 8002398:	f8c0 e004 	str.w	lr, [r0, #4]
			}
		}
		decoder->input_msg_byte_count += new_data;
		decoder->tail = decoder->head;
	}
	return RET_OK;
 800239c:	2000      	movs	r0, #0
}
 800239e:	b003      	add	sp, #12
 80023a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (decoder->head < decoder->tail) {
 80023a4:	d22b      	bcs.n	80023fe <get_new_data+0x14a>
		uint32_t diff_end = decoder->buffer + DECODE_BUFFER_SIZE - decoder->tail;
 80023a6:	f500 7684 	add.w	r6, r0, #264	; 0x108
 80023aa:	1af6      	subs	r6, r6, r3
		if ((decoder->input_msg_byte_count + new_data) > DECODE_BUFFER_SIZE) {
 80023ac:	f8b0 216c 	ldrh.w	r2, [r0, #364]	; 0x16c
		uint32_t new_data = diff_end + diff_start;
 80023b0:	4431      	add	r1, r6
		if ((decoder->input_msg_byte_count + new_data) > DECODE_BUFFER_SIZE) {
 80023b2:	eb01 0c02 	add.w	ip, r1, r2
 80023b6:	f5bc 7f80 	cmp.w	ip, #256	; 0x100
 80023ba:	d824      	bhi.n	8002406 <get_new_data+0x152>
		for (int i = 0; i < new_data; i++) {
 80023bc:	b181      	cbz	r1, 80023e0 <get_new_data+0x12c>
 80023be:	f502 7284 	add.w	r2, r2, #264	; 0x108
 80023c2:	f1c6 0508 	rsb	r5, r6, #8
 80023c6:	1884      	adds	r4, r0, r2
 80023c8:	4405      	add	r5, r0
 80023ca:	2200      	movs	r2, #0
			if (i < diff_end) {
 80023cc:	4296      	cmp	r6, r2
 80023ce:	d924      	bls.n	800241a <get_new_data+0x166>
				decoder->input_msg_buf[i + decoder->input_msg_byte_count] = decoder->tail[i];
 80023d0:	5c9f      	ldrb	r7, [r3, r2]
 80023d2:	f804 7b01 	strb.w	r7, [r4], #1
		for (int i = 0; i < new_data; i++) {
 80023d6:	3201      	adds	r2, #1
 80023d8:	428a      	cmp	r2, r1
 80023da:	f105 0501 	add.w	r5, r5, #1
 80023de:	d1f5      	bne.n	80023cc <get_new_data+0x118>
		decoder->input_msg_byte_count += new_data;
 80023e0:	f8a0 c16c 	strh.w	ip, [r0, #364]	; 0x16c
		decoder->tail = decoder->head;
 80023e4:	f8c0 e004 	str.w	lr, [r0, #4]
	return RET_OK;
 80023e8:	2000      	movs	r0, #0
}
 80023ea:	b003      	add	sp, #12
 80023ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			decoder->input_msg_byte_count = 0;
 80023f0:	2300      	movs	r3, #0
 80023f2:	f8a0 316c 	strh.w	r3, [r0, #364]	; 0x16c
			return RET_ERROR;	//COMMAND BUFFER OVERFLOW
 80023f6:	2001      	movs	r0, #1
}
 80023f8:	b003      	add	sp, #12
 80023fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return RET_OK;
 80023fe:	2000      	movs	r0, #0
}
 8002400:	b003      	add	sp, #12
 8002402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			decoder->input_msg_byte_count = 0;
 8002406:	2300      	movs	r3, #0
 8002408:	f8c0 316c 	str.w	r3, [r0, #364]	; 0x16c
			return RET_ERROR;	//COMMAND BUFFER OVERFLOW
 800240c:	2001      	movs	r0, #1
}
 800240e:	b003      	add	sp, #12
 8002410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (int i = 0; i < new_data; i++) {
 8002414:	46a1      	mov	r9, r4
 8002416:	9401      	str	r4, [sp, #4]
 8002418:	e78e      	b.n	8002338 <get_new_data+0x84>
		for (int i = 0; i < new_data; i++) {
 800241a:	3201      	adds	r2, #1
				decoder->input_msg_buf[i + decoder->input_msg_byte_count] = decoder->buffer[i - diff_end];
 800241c:	f815 7b01 	ldrb.w	r7, [r5], #1
 8002420:	f804 7b01 	strb.w	r7, [r4], #1
		for (int i = 0; i < new_data; i++) {
 8002424:	428a      	cmp	r2, r1
 8002426:	d1d1      	bne.n	80023cc <get_new_data+0x118>
 8002428:	e7da      	b.n	80023e0 <get_new_data+0x12c>
 800242a:	f202 1207 	addw	r2, r2, #263	; 0x107
 800242e:	1e6c      	subs	r4, r5, #1
 8002430:	441c      	add	r4, r3
 8002432:	4402      	add	r2, r0
 8002434:	3b01      	subs	r3, #1
			decoder->input_msg_buf[i + decoder->input_msg_byte_count] = decoder->tail[i];
 8002436:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800243a:	f802 1f01 	strb.w	r1, [r2, #1]!
		for (int i = 0; i < new_data; i++) {
 800243e:	42a3      	cmp	r3, r4
 8002440:	d1f9      	bne.n	8002436 <get_new_data+0x182>
 8002442:	e7a7      	b.n	8002394 <get_new_data+0xe0>
 8002444:	f04f 0902 	mov.w	r9, #2
 8002448:	f8cd 9004 	str.w	r9, [sp, #4]
 800244c:	e774      	b.n	8002338 <get_new_data+0x84>
 800244e:	bf00      	nop

08002450 <check_new_msg>:

retval_t check_new_msg(decoder_t *decoder, packet_t *packet) {
	for (int i = decoder->input_msg_str_current_count; i < decoder->input_msg_byte_count - HEADER_SIZE + 1; i++) {
 8002450:	f8b0 c16c 	ldrh.w	ip, [r0, #364]	; 0x16c
 8002454:	f8b0 316e 	ldrh.w	r3, [r0, #366]	; 0x16e
retval_t check_new_msg(decoder_t *decoder, packet_t *packet) {
 8002458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (int i = decoder->input_msg_str_current_count; i < decoder->input_msg_byte_count - HEADER_SIZE + 1; i++) {
 800245c:	f1ac 0603 	sub.w	r6, ip, #3
 8002460:	42b3      	cmp	r3, r6
 8002462:	da21      	bge.n	80024a8 <check_new_msg+0x58>
 8002464:	f503 7284 	add.w	r2, r3, #264	; 0x108
 8002468:	4402      	add	r2, r0
 800246a:	1c5c      	adds	r4, r3, #1
 800246c:	e006      	b.n	800247c <check_new_msg+0x2c>
 800246e:	4625      	mov	r5, r4
 8002470:	42ae      	cmp	r6, r5
			}
			decoder->input_msg_str_current_count = 0;
			decoder->input_msg_byte_count = extra_bytes;
			return RET_OK;
		} else {
			decoder->input_msg_str_current_count += HEADER_SIZE;
 8002472:	f8a0 316e 	strh.w	r3, [r0, #366]	; 0x16e
 8002476:	f104 0401 	add.w	r4, r4, #1
	for (int i = decoder->input_msg_str_current_count; i < decoder->input_msg_byte_count - HEADER_SIZE + 1; i++) {
 800247a:	dd15      	ble.n	80024a8 <check_new_msg+0x58>
		if ((decoder->input_msg_buf[i] == 0xFF) && (decoder->input_msg_buf[i + 1] == 0xFA)) {
 800247c:	f812 5b01 	ldrb.w	r5, [r2], #1
			decoder->input_msg_str_current_count += HEADER_SIZE;
 8002480:	3304      	adds	r3, #4
		if ((decoder->input_msg_buf[i] == 0xFF) && (decoder->input_msg_buf[i + 1] == 0xFA)) {
 8002482:	2dff      	cmp	r5, #255	; 0xff
			decoder->input_msg_str_current_count += HEADER_SIZE;
 8002484:	b29b      	uxth	r3, r3
 8002486:	f104 37ff 	add.w	r7, r4, #4294967295
		if ((decoder->input_msg_buf[i] == 0xFF) && (decoder->input_msg_buf[i + 1] == 0xFA)) {
 800248a:	d1f0      	bne.n	800246e <check_new_msg+0x1e>
 800248c:	f892 e000 	ldrb.w	lr, [r2]
 8002490:	f1be 0ffa 	cmp.w	lr, #250	; 0xfa
 8002494:	4625      	mov	r5, r4
 8002496:	d1eb      	bne.n	8002470 <check_new_msg+0x20>
			uint8_t length = decoder->input_msg_buf[i+2];
 8002498:	19c3      	adds	r3, r0, r7
 800249a:	f893 210a 	ldrb.w	r2, [r3, #266]	; 0x10a
			uint16_t msg_length = HEADER_SIZE + length;
 800249e:	1d16      	adds	r6, r2, #4
			if (i + msg_length > decoder->input_msg_byte_count) {
 80024a0:	eb06 0807 	add.w	r8, r6, r7
 80024a4:	45e0      	cmp	r8, ip
 80024a6:	dd02      	ble.n	80024ae <check_new_msg+0x5e>
		}
	}
	return ERROR;
 80024a8:	2001      	movs	r0, #1
 80024aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			packet->length = length;
 80024ae:	700a      	strb	r2, [r1, #0]
			packet->command = decoder->input_msg_buf[i+3];
 80024b0:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 80024b4:	704b      	strb	r3, [r1, #1]
 80024b6:	4605      	mov	r5, r0
			memcpy(packet->data, &decoder->input_msg_buf[i+4], length * sizeof(uint8_t));
 80024b8:	f204 130b 	addw	r3, r4, #267	; 0x10b
 80024bc:	1c88      	adds	r0, r1, #2
 80024be:	18e9      	adds	r1, r5, r3
 80024c0:	f001 f92c 	bl	800371c <memcpy>
			uint16_t extra_bytes = decoder->input_msg_byte_count - i - msg_length; //number of bytes after message
 80024c4:	f8b5 016c 	ldrh.w	r0, [r5, #364]	; 0x16c
 80024c8:	1bc0      	subs	r0, r0, r7
 80024ca:	1b80      	subs	r0, r0, r6
 80024cc:	b280      	uxth	r0, r0
			for (int j = 0; j < extra_bytes; j++) {	//Moves everything (if exists) after message detected to the beginning
 80024ce:	2800      	cmp	r0, #0
 80024d0:	d041      	beq.n	8002556 <check_new_msg+0x106>
 80024d2:	f508 7284 	add.w	r2, r8, #264	; 0x108
 80024d6:	f508 7386 	add.w	r3, r8, #268	; 0x10c
 80024da:	442a      	add	r2, r5
 80024dc:	442b      	add	r3, r5
 80024de:	f505 7184 	add.w	r1, r5, #264	; 0x108
 80024e2:	f505 7e86 	add.w	lr, r5, #268	; 0x10c
 80024e6:	428b      	cmp	r3, r1
 80024e8:	bf88      	it	hi
 80024ea:	4596      	cmphi	lr, r2
 80024ec:	d83b      	bhi.n	8002566 <check_new_msg+0x116>
 80024ee:	2808      	cmp	r0, #8
 80024f0:	d939      	bls.n	8002566 <check_new_msg+0x116>
 80024f2:	f1a0 0e04 	sub.w	lr, r0, #4
 80024f6:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
 80024fa:	f10e 0e01 	add.w	lr, lr, #1
 80024fe:	ea4f 0c8e 	mov.w	ip, lr, lsl #2
 8002502:	2300      	movs	r3, #0
 8002504:	3301      	adds	r3, #1
				decoder->input_msg_buf[j] = decoder->input_msg_buf[i + j + msg_length];
 8002506:	f852 4b04 	ldr.w	r4, [r2], #4
 800250a:	f841 4b04 	str.w	r4, [r1], #4
 800250e:	459e      	cmp	lr, r3
 8002510:	d8f8      	bhi.n	8002504 <check_new_msg+0xb4>
 8002512:	4560      	cmp	r0, ip
 8002514:	d01f      	beq.n	8002556 <check_new_msg+0x106>
 8002516:	442e      	add	r6, r5
 8002518:	eb06 020c 	add.w	r2, r6, ip
 800251c:	443a      	add	r2, r7
 800251e:	eb05 030c 	add.w	r3, r5, ip
 8002522:	f892 2108 	ldrb.w	r2, [r2, #264]	; 0x108
 8002526:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
			for (int j = 0; j < extra_bytes; j++) {	//Moves everything (if exists) after message detected to the beginning
 800252a:	f10c 0301 	add.w	r3, ip, #1
 800252e:	4283      	cmp	r3, r0
 8002530:	da11      	bge.n	8002556 <check_new_msg+0x106>
				decoder->input_msg_buf[j] = decoder->input_msg_buf[i + j + msg_length];
 8002532:	18f2      	adds	r2, r6, r3
 8002534:	443a      	add	r2, r7
 8002536:	442b      	add	r3, r5
			for (int j = 0; j < extra_bytes; j++) {	//Moves everything (if exists) after message detected to the beginning
 8002538:	f10c 0c02 	add.w	ip, ip, #2
				decoder->input_msg_buf[j] = decoder->input_msg_buf[i + j + msg_length];
 800253c:	f892 2108 	ldrb.w	r2, [r2, #264]	; 0x108
 8002540:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
			for (int j = 0; j < extra_bytes; j++) {	//Moves everything (if exists) after message detected to the beginning
 8002544:	4560      	cmp	r0, ip
 8002546:	dd06      	ble.n	8002556 <check_new_msg+0x106>
				decoder->input_msg_buf[j] = decoder->input_msg_buf[i + j + msg_length];
 8002548:	4466      	add	r6, ip
 800254a:	4437      	add	r7, r6
 800254c:	44ac      	add	ip, r5
 800254e:	f897 3108 	ldrb.w	r3, [r7, #264]	; 0x108
 8002552:	f88c 3108 	strb.w	r3, [ip, #264]	; 0x108
			decoder->input_msg_str_current_count = 0;
 8002556:	2300      	movs	r3, #0
			decoder->input_msg_byte_count = extra_bytes;
 8002558:	f8a5 016c 	strh.w	r0, [r5, #364]	; 0x16c
			decoder->input_msg_str_current_count = 0;
 800255c:	f8a5 316e 	strh.w	r3, [r5, #366]	; 0x16e
			return RET_OK;
 8002560:	4618      	mov	r0, r3
 8002562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002566:	f504 7283 	add.w	r2, r4, #262	; 0x106
 800256a:	4432      	add	r2, r6
 800256c:	1933      	adds	r3, r6, r4
 800256e:	f503 7383 	add.w	r3, r3, #262	; 0x106
 8002572:	1814      	adds	r4, r2, r0
 8002574:	442c      	add	r4, r5
 8002576:	442b      	add	r3, r5
 8002578:	f205 1207 	addw	r2, r5, #263	; 0x107
				decoder->input_msg_buf[j] = decoder->input_msg_buf[i + j + msg_length];
 800257c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8002580:	f802 1f01 	strb.w	r1, [r2, #1]!
			for (int j = 0; j < extra_bytes; j++) {	//Moves everything (if exists) after message detected to the beginning
 8002584:	42a3      	cmp	r3, r4
 8002586:	d1f9      	bne.n	800257c <check_new_msg+0x12c>
 8002588:	e7e5      	b.n	8002556 <check_new_msg+0x106>
 800258a:	bf00      	nop

0800258c <process_packet>:
}

void process_packet(packet_t *packet, motor_config_t *motors){
	enum commands cmd = packet->command;
	switch(cmd){
 800258c:	7843      	ldrb	r3, [r0, #1]
void process_packet(packet_t *packet, motor_config_t *motors){
 800258e:	4602      	mov	r2, r0
	switch(cmd){
 8002590:	2b05      	cmp	r3, #5
 8002592:	d809      	bhi.n	80025a8 <process_packet+0x1c>
 8002594:	e8df f003 	tbb	[pc, r3]
 8002598:	033d2e0d 	.word	0x033d2e0d
 800259c:	094c      	.short	0x094c
		motor_set_duty(&motors[n_motor], duty);
		break;
	}
	case SET_DELAY:{
		uint8_t n_motor = packet->data[0];
		if(n_motor > num_motors){
 800259e:	4b2b      	ldr	r3, [pc, #172]	; (800264c <process_packet+0xc0>)
		uint8_t n_motor = packet->data[0];
 80025a0:	7890      	ldrb	r0, [r2, #2]
		if(n_motor > num_motors){
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4298      	cmp	r0, r3
 80025a6:	d947      	bls.n	8002638 <process_packet+0xac>
 80025a8:	4770      	bx	lr
	}
	case ACTIVATE_MOTORS:
		start_motors(motors, 6);
		break;
	case STOP_MOTORS:
		stop_motors(motors, 6);
 80025aa:	4608      	mov	r0, r1
 80025ac:	2106      	movs	r1, #6
 80025ae:	f7ff bd05 	b.w	8001fbc <stop_motors>
		if(n_motor > num_motors){
 80025b2:	4826      	ldr	r0, [pc, #152]	; (800264c <process_packet+0xc0>)
		uint8_t n_motor = packet->data[0];
 80025b4:	7893      	ldrb	r3, [r2, #2]
		if(n_motor > num_motors){
 80025b6:	6800      	ldr	r0, [r0, #0]
 80025b8:	4283      	cmp	r3, r0
 80025ba:	d8f5      	bhi.n	80025a8 <process_packet+0x1c>
void process_packet(packet_t *packet, motor_config_t *motors){
 80025bc:	b570      	push	{r4, r5, r6, lr}
		motor_set_freq(&motors[n_motor], freq);
 80025be:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80025c2:	eb01 0483 	add.w	r4, r1, r3, lsl #2
 80025c6:	f8d2 3003 	ldr.w	r3, [r2, #3]
 80025ca:	f8d2 600b 	ldr.w	r6, [r2, #11]
 80025ce:	f8d2 500f 	ldr.w	r5, [r2, #15]
 80025d2:	4620      	mov	r0, r4
 80025d4:	ee00 3a10 	vmov	s0, r3
 80025d8:	f7ff fc76 	bl	8001ec8 <motor_set_freq>
		motor_set_duty(&motors[n_motor], duty);
 80025dc:	ee00 6a10 	vmov	s0, r6
 80025e0:	4620      	mov	r0, r4
 80025e2:	f7ff fca1 	bl	8001f28 <motor_set_duty>
		motor_set_delay_us(&motors[n_motor], delay);
 80025e6:	ee00 5a10 	vmov	s0, r5
 80025ea:	4620      	mov	r0, r4
		break;
	}
}
 80025ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		motor_set_delay_us(&motors[n_motor], delay);
 80025f0:	f7ff bcaa 	b.w	8001f48 <motor_set_delay_us>
		if(n_motor > num_motors){
 80025f4:	4b15      	ldr	r3, [pc, #84]	; (800264c <process_packet+0xc0>)
		uint8_t n_motor = packet->data[0];
 80025f6:	7890      	ldrb	r0, [r2, #2]
		if(n_motor > num_motors){
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4298      	cmp	r0, r3
 80025fc:	d8d4      	bhi.n	80025a8 <process_packet+0x1c>
		motor_set_freq(&motors[n_motor], freq);
 80025fe:	f8d2 3003 	ldr.w	r3, [r2, #3]
 8002602:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002606:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 800260a:	ee00 3a10 	vmov	s0, r3
 800260e:	f7ff bc5b 	b.w	8001ec8 <motor_set_freq>
		if(n_motor > num_motors){
 8002612:	4b0e      	ldr	r3, [pc, #56]	; (800264c <process_packet+0xc0>)
		uint8_t n_motor = packet->data[0];
 8002614:	7890      	ldrb	r0, [r2, #2]
		if(n_motor > num_motors){
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4298      	cmp	r0, r3
 800261a:	d8c5      	bhi.n	80025a8 <process_packet+0x1c>
		motor_set_duty(&motors[n_motor], duty);
 800261c:	f8d2 3003 	ldr.w	r3, [r2, #3]
 8002620:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002624:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 8002628:	ee00 3a10 	vmov	s0, r3
 800262c:	f7ff bc7c 	b.w	8001f28 <motor_set_duty>
		start_motors(motors, 6);
 8002630:	4608      	mov	r0, r1
 8002632:	2106      	movs	r1, #6
 8002634:	f7ff bcb2 	b.w	8001f9c <start_motors>
		motor_set_delay_us(&motors[n_motor], delay);
 8002638:	f8d2 3003 	ldr.w	r3, [r2, #3]
 800263c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002640:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 8002644:	ee00 3a10 	vmov	s0, r3
 8002648:	f7ff bc7e 	b.w	8001f48 <motor_set_delay_us>
 800264c:	20000030 	.word	0x20000030

08002650 <MX_SPI1_Init>:
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002650:	4b0d      	ldr	r3, [pc, #52]	; (8002688 <MX_SPI1_Init+0x38>)
 8002652:	4a0e      	ldr	r2, [pc, #56]	; (800268c <MX_SPI1_Init+0x3c>)
{
 8002654:	b510      	push	{r4, lr}
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 10;
 8002656:	210a      	movs	r1, #10
  hspi1.Instance = SPI1;
 8002658:	601a      	str	r2, [r3, #0]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800265a:	f44f 7400 	mov.w	r4, #512	; 0x200
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800265e:	2200      	movs	r2, #0
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002660:	4618      	mov	r0, r3
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002662:	619c      	str	r4, [r3, #24]
  hspi1.Init.CRCPolynomial = 10;
 8002664:	62d9      	str	r1, [r3, #44]	; 0x2c
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8002666:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002668:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800266a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800266c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800266e:	615a      	str	r2, [r3, #20]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002670:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002672:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002674:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002676:	f7fe fd6d 	bl	8001154 <HAL_SPI_Init>
 800267a:	b900      	cbnz	r0, 800267e <MX_SPI1_Init+0x2e>
 800267c:	bd10      	pop	{r4, pc}
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800267e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8002682:	f7ff bdf9 	b.w	8002278 <Error_Handler>
 8002686:	bf00      	nop
 8002688:	20000034 	.word	0x20000034
 800268c:	40013000 	.word	0x40013000

08002690 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002690:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(spiHandle->Instance==SPI1)
 8002692:	6802      	ldr	r2, [r0, #0]
 8002694:	4b21      	ldr	r3, [pc, #132]	; (800271c <HAL_SPI_MspInit+0x8c>)
{
 8002696:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002698:	2400      	movs	r4, #0
  if(spiHandle->Instance==SPI1)
 800269a:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800269c:	9404      	str	r4, [sp, #16]
 800269e:	9403      	str	r4, [sp, #12]
 80026a0:	9405      	str	r4, [sp, #20]
 80026a2:	9406      	str	r4, [sp, #24]
 80026a4:	9407      	str	r4, [sp, #28]
  if(spiHandle->Instance==SPI1)
 80026a6:	d001      	beq.n	80026ac <HAL_SPI_MspInit+0x1c>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80026a8:	b009      	add	sp, #36	; 0x24
 80026aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 80026ac:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 80026b0:	9400      	str	r4, [sp, #0]
 80026b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026b4:	481a      	ldr	r0, [pc, #104]	; (8002720 <HAL_SPI_MspInit+0x90>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 80026b6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80026ba:	645a      	str	r2, [r3, #68]	; 0x44
 80026bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026be:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80026c2:	9200      	str	r2, [sp, #0]
 80026c4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026c6:	9401      	str	r4, [sp, #4]
 80026c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026ca:	f042 0201 	orr.w	r2, r2, #1
 80026ce:	631a      	str	r2, [r3, #48]	; 0x30
 80026d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026d2:	f002 0201 	and.w	r2, r2, #1
 80026d6:	9201      	str	r2, [sp, #4]
 80026d8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026da:	9402      	str	r4, [sp, #8]
 80026dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026de:	f042 0202 	orr.w	r2, r2, #2
 80026e2:	631a      	str	r2, [r3, #48]	; 0x30
 80026e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ec:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80026ee:	23a0      	movs	r3, #160	; 0xa0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026f0:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80026f2:	2505      	movs	r5, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026f4:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026f6:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80026f8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026fa:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026fc:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80026fe:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002700:	f7fe f96c 	bl	80009dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002704:	2310      	movs	r3, #16
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002706:	a903      	add	r1, sp, #12
 8002708:	4806      	ldr	r0, [pc, #24]	; (8002724 <HAL_SPI_MspInit+0x94>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800270a:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800270c:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800270e:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002710:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002712:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002714:	f7fe f962 	bl	80009dc <HAL_GPIO_Init>
}
 8002718:	b009      	add	sp, #36	; 0x24
 800271a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800271c:	40013000 	.word	0x40013000
 8002720:	40020000 	.word	0x40020000
 8002724:	40020400 	.word	0x40020400

08002728 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002728:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800272a:	4b0c      	ldr	r3, [pc, #48]	; (800275c <HAL_MspInit+0x34>)
 800272c:	2100      	movs	r1, #0
 800272e:	9100      	str	r1, [sp, #0]
 8002730:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002732:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002736:	645a      	str	r2, [r3, #68]	; 0x44
 8002738:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800273a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800273e:	9200      	str	r2, [sp, #0]
 8002740:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002742:	9101      	str	r1, [sp, #4]
 8002744:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002746:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800274a:	641a      	str	r2, [r3, #64]	; 0x40
 800274c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002752:	9301      	str	r3, [sp, #4]
 8002754:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002756:	b002      	add	sp, #8
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	40023800 	.word	0x40023800

08002760 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002760:	e7fe      	b.n	8002760 <NMI_Handler>
 8002762:	bf00      	nop

08002764 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002764:	e7fe      	b.n	8002764 <HardFault_Handler>
 8002766:	bf00      	nop

08002768 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002768:	e7fe      	b.n	8002768 <MemManage_Handler>
 800276a:	bf00      	nop

0800276c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800276c:	e7fe      	b.n	800276c <BusFault_Handler>
 800276e:	bf00      	nop

08002770 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002770:	e7fe      	b.n	8002770 <UsageFault_Handler>
 8002772:	bf00      	nop

08002774 <SVC_Handler>:
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop

08002778 <DebugMon_Handler>:
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop

0800277c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop

08002780 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002780:	f7fd bef0 	b.w	8000564 <HAL_IncTick>

08002784 <DMA2_Stream2_IRQHandler>:
void DMA2_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002784:	4801      	ldr	r0, [pc, #4]	; (800278c <DMA2_Stream2_IRQHandler+0x8>)
 8002786:	f7fe b859 	b.w	800083c <HAL_DMA_IRQHandler>
 800278a:	bf00      	nop
 800278c:	2000023c 	.word	0x2000023c

08002790 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002790:	4a03      	ldr	r2, [pc, #12]	; (80027a0 <SystemInit+0x10>)
 8002792:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002796:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800279a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800279e:	4770      	bx	lr
 80027a0:	e000ed00 	.word	0xe000ed00

080027a4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim9;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80027a4:	b530      	push	{r4, r5, lr}

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027a6:	2400      	movs	r4, #0
{
 80027a8:	b0a1      	sub	sp, #132	; 0x84
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80027aa:	4d85      	ldr	r5, [pc, #532]	; (80029c0 <MX_TIM1_Init+0x21c>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027ac:	9409      	str	r4, [sp, #36]	; 0x24
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80027ae:	2220      	movs	r2, #32
 80027b0:	4621      	mov	r1, r4
 80027b2:	a818      	add	r0, sp, #96	; 0x60
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027b4:	9408      	str	r4, [sp, #32]
 80027b6:	940a      	str	r4, [sp, #40]	; 0x28
 80027b8:	940b      	str	r4, [sp, #44]	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027ba:	9406      	str	r4, [sp, #24]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027bc:	9411      	str	r4, [sp, #68]	; 0x44
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027be:	9407      	str	r4, [sp, #28]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027c0:	9412      	str	r4, [sp, #72]	; 0x48
 80027c2:	9413      	str	r4, [sp, #76]	; 0x4c
 80027c4:	9414      	str	r4, [sp, #80]	; 0x50
 80027c6:	9415      	str	r4, [sp, #84]	; 0x54
 80027c8:	9416      	str	r4, [sp, #88]	; 0x58
 80027ca:	9417      	str	r4, [sp, #92]	; 0x5c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80027cc:	f000 ffb1 	bl	8003732 <memset>
  htim1.Instance = TIM1;
 80027d0:	4a7c      	ldr	r2, [pc, #496]	; (80029c4 <MX_TIM1_Init+0x220>)
  htim1.Init.Prescaler = 0;
 80027d2:	606c      	str	r4, [r5, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 65535;
 80027d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80027d8:	4628      	mov	r0, r5
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027da:	60ac      	str	r4, [r5, #8]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027dc:	612c      	str	r4, [r5, #16]
  htim1.Init.RepetitionCounter = 0;
 80027de:	616c      	str	r4, [r5, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027e0:	61ac      	str	r4, [r5, #24]
  htim1.Instance = TIM1;
 80027e2:	602a      	str	r2, [r5, #0]
  htim1.Init.Period = 65535;
 80027e4:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80027e6:	f7fe fd13 	bl	8001210 <HAL_TIM_Base_Init>
 80027ea:	2800      	cmp	r0, #0
 80027ec:	d160      	bne.n	80028b0 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80027f2:	a908      	add	r1, sp, #32
 80027f4:	4872      	ldr	r0, [pc, #456]	; (80029c0 <MX_TIM1_Init+0x21c>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027f6:	9308      	str	r3, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80027f8:	f7fe ffc2 	bl	8001780 <HAL_TIM_ConfigClockSource>
 80027fc:	2800      	cmp	r0, #0
 80027fe:	d154      	bne.n	80028aa <MX_TIM1_Init+0x106>
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002800:	486f      	ldr	r0, [pc, #444]	; (80029c0 <MX_TIM1_Init+0x21c>)
 8002802:	f7fe fd85 	bl	8001310 <HAL_TIM_PWM_Init>
 8002806:	2800      	cmp	r0, #0
 8002808:	d14c      	bne.n	80028a4 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 800280a:	2210      	movs	r2, #16
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800280c:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800280e:	a906      	add	r1, sp, #24
 8002810:	486b      	ldr	r0, [pc, #428]	; (80029c0 <MX_TIM1_Init+0x21c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8002812:	9206      	str	r2, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8002814:	9307      	str	r3, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002816:	f7ff f8eb 	bl	80019f0 <HAL_TIMEx_MasterConfigSynchronization>
 800281a:	2800      	cmp	r0, #0
 800281c:	d13f      	bne.n	800289e <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
 800281e:	2300      	movs	r3, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002820:	2460      	movs	r4, #96	; 0x60
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002822:	a911      	add	r1, sp, #68	; 0x44
 8002824:	461a      	mov	r2, r3
 8002826:	4866      	ldr	r0, [pc, #408]	; (80029c0 <MX_TIM1_Init+0x21c>)
  sConfigOC.Pulse = 0;
 8002828:	9312      	str	r3, [sp, #72]	; 0x48
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800282a:	9313      	str	r3, [sp, #76]	; 0x4c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800282c:	9314      	str	r3, [sp, #80]	; 0x50
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800282e:	9315      	str	r3, [sp, #84]	; 0x54
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002830:	9316      	str	r3, [sp, #88]	; 0x58
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002832:	9317      	str	r3, [sp, #92]	; 0x5c
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002834:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002836:	f7fe fe93 	bl	8001560 <HAL_TIM_PWM_ConfigChannel>
 800283a:	2800      	cmp	r0, #0
 800283c:	d12c      	bne.n	8002898 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800283e:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
  sBreakDeadTimeConfig.DeadTime = 0;
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002840:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002844:	a918      	add	r1, sp, #96	; 0x60
 8002846:	485e      	ldr	r0, [pc, #376]	; (80029c0 <MX_TIM1_Init+0x21c>)
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002848:	9318      	str	r3, [sp, #96]	; 0x60
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800284a:	9319      	str	r3, [sp, #100]	; 0x64
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800284c:	931a      	str	r3, [sp, #104]	; 0x68
  sBreakDeadTimeConfig.DeadTime = 0;
 800284e:	931b      	str	r3, [sp, #108]	; 0x6c
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002850:	931c      	str	r3, [sp, #112]	; 0x70
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002852:	931f      	str	r3, [sp, #124]	; 0x7c
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002854:	921d      	str	r2, [sp, #116]	; 0x74
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002856:	f7ff f909 	bl	8001a6c <HAL_TIMEx_ConfigBreakDeadTime>
 800285a:	b108      	cbz	r0, 8002860 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 800285c:	f7ff fd0c 	bl	8002278 <Error_Handler>
}
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(timHandle->Instance==TIM1)
 8002860:	682b      	ldr	r3, [r5, #0]
 8002862:	4958      	ldr	r1, [pc, #352]	; (80029c4 <MX_TIM1_Init+0x220>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002864:	2200      	movs	r2, #0
  if(timHandle->Instance==TIM1)
 8002866:	428b      	cmp	r3, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002868:	920d      	str	r2, [sp, #52]	; 0x34
 800286a:	920c      	str	r2, [sp, #48]	; 0x30
 800286c:	920e      	str	r2, [sp, #56]	; 0x38
 800286e:	920f      	str	r2, [sp, #60]	; 0x3c
 8002870:	9210      	str	r2, [sp, #64]	; 0x40
  if(timHandle->Instance==TIM1)
 8002872:	d036      	beq.n	80028e2 <MX_TIM1_Init+0x13e>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM2)
 8002874:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002878:	d04a      	beq.n	8002910 <MX_TIM1_Init+0x16c>

  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM3)
 800287a:	4953      	ldr	r1, [pc, #332]	; (80029c8 <MX_TIM1_Init+0x224>)
 800287c:	428b      	cmp	r3, r1
 800287e:	d05f      	beq.n	8002940 <MX_TIM1_Init+0x19c>

  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM4)
 8002880:	4952      	ldr	r1, [pc, #328]	; (80029cc <MX_TIM1_Init+0x228>)
 8002882:	428b      	cmp	r3, r1
 8002884:	d071      	beq.n	800296a <MX_TIM1_Init+0x1c6>

  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM5)
 8002886:	4952      	ldr	r1, [pc, #328]	; (80029d0 <MX_TIM1_Init+0x22c>)
 8002888:	428b      	cmp	r3, r1
 800288a:	f000 8084 	beq.w	8002996 <MX_TIM1_Init+0x1f2>

  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM9)
 800288e:	4951      	ldr	r1, [pc, #324]	; (80029d4 <MX_TIM1_Init+0x230>)
 8002890:	428b      	cmp	r3, r1
 8002892:	d010      	beq.n	80028b6 <MX_TIM1_Init+0x112>
}
 8002894:	b021      	add	sp, #132	; 0x84
 8002896:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8002898:	f7ff fcee 	bl	8002278 <Error_Handler>
 800289c:	e7cf      	b.n	800283e <MX_TIM1_Init+0x9a>
    Error_Handler();
 800289e:	f7ff fceb 	bl	8002278 <Error_Handler>
 80028a2:	e7bc      	b.n	800281e <MX_TIM1_Init+0x7a>
    Error_Handler();
 80028a4:	f7ff fce8 	bl	8002278 <Error_Handler>
 80028a8:	e7af      	b.n	800280a <MX_TIM1_Init+0x66>
    Error_Handler();
 80028aa:	f7ff fce5 	bl	8002278 <Error_Handler>
 80028ae:	e7a7      	b.n	8002800 <MX_TIM1_Init+0x5c>
    Error_Handler();
 80028b0:	f7ff fce2 	bl	8002278 <Error_Handler>
 80028b4:	e79b      	b.n	80027ee <MX_TIM1_Init+0x4a>
  {
  /* USER CODE BEGIN TIM9_MspPostInit 0 */

  /* USER CODE END TIM9_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80028b6:	4b48      	ldr	r3, [pc, #288]	; (80029d8 <MX_TIM1_Init+0x234>)
 80028b8:	9205      	str	r2, [sp, #20]
 80028ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80028bc:	4847      	ldr	r0, [pc, #284]	; (80029dc <MX_TIM1_Init+0x238>)
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80028be:	f042 0210 	orr.w	r2, r2, #16
 80028c2:	631a      	str	r2, [r3, #48]	; 0x30
 80028c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c6:	f003 0310 	and.w	r3, r3, #16
 80028ca:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80028cc:	2420      	movs	r4, #32
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ce:	2202      	movs	r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80028d0:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80028d2:	a90c      	add	r1, sp, #48	; 0x30
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80028d4:	9d05      	ldr	r5, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80028d6:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d8:	920d      	str	r2, [sp, #52]	; 0x34
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80028da:	9310      	str	r3, [sp, #64]	; 0x40
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80028dc:	f7fe f87e 	bl	80009dc <HAL_GPIO_Init>
}
 80028e0:	e7d8      	b.n	8002894 <MX_TIM1_Init+0xf0>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80028e2:	4b3d      	ldr	r3, [pc, #244]	; (80029d8 <MX_TIM1_Init+0x234>)
 80028e4:	9200      	str	r2, [sp, #0]
 80028e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80028e8:	483c      	ldr	r0, [pc, #240]	; (80029dc <MX_TIM1_Init+0x238>)
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80028ea:	f042 0210 	orr.w	r2, r2, #16
 80028ee:	631a      	str	r2, [r3, #48]	; 0x30
 80028f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f2:	f003 0310 	and.w	r3, r3, #16
 80028f6:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80028f8:	f44f 7400 	mov.w	r4, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028fc:	2202      	movs	r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80028fe:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002900:	a90c      	add	r1, sp, #48	; 0x30
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002902:	9d00      	ldr	r5, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002904:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002906:	920d      	str	r2, [sp, #52]	; 0x34
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002908:	9310      	str	r3, [sp, #64]	; 0x40
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800290a:	f7fe f867 	bl	80009dc <HAL_GPIO_Init>
 800290e:	e7c1      	b.n	8002894 <MX_TIM1_Init+0xf0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002910:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8002914:	9201      	str	r2, [sp, #4]
 8002916:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002918:	4831      	ldr	r0, [pc, #196]	; (80029e0 <MX_TIM1_Init+0x23c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800291a:	f042 0201 	orr.w	r2, r2, #1
 800291e:	631a      	str	r2, [r3, #48]	; 0x30
 8002920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002922:	f003 0301 	and.w	r3, r3, #1
 8002926:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002928:	f44f 4400 	mov.w	r4, #32768	; 0x8000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800292c:	2202      	movs	r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800292e:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002930:	a90c      	add	r1, sp, #48	; 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002932:	9d01      	ldr	r5, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002934:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002936:	920d      	str	r2, [sp, #52]	; 0x34
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002938:	9310      	str	r3, [sp, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800293a:	f7fe f84f 	bl	80009dc <HAL_GPIO_Init>
 800293e:	e7a9      	b.n	8002894 <MX_TIM1_Init+0xf0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002940:	4b25      	ldr	r3, [pc, #148]	; (80029d8 <MX_TIM1_Init+0x234>)
 8002942:	9202      	str	r2, [sp, #8]
 8002944:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002946:	4826      	ldr	r0, [pc, #152]	; (80029e0 <MX_TIM1_Init+0x23c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002948:	f042 0201 	orr.w	r2, r2, #1
 800294c:	631a      	str	r2, [r3, #48]	; 0x30
 800294e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002950:	f003 0301 	and.w	r3, r3, #1
 8002954:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002956:	2240      	movs	r2, #64	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002958:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800295a:	a90c      	add	r1, sp, #48	; 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800295c:	9c02      	ldr	r4, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800295e:	920c      	str	r2, [sp, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002960:	930d      	str	r3, [sp, #52]	; 0x34
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002962:	9310      	str	r3, [sp, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002964:	f7fe f83a 	bl	80009dc <HAL_GPIO_Init>
 8002968:	e794      	b.n	8002894 <MX_TIM1_Init+0xf0>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800296a:	4b1b      	ldr	r3, [pc, #108]	; (80029d8 <MX_TIM1_Init+0x234>)
 800296c:	9203      	str	r2, [sp, #12]
 800296e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002970:	481c      	ldr	r0, [pc, #112]	; (80029e4 <MX_TIM1_Init+0x240>)
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002972:	f042 0208 	orr.w	r2, r2, #8
 8002976:	631a      	str	r2, [r3, #48]	; 0x30
 8002978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297a:	f003 0308 	and.w	r3, r3, #8
 800297e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002980:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002984:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002986:	a90c      	add	r1, sp, #48	; 0x30
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002988:	9c03      	ldr	r4, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800298a:	920c      	str	r2, [sp, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800298c:	930d      	str	r3, [sp, #52]	; 0x34
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800298e:	9310      	str	r3, [sp, #64]	; 0x40
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002990:	f7fe f824 	bl	80009dc <HAL_GPIO_Init>
 8002994:	e77e      	b.n	8002894 <MX_TIM1_Init+0xf0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002996:	4b10      	ldr	r3, [pc, #64]	; (80029d8 <MX_TIM1_Init+0x234>)
 8002998:	9204      	str	r2, [sp, #16]
 800299a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800299c:	4810      	ldr	r0, [pc, #64]	; (80029e0 <MX_TIM1_Init+0x23c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800299e:	f042 0201 	orr.w	r2, r2, #1
 80029a2:	631a      	str	r2, [r3, #48]	; 0x30
 80029a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80029ac:	2201      	movs	r2, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ae:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029b0:	a90c      	add	r1, sp, #48	; 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029b2:	9c04      	ldr	r4, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80029b4:	920c      	str	r2, [sp, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b6:	930d      	str	r3, [sp, #52]	; 0x34
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80029b8:	9310      	str	r3, [sp, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ba:	f7fe f80f 	bl	80009dc <HAL_GPIO_Init>
 80029be:	e769      	b.n	8002894 <MX_TIM1_Init+0xf0>
 80029c0:	20000164 	.word	0x20000164
 80029c4:	40010000 	.word	0x40010000
 80029c8:	40000400 	.word	0x40000400
 80029cc:	40000800 	.word	0x40000800
 80029d0:	40000c00 	.word	0x40000c00
 80029d4:	40014000 	.word	0x40014000
 80029d8:	40023800 	.word	0x40023800
 80029dc:	40021000 	.word	0x40021000
 80029e0:	40020000 	.word	0x40020000
 80029e4:	40020c00 	.word	0x40020c00

080029e8 <MX_TIM2_Init>:
{
 80029e8:	b530      	push	{r4, r5, lr}
  htim2.Instance = TIM2;
 80029ea:	4c81      	ldr	r4, [pc, #516]	; (8002bf0 <MX_TIM2_Init+0x208>)
{
 80029ec:	b09f      	sub	sp, #124	; 0x7c
  htim2.Instance = TIM2;
 80029ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  htim2.Init.Period = 4294967295;
 80029f2:	f04f 32ff 	mov.w	r2, #4294967295
  htim2.Instance = TIM2;
 80029f6:	6023      	str	r3, [r4, #0]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80029f8:	4620      	mov	r0, r4
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029fa:	2300      	movs	r3, #0
  htim2.Init.Period = 4294967295;
 80029fc:	60e2      	str	r2, [r4, #12]
  htim2.Init.Prescaler = 0;
 80029fe:	6063      	str	r3, [r4, #4]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a00:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002a02:	930d      	str	r3, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a04:	9307      	str	r3, [sp, #28]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a06:	9317      	str	r3, [sp, #92]	; 0x5c
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a08:	60a3      	str	r3, [r4, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a0a:	6123      	str	r3, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a0c:	61a3      	str	r3, [r4, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a0e:	930a      	str	r3, [sp, #40]	; 0x28
 8002a10:	930b      	str	r3, [sp, #44]	; 0x2c
 8002a12:	930c      	str	r3, [sp, #48]	; 0x30
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002a14:	930e      	str	r3, [sp, #56]	; 0x38
 8002a16:	930f      	str	r3, [sp, #60]	; 0x3c
 8002a18:	9310      	str	r3, [sp, #64]	; 0x40
 8002a1a:	9311      	str	r3, [sp, #68]	; 0x44
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a1c:	9308      	str	r3, [sp, #32]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a1e:	9318      	str	r3, [sp, #96]	; 0x60
 8002a20:	9319      	str	r3, [sp, #100]	; 0x64
 8002a22:	931a      	str	r3, [sp, #104]	; 0x68
 8002a24:	931b      	str	r3, [sp, #108]	; 0x6c
 8002a26:	931c      	str	r3, [sp, #112]	; 0x70
 8002a28:	931d      	str	r3, [sp, #116]	; 0x74
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002a2a:	f7fe fbf1 	bl	8001210 <HAL_TIM_Base_Init>
 8002a2e:	2800      	cmp	r0, #0
 8002a30:	d156      	bne.n	8002ae0 <MX_TIM2_Init+0xf8>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002a36:	a909      	add	r1, sp, #36	; 0x24
 8002a38:	486d      	ldr	r0, [pc, #436]	; (8002bf0 <MX_TIM2_Init+0x208>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a3a:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002a3c:	f7fe fea0 	bl	8001780 <HAL_TIM_ConfigClockSource>
 8002a40:	2800      	cmp	r0, #0
 8002a42:	d14a      	bne.n	8002ada <MX_TIM2_Init+0xf2>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002a44:	486a      	ldr	r0, [pc, #424]	; (8002bf0 <MX_TIM2_Init+0x208>)
 8002a46:	f7fe fc63 	bl	8001310 <HAL_TIM_PWM_Init>
 8002a4a:	2800      	cmp	r0, #0
 8002a4c:	d142      	bne.n	8002ad4 <MX_TIM2_Init+0xec>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8002a4e:	2206      	movs	r2, #6
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8002a50:	2300      	movs	r3, #0
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8002a52:	a90d      	add	r1, sp, #52	; 0x34
 8002a54:	4866      	ldr	r0, [pc, #408]	; (8002bf0 <MX_TIM2_Init+0x208>)
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8002a56:	920d      	str	r2, [sp, #52]	; 0x34
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8002a58:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8002a5a:	f7fe ff45 	bl	80018e8 <HAL_TIM_SlaveConfigSynchro>
 8002a5e:	2800      	cmp	r0, #0
 8002a60:	d135      	bne.n	8002ace <MX_TIM2_Init+0xe6>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8002a62:	2210      	movs	r2, #16
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8002a64:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a66:	a907      	add	r1, sp, #28
 8002a68:	4861      	ldr	r0, [pc, #388]	; (8002bf0 <MX_TIM2_Init+0x208>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8002a6a:	9207      	str	r2, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8002a6c:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a6e:	f7fe ffbf 	bl	80019f0 <HAL_TIMEx_MasterConfigSynchronization>
 8002a72:	bb48      	cbnz	r0, 8002ac8 <MX_TIM2_Init+0xe0>
  sConfigOC.Pulse = 0;
 8002a74:	2300      	movs	r3, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a76:	2560      	movs	r5, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a78:	a917      	add	r1, sp, #92	; 0x5c
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	485c      	ldr	r0, [pc, #368]	; (8002bf0 <MX_TIM2_Init+0x208>)
  sConfigOC.Pulse = 0;
 8002a7e:	9318      	str	r3, [sp, #96]	; 0x60
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a80:	9319      	str	r3, [sp, #100]	; 0x64
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a82:	931b      	str	r3, [sp, #108]	; 0x6c
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a84:	9517      	str	r5, [sp, #92]	; 0x5c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a86:	f7fe fd6b 	bl	8001560 <HAL_TIM_PWM_ConfigChannel>
 8002a8a:	b108      	cbz	r0, 8002a90 <MX_TIM2_Init+0xa8>
    Error_Handler();
 8002a8c:	f7ff fbf4 	bl	8002278 <Error_Handler>
  if(timHandle->Instance==TIM1)
 8002a90:	6823      	ldr	r3, [r4, #0]
 8002a92:	4958      	ldr	r1, [pc, #352]	; (8002bf4 <MX_TIM2_Init+0x20c>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a94:	2200      	movs	r2, #0
  if(timHandle->Instance==TIM1)
 8002a96:	428b      	cmp	r3, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a98:	9213      	str	r2, [sp, #76]	; 0x4c
 8002a9a:	9212      	str	r2, [sp, #72]	; 0x48
 8002a9c:	9214      	str	r2, [sp, #80]	; 0x50
 8002a9e:	9215      	str	r2, [sp, #84]	; 0x54
 8002aa0:	9216      	str	r2, [sp, #88]	; 0x58
  if(timHandle->Instance==TIM1)
 8002aa2:	d036      	beq.n	8002b12 <MX_TIM2_Init+0x12a>
  else if(timHandle->Instance==TIM2)
 8002aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aa8:	d04a      	beq.n	8002b40 <MX_TIM2_Init+0x158>
  else if(timHandle->Instance==TIM3)
 8002aaa:	4953      	ldr	r1, [pc, #332]	; (8002bf8 <MX_TIM2_Init+0x210>)
 8002aac:	428b      	cmp	r3, r1
 8002aae:	d05f      	beq.n	8002b70 <MX_TIM2_Init+0x188>
  else if(timHandle->Instance==TIM4)
 8002ab0:	4952      	ldr	r1, [pc, #328]	; (8002bfc <MX_TIM2_Init+0x214>)
 8002ab2:	428b      	cmp	r3, r1
 8002ab4:	d071      	beq.n	8002b9a <MX_TIM2_Init+0x1b2>
  else if(timHandle->Instance==TIM5)
 8002ab6:	4952      	ldr	r1, [pc, #328]	; (8002c00 <MX_TIM2_Init+0x218>)
 8002ab8:	428b      	cmp	r3, r1
 8002aba:	f000 8084 	beq.w	8002bc6 <MX_TIM2_Init+0x1de>
  else if(timHandle->Instance==TIM9)
 8002abe:	4951      	ldr	r1, [pc, #324]	; (8002c04 <MX_TIM2_Init+0x21c>)
 8002ac0:	428b      	cmp	r3, r1
 8002ac2:	d010      	beq.n	8002ae6 <MX_TIM2_Init+0xfe>
}
 8002ac4:	b01f      	add	sp, #124	; 0x7c
 8002ac6:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8002ac8:	f7ff fbd6 	bl	8002278 <Error_Handler>
 8002acc:	e7d2      	b.n	8002a74 <MX_TIM2_Init+0x8c>
    Error_Handler();
 8002ace:	f7ff fbd3 	bl	8002278 <Error_Handler>
 8002ad2:	e7c6      	b.n	8002a62 <MX_TIM2_Init+0x7a>
    Error_Handler();
 8002ad4:	f7ff fbd0 	bl	8002278 <Error_Handler>
 8002ad8:	e7b9      	b.n	8002a4e <MX_TIM2_Init+0x66>
    Error_Handler();
 8002ada:	f7ff fbcd 	bl	8002278 <Error_Handler>
 8002ade:	e7b1      	b.n	8002a44 <MX_TIM2_Init+0x5c>
    Error_Handler();
 8002ae0:	f7ff fbca 	bl	8002278 <Error_Handler>
 8002ae4:	e7a5      	b.n	8002a32 <MX_TIM2_Init+0x4a>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ae6:	4b48      	ldr	r3, [pc, #288]	; (8002c08 <MX_TIM2_Init+0x220>)
 8002ae8:	9206      	str	r2, [sp, #24]
 8002aea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002aec:	4847      	ldr	r0, [pc, #284]	; (8002c0c <MX_TIM2_Init+0x224>)
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002aee:	f042 0210 	orr.w	r2, r2, #16
 8002af2:	631a      	str	r2, [r3, #48]	; 0x30
 8002af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af6:	f003 0310 	and.w	r3, r3, #16
 8002afa:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002afc:	2420      	movs	r4, #32
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002afe:	2202      	movs	r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8002b00:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b02:	a912      	add	r1, sp, #72	; 0x48
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b04:	9d06      	ldr	r5, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002b06:	9412      	str	r4, [sp, #72]	; 0x48
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b08:	9213      	str	r2, [sp, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8002b0a:	9316      	str	r3, [sp, #88]	; 0x58
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b0c:	f7fd ff66 	bl	80009dc <HAL_GPIO_Init>
}
 8002b10:	e7d8      	b.n	8002ac4 <MX_TIM2_Init+0xdc>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b12:	4b3d      	ldr	r3, [pc, #244]	; (8002c08 <MX_TIM2_Init+0x220>)
 8002b14:	9201      	str	r2, [sp, #4]
 8002b16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b18:	483c      	ldr	r0, [pc, #240]	; (8002c0c <MX_TIM2_Init+0x224>)
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b1a:	f042 0210 	orr.w	r2, r2, #16
 8002b1e:	631a      	str	r2, [r3, #48]	; 0x30
 8002b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b22:	f003 0310 	and.w	r3, r3, #16
 8002b26:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002b28:	f44f 7400 	mov.w	r4, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b2c:	2202      	movs	r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002b2e:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b30:	a912      	add	r1, sp, #72	; 0x48
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b32:	9d01      	ldr	r5, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002b34:	9412      	str	r4, [sp, #72]	; 0x48
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b36:	9213      	str	r2, [sp, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002b38:	9316      	str	r3, [sp, #88]	; 0x58
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b3a:	f7fd ff4f 	bl	80009dc <HAL_GPIO_Init>
 8002b3e:	e7c1      	b.n	8002ac4 <MX_TIM2_Init+0xdc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b40:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8002b44:	9202      	str	r2, [sp, #8]
 8002b46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b48:	4831      	ldr	r0, [pc, #196]	; (8002c10 <MX_TIM2_Init+0x228>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b4a:	f042 0201 	orr.w	r2, r2, #1
 8002b4e:	631a      	str	r2, [r3, #48]	; 0x30
 8002b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002b58:	f44f 4400 	mov.w	r4, #32768	; 0x8000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b5c:	2202      	movs	r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b5e:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b60:	a912      	add	r1, sp, #72	; 0x48
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b62:	9d02      	ldr	r5, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002b64:	9412      	str	r4, [sp, #72]	; 0x48
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b66:	9213      	str	r2, [sp, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b68:	9316      	str	r3, [sp, #88]	; 0x58
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b6a:	f7fd ff37 	bl	80009dc <HAL_GPIO_Init>
 8002b6e:	e7a9      	b.n	8002ac4 <MX_TIM2_Init+0xdc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b70:	4b25      	ldr	r3, [pc, #148]	; (8002c08 <MX_TIM2_Init+0x220>)
 8002b72:	9203      	str	r2, [sp, #12]
 8002b74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b76:	4826      	ldr	r0, [pc, #152]	; (8002c10 <MX_TIM2_Init+0x228>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b78:	f042 0201 	orr.w	r2, r2, #1
 8002b7c:	631a      	str	r2, [r3, #48]	; 0x30
 8002b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b80:	f003 0301 	and.w	r3, r3, #1
 8002b84:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002b86:	2240      	movs	r2, #64	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b88:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b8a:	a912      	add	r1, sp, #72	; 0x48
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b8c:	9c03      	ldr	r4, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002b8e:	9212      	str	r2, [sp, #72]	; 0x48
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b90:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b92:	9316      	str	r3, [sp, #88]	; 0x58
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b94:	f7fd ff22 	bl	80009dc <HAL_GPIO_Init>
 8002b98:	e794      	b.n	8002ac4 <MX_TIM2_Init+0xdc>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b9a:	4b1b      	ldr	r3, [pc, #108]	; (8002c08 <MX_TIM2_Init+0x220>)
 8002b9c:	9204      	str	r2, [sp, #16]
 8002b9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ba0:	481c      	ldr	r0, [pc, #112]	; (8002c14 <MX_TIM2_Init+0x22c>)
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ba2:	f042 0208 	orr.w	r2, r2, #8
 8002ba6:	631a      	str	r2, [r3, #48]	; 0x30
 8002ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002baa:	f003 0308 	and.w	r3, r3, #8
 8002bae:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002bb0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb4:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002bb6:	a912      	add	r1, sp, #72	; 0x48
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bb8:	9c04      	ldr	r4, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002bba:	9212      	str	r2, [sp, #72]	; 0x48
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bbc:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002bbe:	9316      	str	r3, [sp, #88]	; 0x58
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002bc0:	f7fd ff0c 	bl	80009dc <HAL_GPIO_Init>
 8002bc4:	e77e      	b.n	8002ac4 <MX_TIM2_Init+0xdc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bc6:	4b10      	ldr	r3, [pc, #64]	; (8002c08 <MX_TIM2_Init+0x220>)
 8002bc8:	9205      	str	r2, [sp, #20]
 8002bca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bcc:	4810      	ldr	r0, [pc, #64]	; (8002c10 <MX_TIM2_Init+0x228>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bce:	f042 0201 	orr.w	r2, r2, #1
 8002bd2:	631a      	str	r2, [r3, #48]	; 0x30
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002bdc:	2201      	movs	r2, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bde:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002be0:	a912      	add	r1, sp, #72	; 0x48
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002be2:	9c05      	ldr	r4, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002be4:	9212      	str	r2, [sp, #72]	; 0x48
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be6:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002be8:	9316      	str	r3, [sp, #88]	; 0x58
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bea:	f7fd fef7 	bl	80009dc <HAL_GPIO_Init>
 8002bee:	e769      	b.n	8002ac4 <MX_TIM2_Init+0xdc>
 8002bf0:	200001f4 	.word	0x200001f4
 8002bf4:	40010000 	.word	0x40010000
 8002bf8:	40000400 	.word	0x40000400
 8002bfc:	40000800 	.word	0x40000800
 8002c00:	40000c00 	.word	0x40000c00
 8002c04:	40014000 	.word	0x40014000
 8002c08:	40023800 	.word	0x40023800
 8002c0c:	40021000 	.word	0x40021000
 8002c10:	40020000 	.word	0x40020000
 8002c14:	40020c00 	.word	0x40020c00

08002c18 <MX_TIM3_Init>:
{
 8002c18:	b530      	push	{r4, r5, lr}
  htim3.Instance = TIM3;
 8002c1a:	4c81      	ldr	r4, [pc, #516]	; (8002e20 <MX_TIM3_Init+0x208>)
 8002c1c:	4b81      	ldr	r3, [pc, #516]	; (8002e24 <MX_TIM3_Init+0x20c>)
 8002c1e:	6023      	str	r3, [r4, #0]
{
 8002c20:	b09f      	sub	sp, #124	; 0x7c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c22:	2300      	movs	r3, #0
  htim3.Init.Period = 65535;
 8002c24:	f64f 72ff 	movw	r2, #65535	; 0xffff
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002c28:	4620      	mov	r0, r4
  htim3.Init.Period = 65535;
 8002c2a:	60e2      	str	r2, [r4, #12]
  htim3.Init.Prescaler = 0;
 8002c2c:	6063      	str	r3, [r4, #4]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c2e:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002c30:	930d      	str	r3, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c32:	9307      	str	r3, [sp, #28]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c34:	9317      	str	r3, [sp, #92]	; 0x5c
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c36:	60a3      	str	r3, [r4, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c38:	6123      	str	r3, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c3a:	61a3      	str	r3, [r4, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c3c:	930a      	str	r3, [sp, #40]	; 0x28
 8002c3e:	930b      	str	r3, [sp, #44]	; 0x2c
 8002c40:	930c      	str	r3, [sp, #48]	; 0x30
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002c42:	930e      	str	r3, [sp, #56]	; 0x38
 8002c44:	930f      	str	r3, [sp, #60]	; 0x3c
 8002c46:	9310      	str	r3, [sp, #64]	; 0x40
 8002c48:	9311      	str	r3, [sp, #68]	; 0x44
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c4a:	9308      	str	r3, [sp, #32]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c4c:	9318      	str	r3, [sp, #96]	; 0x60
 8002c4e:	9319      	str	r3, [sp, #100]	; 0x64
 8002c50:	931a      	str	r3, [sp, #104]	; 0x68
 8002c52:	931b      	str	r3, [sp, #108]	; 0x6c
 8002c54:	931c      	str	r3, [sp, #112]	; 0x70
 8002c56:	931d      	str	r3, [sp, #116]	; 0x74
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002c58:	f7fe fada 	bl	8001210 <HAL_TIM_Base_Init>
 8002c5c:	2800      	cmp	r0, #0
 8002c5e:	d156      	bne.n	8002d0e <MX_TIM3_Init+0xf6>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002c64:	a909      	add	r1, sp, #36	; 0x24
 8002c66:	486e      	ldr	r0, [pc, #440]	; (8002e20 <MX_TIM3_Init+0x208>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c68:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002c6a:	f7fe fd89 	bl	8001780 <HAL_TIM_ConfigClockSource>
 8002c6e:	2800      	cmp	r0, #0
 8002c70:	d14a      	bne.n	8002d08 <MX_TIM3_Init+0xf0>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002c72:	486b      	ldr	r0, [pc, #428]	; (8002e20 <MX_TIM3_Init+0x208>)
 8002c74:	f7fe fb4c 	bl	8001310 <HAL_TIM_PWM_Init>
 8002c78:	2800      	cmp	r0, #0
 8002c7a:	d142      	bne.n	8002d02 <MX_TIM3_Init+0xea>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8002c7c:	2206      	movs	r2, #6
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8002c7e:	2300      	movs	r3, #0
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8002c80:	a90d      	add	r1, sp, #52	; 0x34
 8002c82:	4867      	ldr	r0, [pc, #412]	; (8002e20 <MX_TIM3_Init+0x208>)
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8002c84:	920d      	str	r2, [sp, #52]	; 0x34
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8002c86:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8002c88:	f7fe fe2e 	bl	80018e8 <HAL_TIM_SlaveConfigSynchro>
 8002c8c:	2800      	cmp	r0, #0
 8002c8e:	d135      	bne.n	8002cfc <MX_TIM3_Init+0xe4>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c90:	2200      	movs	r2, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8002c92:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002c94:	a907      	add	r1, sp, #28
 8002c96:	4862      	ldr	r0, [pc, #392]	; (8002e20 <MX_TIM3_Init+0x208>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c98:	9207      	str	r2, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8002c9a:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002c9c:	f7fe fea8 	bl	80019f0 <HAL_TIMEx_MasterConfigSynchronization>
 8002ca0:	bb48      	cbnz	r0, 8002cf6 <MX_TIM3_Init+0xde>
  sConfigOC.Pulse = 0;
 8002ca2:	2300      	movs	r3, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ca4:	2560      	movs	r5, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ca6:	a917      	add	r1, sp, #92	; 0x5c
 8002ca8:	461a      	mov	r2, r3
 8002caa:	485d      	ldr	r0, [pc, #372]	; (8002e20 <MX_TIM3_Init+0x208>)
  sConfigOC.Pulse = 0;
 8002cac:	9318      	str	r3, [sp, #96]	; 0x60
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002cae:	9319      	str	r3, [sp, #100]	; 0x64
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002cb0:	931b      	str	r3, [sp, #108]	; 0x6c
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002cb2:	9517      	str	r5, [sp, #92]	; 0x5c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002cb4:	f7fe fc54 	bl	8001560 <HAL_TIM_PWM_ConfigChannel>
 8002cb8:	b108      	cbz	r0, 8002cbe <MX_TIM3_Init+0xa6>
    Error_Handler();
 8002cba:	f7ff fadd 	bl	8002278 <Error_Handler>
  if(timHandle->Instance==TIM1)
 8002cbe:	6823      	ldr	r3, [r4, #0]
 8002cc0:	4959      	ldr	r1, [pc, #356]	; (8002e28 <MX_TIM3_Init+0x210>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cc2:	2200      	movs	r2, #0
  if(timHandle->Instance==TIM1)
 8002cc4:	428b      	cmp	r3, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cc6:	9213      	str	r2, [sp, #76]	; 0x4c
 8002cc8:	9212      	str	r2, [sp, #72]	; 0x48
 8002cca:	9214      	str	r2, [sp, #80]	; 0x50
 8002ccc:	9215      	str	r2, [sp, #84]	; 0x54
 8002cce:	9216      	str	r2, [sp, #88]	; 0x58
  if(timHandle->Instance==TIM1)
 8002cd0:	d036      	beq.n	8002d40 <MX_TIM3_Init+0x128>
  else if(timHandle->Instance==TIM2)
 8002cd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cd6:	d04a      	beq.n	8002d6e <MX_TIM3_Init+0x156>
  else if(timHandle->Instance==TIM3)
 8002cd8:	4952      	ldr	r1, [pc, #328]	; (8002e24 <MX_TIM3_Init+0x20c>)
 8002cda:	428b      	cmp	r3, r1
 8002cdc:	d05f      	beq.n	8002d9e <MX_TIM3_Init+0x186>
  else if(timHandle->Instance==TIM4)
 8002cde:	4953      	ldr	r1, [pc, #332]	; (8002e2c <MX_TIM3_Init+0x214>)
 8002ce0:	428b      	cmp	r3, r1
 8002ce2:	d071      	beq.n	8002dc8 <MX_TIM3_Init+0x1b0>
  else if(timHandle->Instance==TIM5)
 8002ce4:	4952      	ldr	r1, [pc, #328]	; (8002e30 <MX_TIM3_Init+0x218>)
 8002ce6:	428b      	cmp	r3, r1
 8002ce8:	f000 8084 	beq.w	8002df4 <MX_TIM3_Init+0x1dc>
  else if(timHandle->Instance==TIM9)
 8002cec:	4951      	ldr	r1, [pc, #324]	; (8002e34 <MX_TIM3_Init+0x21c>)
 8002cee:	428b      	cmp	r3, r1
 8002cf0:	d010      	beq.n	8002d14 <MX_TIM3_Init+0xfc>
}
 8002cf2:	b01f      	add	sp, #124	; 0x7c
 8002cf4:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8002cf6:	f7ff fabf 	bl	8002278 <Error_Handler>
 8002cfa:	e7d2      	b.n	8002ca2 <MX_TIM3_Init+0x8a>
    Error_Handler();
 8002cfc:	f7ff fabc 	bl	8002278 <Error_Handler>
 8002d00:	e7c6      	b.n	8002c90 <MX_TIM3_Init+0x78>
    Error_Handler();
 8002d02:	f7ff fab9 	bl	8002278 <Error_Handler>
 8002d06:	e7b9      	b.n	8002c7c <MX_TIM3_Init+0x64>
    Error_Handler();
 8002d08:	f7ff fab6 	bl	8002278 <Error_Handler>
 8002d0c:	e7b1      	b.n	8002c72 <MX_TIM3_Init+0x5a>
    Error_Handler();
 8002d0e:	f7ff fab3 	bl	8002278 <Error_Handler>
 8002d12:	e7a5      	b.n	8002c60 <MX_TIM3_Init+0x48>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d14:	4b48      	ldr	r3, [pc, #288]	; (8002e38 <MX_TIM3_Init+0x220>)
 8002d16:	9206      	str	r2, [sp, #24]
 8002d18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d1a:	4848      	ldr	r0, [pc, #288]	; (8002e3c <MX_TIM3_Init+0x224>)
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d1c:	f042 0210 	orr.w	r2, r2, #16
 8002d20:	631a      	str	r2, [r3, #48]	; 0x30
 8002d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d24:	f003 0310 	and.w	r3, r3, #16
 8002d28:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002d2a:	2420      	movs	r4, #32
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d2c:	2202      	movs	r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8002d2e:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d30:	a912      	add	r1, sp, #72	; 0x48
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d32:	9d06      	ldr	r5, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002d34:	9412      	str	r4, [sp, #72]	; 0x48
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d36:	9213      	str	r2, [sp, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8002d38:	9316      	str	r3, [sp, #88]	; 0x58
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d3a:	f7fd fe4f 	bl	80009dc <HAL_GPIO_Init>
}
 8002d3e:	e7d8      	b.n	8002cf2 <MX_TIM3_Init+0xda>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d40:	4b3d      	ldr	r3, [pc, #244]	; (8002e38 <MX_TIM3_Init+0x220>)
 8002d42:	9201      	str	r2, [sp, #4]
 8002d44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d46:	483d      	ldr	r0, [pc, #244]	; (8002e3c <MX_TIM3_Init+0x224>)
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d48:	f042 0210 	orr.w	r2, r2, #16
 8002d4c:	631a      	str	r2, [r3, #48]	; 0x30
 8002d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d50:	f003 0310 	and.w	r3, r3, #16
 8002d54:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002d56:	f44f 7400 	mov.w	r4, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d5a:	2202      	movs	r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002d5c:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d5e:	a912      	add	r1, sp, #72	; 0x48
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d60:	9d01      	ldr	r5, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002d62:	9412      	str	r4, [sp, #72]	; 0x48
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d64:	9213      	str	r2, [sp, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002d66:	9316      	str	r3, [sp, #88]	; 0x58
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d68:	f7fd fe38 	bl	80009dc <HAL_GPIO_Init>
 8002d6c:	e7c1      	b.n	8002cf2 <MX_TIM3_Init+0xda>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d6e:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8002d72:	9202      	str	r2, [sp, #8]
 8002d74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d76:	4832      	ldr	r0, [pc, #200]	; (8002e40 <MX_TIM3_Init+0x228>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d78:	f042 0201 	orr.w	r2, r2, #1
 8002d7c:	631a      	str	r2, [r3, #48]	; 0x30
 8002d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d80:	f003 0301 	and.w	r3, r3, #1
 8002d84:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002d86:	f44f 4400 	mov.w	r4, #32768	; 0x8000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d8a:	2202      	movs	r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002d8c:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d8e:	a912      	add	r1, sp, #72	; 0x48
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d90:	9d02      	ldr	r5, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002d92:	9412      	str	r4, [sp, #72]	; 0x48
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d94:	9213      	str	r2, [sp, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002d96:	9316      	str	r3, [sp, #88]	; 0x58
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d98:	f7fd fe20 	bl	80009dc <HAL_GPIO_Init>
 8002d9c:	e7a9      	b.n	8002cf2 <MX_TIM3_Init+0xda>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d9e:	4b26      	ldr	r3, [pc, #152]	; (8002e38 <MX_TIM3_Init+0x220>)
 8002da0:	9203      	str	r2, [sp, #12]
 8002da2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002da4:	4826      	ldr	r0, [pc, #152]	; (8002e40 <MX_TIM3_Init+0x228>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002da6:	f042 0201 	orr.w	r2, r2, #1
 8002daa:	631a      	str	r2, [r3, #48]	; 0x30
 8002dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dae:	f003 0301 	and.w	r3, r3, #1
 8002db2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002db4:	2240      	movs	r2, #64	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002db6:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002db8:	a912      	add	r1, sp, #72	; 0x48
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dba:	9c03      	ldr	r4, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002dbc:	9212      	str	r2, [sp, #72]	; 0x48
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dbe:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002dc0:	9316      	str	r3, [sp, #88]	; 0x58
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dc2:	f7fd fe0b 	bl	80009dc <HAL_GPIO_Init>
 8002dc6:	e794      	b.n	8002cf2 <MX_TIM3_Init+0xda>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002dc8:	4b1b      	ldr	r3, [pc, #108]	; (8002e38 <MX_TIM3_Init+0x220>)
 8002dca:	9204      	str	r2, [sp, #16]
 8002dcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002dce:	481d      	ldr	r0, [pc, #116]	; (8002e44 <MX_TIM3_Init+0x22c>)
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002dd0:	f042 0208 	orr.w	r2, r2, #8
 8002dd4:	631a      	str	r2, [r3, #48]	; 0x30
 8002dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd8:	f003 0308 	and.w	r3, r3, #8
 8002ddc:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002dde:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de2:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002de4:	a912      	add	r1, sp, #72	; 0x48
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002de6:	9c04      	ldr	r4, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002de8:	9212      	str	r2, [sp, #72]	; 0x48
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dea:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002dec:	9316      	str	r3, [sp, #88]	; 0x58
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002dee:	f7fd fdf5 	bl	80009dc <HAL_GPIO_Init>
 8002df2:	e77e      	b.n	8002cf2 <MX_TIM3_Init+0xda>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002df4:	4b10      	ldr	r3, [pc, #64]	; (8002e38 <MX_TIM3_Init+0x220>)
 8002df6:	9205      	str	r2, [sp, #20]
 8002df8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dfa:	4811      	ldr	r0, [pc, #68]	; (8002e40 <MX_TIM3_Init+0x228>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dfc:	f042 0201 	orr.w	r2, r2, #1
 8002e00:	631a      	str	r2, [r3, #48]	; 0x30
 8002e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e04:	f003 0301 	and.w	r3, r3, #1
 8002e08:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002e0a:	2201      	movs	r2, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e0c:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e0e:	a912      	add	r1, sp, #72	; 0x48
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e10:	9c05      	ldr	r4, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002e12:	9212      	str	r2, [sp, #72]	; 0x48
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e14:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002e16:	9316      	str	r3, [sp, #88]	; 0x58
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e18:	f7fd fde0 	bl	80009dc <HAL_GPIO_Init>
 8002e1c:	e769      	b.n	8002cf2 <MX_TIM3_Init+0xda>
 8002e1e:	bf00      	nop
 8002e20:	2000011c 	.word	0x2000011c
 8002e24:	40000400 	.word	0x40000400
 8002e28:	40010000 	.word	0x40010000
 8002e2c:	40000800 	.word	0x40000800
 8002e30:	40000c00 	.word	0x40000c00
 8002e34:	40014000 	.word	0x40014000
 8002e38:	40023800 	.word	0x40023800
 8002e3c:	40021000 	.word	0x40021000
 8002e40:	40020000 	.word	0x40020000
 8002e44:	40020c00 	.word	0x40020c00

08002e48 <MX_TIM4_Init>:
{
 8002e48:	b530      	push	{r4, r5, lr}
  htim4.Instance = TIM4;
 8002e4a:	4c80      	ldr	r4, [pc, #512]	; (800304c <MX_TIM4_Init+0x204>)
 8002e4c:	4b80      	ldr	r3, [pc, #512]	; (8003050 <MX_TIM4_Init+0x208>)
 8002e4e:	6023      	str	r3, [r4, #0]
{
 8002e50:	b09f      	sub	sp, #124	; 0x7c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e52:	2300      	movs	r3, #0
  htim4.Init.Period = 65535;
 8002e54:	f64f 72ff 	movw	r2, #65535	; 0xffff
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002e58:	4620      	mov	r0, r4
  htim4.Init.Period = 65535;
 8002e5a:	60e2      	str	r2, [r4, #12]
  htim4.Init.Prescaler = 0;
 8002e5c:	6063      	str	r3, [r4, #4]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e5e:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002e60:	930d      	str	r3, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e62:	9307      	str	r3, [sp, #28]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e64:	9317      	str	r3, [sp, #92]	; 0x5c
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e66:	60a3      	str	r3, [r4, #8]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e68:	6123      	str	r3, [r4, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e6a:	61a3      	str	r3, [r4, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e6c:	930a      	str	r3, [sp, #40]	; 0x28
 8002e6e:	930b      	str	r3, [sp, #44]	; 0x2c
 8002e70:	930c      	str	r3, [sp, #48]	; 0x30
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002e72:	930e      	str	r3, [sp, #56]	; 0x38
 8002e74:	930f      	str	r3, [sp, #60]	; 0x3c
 8002e76:	9310      	str	r3, [sp, #64]	; 0x40
 8002e78:	9311      	str	r3, [sp, #68]	; 0x44
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e7a:	9308      	str	r3, [sp, #32]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e7c:	9318      	str	r3, [sp, #96]	; 0x60
 8002e7e:	9319      	str	r3, [sp, #100]	; 0x64
 8002e80:	931a      	str	r3, [sp, #104]	; 0x68
 8002e82:	931b      	str	r3, [sp, #108]	; 0x6c
 8002e84:	931c      	str	r3, [sp, #112]	; 0x70
 8002e86:	931d      	str	r3, [sp, #116]	; 0x74
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002e88:	f7fe f9c2 	bl	8001210 <HAL_TIM_Base_Init>
 8002e8c:	2800      	cmp	r0, #0
 8002e8e:	d155      	bne.n	8002f3c <MX_TIM4_Init+0xf4>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002e94:	a909      	add	r1, sp, #36	; 0x24
 8002e96:	486d      	ldr	r0, [pc, #436]	; (800304c <MX_TIM4_Init+0x204>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e98:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002e9a:	f7fe fc71 	bl	8001780 <HAL_TIM_ConfigClockSource>
 8002e9e:	2800      	cmp	r0, #0
 8002ea0:	d149      	bne.n	8002f36 <MX_TIM4_Init+0xee>
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002ea2:	486a      	ldr	r0, [pc, #424]	; (800304c <MX_TIM4_Init+0x204>)
 8002ea4:	f7fe fa34 	bl	8001310 <HAL_TIM_PWM_Init>
 8002ea8:	2800      	cmp	r0, #0
 8002eaa:	d141      	bne.n	8002f30 <MX_TIM4_Init+0xe8>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8002eac:	2206      	movs	r2, #6
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8002eae:	2300      	movs	r3, #0
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8002eb0:	a90d      	add	r1, sp, #52	; 0x34
 8002eb2:	4866      	ldr	r0, [pc, #408]	; (800304c <MX_TIM4_Init+0x204>)
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8002eb4:	920d      	str	r2, [sp, #52]	; 0x34
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8002eb6:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8002eb8:	f7fe fd16 	bl	80018e8 <HAL_TIM_SlaveConfigSynchro>
 8002ebc:	2800      	cmp	r0, #0
 8002ebe:	d134      	bne.n	8002f2a <MX_TIM4_Init+0xe2>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ec0:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002ec2:	a907      	add	r1, sp, #28
 8002ec4:	4861      	ldr	r0, [pc, #388]	; (800304c <MX_TIM4_Init+0x204>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ec6:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ec8:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002eca:	f7fe fd91 	bl	80019f0 <HAL_TIMEx_MasterConfigSynchronization>
 8002ece:	bb48      	cbnz	r0, 8002f24 <MX_TIM4_Init+0xdc>
  sConfigOC.Pulse = 0;
 8002ed0:	2300      	movs	r3, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ed2:	2560      	movs	r5, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ed4:	a917      	add	r1, sp, #92	; 0x5c
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	485c      	ldr	r0, [pc, #368]	; (800304c <MX_TIM4_Init+0x204>)
  sConfigOC.Pulse = 0;
 8002eda:	9318      	str	r3, [sp, #96]	; 0x60
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002edc:	9319      	str	r3, [sp, #100]	; 0x64
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ede:	931b      	str	r3, [sp, #108]	; 0x6c
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ee0:	9517      	str	r5, [sp, #92]	; 0x5c
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ee2:	f7fe fb3d 	bl	8001560 <HAL_TIM_PWM_ConfigChannel>
 8002ee6:	b108      	cbz	r0, 8002eec <MX_TIM4_Init+0xa4>
    Error_Handler();
 8002ee8:	f7ff f9c6 	bl	8002278 <Error_Handler>
  if(timHandle->Instance==TIM1)
 8002eec:	6823      	ldr	r3, [r4, #0]
 8002eee:	4959      	ldr	r1, [pc, #356]	; (8003054 <MX_TIM4_Init+0x20c>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ef0:	2200      	movs	r2, #0
  if(timHandle->Instance==TIM1)
 8002ef2:	428b      	cmp	r3, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ef4:	9213      	str	r2, [sp, #76]	; 0x4c
 8002ef6:	9212      	str	r2, [sp, #72]	; 0x48
 8002ef8:	9214      	str	r2, [sp, #80]	; 0x50
 8002efa:	9215      	str	r2, [sp, #84]	; 0x54
 8002efc:	9216      	str	r2, [sp, #88]	; 0x58
  if(timHandle->Instance==TIM1)
 8002efe:	d036      	beq.n	8002f6e <MX_TIM4_Init+0x126>
  else if(timHandle->Instance==TIM2)
 8002f00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f04:	d04a      	beq.n	8002f9c <MX_TIM4_Init+0x154>
  else if(timHandle->Instance==TIM3)
 8002f06:	4954      	ldr	r1, [pc, #336]	; (8003058 <MX_TIM4_Init+0x210>)
 8002f08:	428b      	cmp	r3, r1
 8002f0a:	d05f      	beq.n	8002fcc <MX_TIM4_Init+0x184>
  else if(timHandle->Instance==TIM4)
 8002f0c:	4950      	ldr	r1, [pc, #320]	; (8003050 <MX_TIM4_Init+0x208>)
 8002f0e:	428b      	cmp	r3, r1
 8002f10:	d071      	beq.n	8002ff6 <MX_TIM4_Init+0x1ae>
  else if(timHandle->Instance==TIM5)
 8002f12:	4952      	ldr	r1, [pc, #328]	; (800305c <MX_TIM4_Init+0x214>)
 8002f14:	428b      	cmp	r3, r1
 8002f16:	f000 8084 	beq.w	8003022 <MX_TIM4_Init+0x1da>
  else if(timHandle->Instance==TIM9)
 8002f1a:	4951      	ldr	r1, [pc, #324]	; (8003060 <MX_TIM4_Init+0x218>)
 8002f1c:	428b      	cmp	r3, r1
 8002f1e:	d010      	beq.n	8002f42 <MX_TIM4_Init+0xfa>
}
 8002f20:	b01f      	add	sp, #124	; 0x7c
 8002f22:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8002f24:	f7ff f9a8 	bl	8002278 <Error_Handler>
 8002f28:	e7d2      	b.n	8002ed0 <MX_TIM4_Init+0x88>
    Error_Handler();
 8002f2a:	f7ff f9a5 	bl	8002278 <Error_Handler>
 8002f2e:	e7c7      	b.n	8002ec0 <MX_TIM4_Init+0x78>
    Error_Handler();
 8002f30:	f7ff f9a2 	bl	8002278 <Error_Handler>
 8002f34:	e7ba      	b.n	8002eac <MX_TIM4_Init+0x64>
    Error_Handler();
 8002f36:	f7ff f99f 	bl	8002278 <Error_Handler>
 8002f3a:	e7b2      	b.n	8002ea2 <MX_TIM4_Init+0x5a>
    Error_Handler();
 8002f3c:	f7ff f99c 	bl	8002278 <Error_Handler>
 8002f40:	e7a6      	b.n	8002e90 <MX_TIM4_Init+0x48>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f42:	4b48      	ldr	r3, [pc, #288]	; (8003064 <MX_TIM4_Init+0x21c>)
 8002f44:	9206      	str	r2, [sp, #24]
 8002f46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f48:	4847      	ldr	r0, [pc, #284]	; (8003068 <MX_TIM4_Init+0x220>)
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f4a:	f042 0210 	orr.w	r2, r2, #16
 8002f4e:	631a      	str	r2, [r3, #48]	; 0x30
 8002f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f52:	f003 0310 	and.w	r3, r3, #16
 8002f56:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002f58:	2420      	movs	r4, #32
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f5a:	2202      	movs	r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8002f5c:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f5e:	a912      	add	r1, sp, #72	; 0x48
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f60:	9d06      	ldr	r5, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002f62:	9412      	str	r4, [sp, #72]	; 0x48
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f64:	9213      	str	r2, [sp, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8002f66:	9316      	str	r3, [sp, #88]	; 0x58
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f68:	f7fd fd38 	bl	80009dc <HAL_GPIO_Init>
}
 8002f6c:	e7d8      	b.n	8002f20 <MX_TIM4_Init+0xd8>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f6e:	4b3d      	ldr	r3, [pc, #244]	; (8003064 <MX_TIM4_Init+0x21c>)
 8002f70:	9201      	str	r2, [sp, #4]
 8002f72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f74:	483c      	ldr	r0, [pc, #240]	; (8003068 <MX_TIM4_Init+0x220>)
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f76:	f042 0210 	orr.w	r2, r2, #16
 8002f7a:	631a      	str	r2, [r3, #48]	; 0x30
 8002f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7e:	f003 0310 	and.w	r3, r3, #16
 8002f82:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002f84:	f44f 7400 	mov.w	r4, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f88:	2202      	movs	r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002f8a:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f8c:	a912      	add	r1, sp, #72	; 0x48
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f8e:	9d01      	ldr	r5, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002f90:	9412      	str	r4, [sp, #72]	; 0x48
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f92:	9213      	str	r2, [sp, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002f94:	9316      	str	r3, [sp, #88]	; 0x58
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f96:	f7fd fd21 	bl	80009dc <HAL_GPIO_Init>
 8002f9a:	e7c1      	b.n	8002f20 <MX_TIM4_Init+0xd8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f9c:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8002fa0:	9202      	str	r2, [sp, #8]
 8002fa2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fa4:	4831      	ldr	r0, [pc, #196]	; (800306c <MX_TIM4_Init+0x224>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fa6:	f042 0201 	orr.w	r2, r2, #1
 8002faa:	631a      	str	r2, [r3, #48]	; 0x30
 8002fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fae:	f003 0301 	and.w	r3, r3, #1
 8002fb2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002fb4:	f44f 4400 	mov.w	r4, #32768	; 0x8000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fb8:	2202      	movs	r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002fba:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fbc:	a912      	add	r1, sp, #72	; 0x48
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fbe:	9d02      	ldr	r5, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002fc0:	9412      	str	r4, [sp, #72]	; 0x48
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fc2:	9213      	str	r2, [sp, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002fc4:	9316      	str	r3, [sp, #88]	; 0x58
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fc6:	f7fd fd09 	bl	80009dc <HAL_GPIO_Init>
 8002fca:	e7a9      	b.n	8002f20 <MX_TIM4_Init+0xd8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fcc:	4b25      	ldr	r3, [pc, #148]	; (8003064 <MX_TIM4_Init+0x21c>)
 8002fce:	9203      	str	r2, [sp, #12]
 8002fd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fd2:	4826      	ldr	r0, [pc, #152]	; (800306c <MX_TIM4_Init+0x224>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fd4:	f042 0201 	orr.w	r2, r2, #1
 8002fd8:	631a      	str	r2, [r3, #48]	; 0x30
 8002fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fdc:	f003 0301 	and.w	r3, r3, #1
 8002fe0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002fe2:	2240      	movs	r2, #64	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fe4:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fe6:	a912      	add	r1, sp, #72	; 0x48
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fe8:	9c03      	ldr	r4, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002fea:	9212      	str	r2, [sp, #72]	; 0x48
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fec:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002fee:	9316      	str	r3, [sp, #88]	; 0x58
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ff0:	f7fd fcf4 	bl	80009dc <HAL_GPIO_Init>
 8002ff4:	e794      	b.n	8002f20 <MX_TIM4_Init+0xd8>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ff6:	4b1b      	ldr	r3, [pc, #108]	; (8003064 <MX_TIM4_Init+0x21c>)
 8002ff8:	9204      	str	r2, [sp, #16]
 8002ffa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ffc:	481c      	ldr	r0, [pc, #112]	; (8003070 <MX_TIM4_Init+0x228>)
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ffe:	f042 0208 	orr.w	r2, r2, #8
 8003002:	631a      	str	r2, [r3, #48]	; 0x30
 8003004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003006:	f003 0308 	and.w	r3, r3, #8
 800300a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800300c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003010:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003012:	a912      	add	r1, sp, #72	; 0x48
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003014:	9c04      	ldr	r4, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003016:	9212      	str	r2, [sp, #72]	; 0x48
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003018:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800301a:	9316      	str	r3, [sp, #88]	; 0x58
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800301c:	f7fd fcde 	bl	80009dc <HAL_GPIO_Init>
 8003020:	e77e      	b.n	8002f20 <MX_TIM4_Init+0xd8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003022:	4b10      	ldr	r3, [pc, #64]	; (8003064 <MX_TIM4_Init+0x21c>)
 8003024:	9205      	str	r2, [sp, #20]
 8003026:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003028:	4810      	ldr	r0, [pc, #64]	; (800306c <MX_TIM4_Init+0x224>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800302a:	f042 0201 	orr.w	r2, r2, #1
 800302e:	631a      	str	r2, [r3, #48]	; 0x30
 8003030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003032:	f003 0301 	and.w	r3, r3, #1
 8003036:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003038:	2201      	movs	r2, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800303a:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800303c:	a912      	add	r1, sp, #72	; 0x48
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800303e:	9c05      	ldr	r4, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003040:	9212      	str	r2, [sp, #72]	; 0x48
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003042:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003044:	9316      	str	r3, [sp, #88]	; 0x58
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003046:	f7fd fcc9 	bl	80009dc <HAL_GPIO_Init>
 800304a:	e769      	b.n	8002f20 <MX_TIM4_Init+0xd8>
 800304c:	2000008c 	.word	0x2000008c
 8003050:	40000800 	.word	0x40000800
 8003054:	40010000 	.word	0x40010000
 8003058:	40000400 	.word	0x40000400
 800305c:	40000c00 	.word	0x40000c00
 8003060:	40014000 	.word	0x40014000
 8003064:	40023800 	.word	0x40023800
 8003068:	40021000 	.word	0x40021000
 800306c:	40020000 	.word	0x40020000
 8003070:	40020c00 	.word	0x40020c00

08003074 <MX_TIM5_Init>:
{
 8003074:	b530      	push	{r4, r5, lr}
  htim5.Instance = TIM5;
 8003076:	4c80      	ldr	r4, [pc, #512]	; (8003278 <MX_TIM5_Init+0x204>)
 8003078:	4b80      	ldr	r3, [pc, #512]	; (800327c <MX_TIM5_Init+0x208>)
 800307a:	6023      	str	r3, [r4, #0]
{
 800307c:	b09f      	sub	sp, #124	; 0x7c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800307e:	2300      	movs	r3, #0
  htim5.Init.Period = 4294967295;
 8003080:	f04f 32ff 	mov.w	r2, #4294967295
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003084:	4620      	mov	r0, r4
  htim5.Init.Period = 4294967295;
 8003086:	60e2      	str	r2, [r4, #12]
  htim5.Init.Prescaler = 0;
 8003088:	6063      	str	r3, [r4, #4]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800308a:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800308c:	930d      	str	r3, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800308e:	9307      	str	r3, [sp, #28]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003090:	9317      	str	r3, [sp, #92]	; 0x5c
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003092:	60a3      	str	r3, [r4, #8]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003094:	6123      	str	r3, [r4, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003096:	61a3      	str	r3, [r4, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003098:	930a      	str	r3, [sp, #40]	; 0x28
 800309a:	930b      	str	r3, [sp, #44]	; 0x2c
 800309c:	930c      	str	r3, [sp, #48]	; 0x30
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800309e:	930e      	str	r3, [sp, #56]	; 0x38
 80030a0:	930f      	str	r3, [sp, #60]	; 0x3c
 80030a2:	9310      	str	r3, [sp, #64]	; 0x40
 80030a4:	9311      	str	r3, [sp, #68]	; 0x44
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030a6:	9308      	str	r3, [sp, #32]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80030a8:	9318      	str	r3, [sp, #96]	; 0x60
 80030aa:	9319      	str	r3, [sp, #100]	; 0x64
 80030ac:	931a      	str	r3, [sp, #104]	; 0x68
 80030ae:	931b      	str	r3, [sp, #108]	; 0x6c
 80030b0:	931c      	str	r3, [sp, #112]	; 0x70
 80030b2:	931d      	str	r3, [sp, #116]	; 0x74
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80030b4:	f7fe f8ac 	bl	8001210 <HAL_TIM_Base_Init>
 80030b8:	2800      	cmp	r0, #0
 80030ba:	d155      	bne.n	8003168 <MX_TIM5_Init+0xf4>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80030c0:	a909      	add	r1, sp, #36	; 0x24
 80030c2:	486d      	ldr	r0, [pc, #436]	; (8003278 <MX_TIM5_Init+0x204>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030c4:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80030c6:	f7fe fb5b 	bl	8001780 <HAL_TIM_ConfigClockSource>
 80030ca:	2800      	cmp	r0, #0
 80030cc:	d149      	bne.n	8003162 <MX_TIM5_Init+0xee>
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80030ce:	486a      	ldr	r0, [pc, #424]	; (8003278 <MX_TIM5_Init+0x204>)
 80030d0:	f7fe f91e 	bl	8001310 <HAL_TIM_PWM_Init>
 80030d4:	2800      	cmp	r0, #0
 80030d6:	d141      	bne.n	800315c <MX_TIM5_Init+0xe8>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80030d8:	2206      	movs	r2, #6
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80030da:	2300      	movs	r3, #0
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 80030dc:	a90d      	add	r1, sp, #52	; 0x34
 80030de:	4866      	ldr	r0, [pc, #408]	; (8003278 <MX_TIM5_Init+0x204>)
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80030e0:	920d      	str	r2, [sp, #52]	; 0x34
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80030e2:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 80030e4:	f7fe fc00 	bl	80018e8 <HAL_TIM_SlaveConfigSynchro>
 80030e8:	2800      	cmp	r0, #0
 80030ea:	d134      	bne.n	8003156 <MX_TIM5_Init+0xe2>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030ec:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80030ee:	a907      	add	r1, sp, #28
 80030f0:	4861      	ldr	r0, [pc, #388]	; (8003278 <MX_TIM5_Init+0x204>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030f2:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030f4:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80030f6:	f7fe fc7b 	bl	80019f0 <HAL_TIMEx_MasterConfigSynchronization>
 80030fa:	bb48      	cbnz	r0, 8003150 <MX_TIM5_Init+0xdc>
  sConfigOC.Pulse = 0;
 80030fc:	2300      	movs	r3, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80030fe:	2560      	movs	r5, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003100:	a917      	add	r1, sp, #92	; 0x5c
 8003102:	461a      	mov	r2, r3
 8003104:	485c      	ldr	r0, [pc, #368]	; (8003278 <MX_TIM5_Init+0x204>)
  sConfigOC.Pulse = 0;
 8003106:	9318      	str	r3, [sp, #96]	; 0x60
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003108:	9319      	str	r3, [sp, #100]	; 0x64
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800310a:	931b      	str	r3, [sp, #108]	; 0x6c
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800310c:	9517      	str	r5, [sp, #92]	; 0x5c
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800310e:	f7fe fa27 	bl	8001560 <HAL_TIM_PWM_ConfigChannel>
 8003112:	b108      	cbz	r0, 8003118 <MX_TIM5_Init+0xa4>
    Error_Handler();
 8003114:	f7ff f8b0 	bl	8002278 <Error_Handler>
  if(timHandle->Instance==TIM1)
 8003118:	6823      	ldr	r3, [r4, #0]
 800311a:	4959      	ldr	r1, [pc, #356]	; (8003280 <MX_TIM5_Init+0x20c>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800311c:	2200      	movs	r2, #0
  if(timHandle->Instance==TIM1)
 800311e:	428b      	cmp	r3, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003120:	9213      	str	r2, [sp, #76]	; 0x4c
 8003122:	9212      	str	r2, [sp, #72]	; 0x48
 8003124:	9214      	str	r2, [sp, #80]	; 0x50
 8003126:	9215      	str	r2, [sp, #84]	; 0x54
 8003128:	9216      	str	r2, [sp, #88]	; 0x58
  if(timHandle->Instance==TIM1)
 800312a:	d036      	beq.n	800319a <MX_TIM5_Init+0x126>
  else if(timHandle->Instance==TIM2)
 800312c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003130:	d04a      	beq.n	80031c8 <MX_TIM5_Init+0x154>
  else if(timHandle->Instance==TIM3)
 8003132:	4954      	ldr	r1, [pc, #336]	; (8003284 <MX_TIM5_Init+0x210>)
 8003134:	428b      	cmp	r3, r1
 8003136:	d05f      	beq.n	80031f8 <MX_TIM5_Init+0x184>
  else if(timHandle->Instance==TIM4)
 8003138:	4953      	ldr	r1, [pc, #332]	; (8003288 <MX_TIM5_Init+0x214>)
 800313a:	428b      	cmp	r3, r1
 800313c:	d071      	beq.n	8003222 <MX_TIM5_Init+0x1ae>
  else if(timHandle->Instance==TIM5)
 800313e:	494f      	ldr	r1, [pc, #316]	; (800327c <MX_TIM5_Init+0x208>)
 8003140:	428b      	cmp	r3, r1
 8003142:	f000 8084 	beq.w	800324e <MX_TIM5_Init+0x1da>
  else if(timHandle->Instance==TIM9)
 8003146:	4951      	ldr	r1, [pc, #324]	; (800328c <MX_TIM5_Init+0x218>)
 8003148:	428b      	cmp	r3, r1
 800314a:	d010      	beq.n	800316e <MX_TIM5_Init+0xfa>
}
 800314c:	b01f      	add	sp, #124	; 0x7c
 800314e:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8003150:	f7ff f892 	bl	8002278 <Error_Handler>
 8003154:	e7d2      	b.n	80030fc <MX_TIM5_Init+0x88>
    Error_Handler();
 8003156:	f7ff f88f 	bl	8002278 <Error_Handler>
 800315a:	e7c7      	b.n	80030ec <MX_TIM5_Init+0x78>
    Error_Handler();
 800315c:	f7ff f88c 	bl	8002278 <Error_Handler>
 8003160:	e7ba      	b.n	80030d8 <MX_TIM5_Init+0x64>
    Error_Handler();
 8003162:	f7ff f889 	bl	8002278 <Error_Handler>
 8003166:	e7b2      	b.n	80030ce <MX_TIM5_Init+0x5a>
    Error_Handler();
 8003168:	f7ff f886 	bl	8002278 <Error_Handler>
 800316c:	e7a6      	b.n	80030bc <MX_TIM5_Init+0x48>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800316e:	4b48      	ldr	r3, [pc, #288]	; (8003290 <MX_TIM5_Init+0x21c>)
 8003170:	9206      	str	r2, [sp, #24]
 8003172:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003174:	4847      	ldr	r0, [pc, #284]	; (8003294 <MX_TIM5_Init+0x220>)
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003176:	f042 0210 	orr.w	r2, r2, #16
 800317a:	631a      	str	r2, [r3, #48]	; 0x30
 800317c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317e:	f003 0310 	and.w	r3, r3, #16
 8003182:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003184:	2420      	movs	r4, #32
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003186:	2202      	movs	r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8003188:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800318a:	a912      	add	r1, sp, #72	; 0x48
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800318c:	9d06      	ldr	r5, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800318e:	9412      	str	r4, [sp, #72]	; 0x48
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003190:	9213      	str	r2, [sp, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8003192:	9316      	str	r3, [sp, #88]	; 0x58
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003194:	f7fd fc22 	bl	80009dc <HAL_GPIO_Init>
}
 8003198:	e7d8      	b.n	800314c <MX_TIM5_Init+0xd8>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800319a:	4b3d      	ldr	r3, [pc, #244]	; (8003290 <MX_TIM5_Init+0x21c>)
 800319c:	9201      	str	r2, [sp, #4]
 800319e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80031a0:	483c      	ldr	r0, [pc, #240]	; (8003294 <MX_TIM5_Init+0x220>)
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80031a2:	f042 0210 	orr.w	r2, r2, #16
 80031a6:	631a      	str	r2, [r3, #48]	; 0x30
 80031a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031aa:	f003 0310 	and.w	r3, r3, #16
 80031ae:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80031b0:	f44f 7400 	mov.w	r4, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031b4:	2202      	movs	r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80031b6:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80031b8:	a912      	add	r1, sp, #72	; 0x48
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80031ba:	9d01      	ldr	r5, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80031bc:	9412      	str	r4, [sp, #72]	; 0x48
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031be:	9213      	str	r2, [sp, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80031c0:	9316      	str	r3, [sp, #88]	; 0x58
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80031c2:	f7fd fc0b 	bl	80009dc <HAL_GPIO_Init>
 80031c6:	e7c1      	b.n	800314c <MX_TIM5_Init+0xd8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031c8:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 80031cc:	9202      	str	r2, [sp, #8]
 80031ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031d0:	4831      	ldr	r0, [pc, #196]	; (8003298 <MX_TIM5_Init+0x224>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031d2:	f042 0201 	orr.w	r2, r2, #1
 80031d6:	631a      	str	r2, [r3, #48]	; 0x30
 80031d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80031e0:	f44f 4400 	mov.w	r4, #32768	; 0x8000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031e4:	2202      	movs	r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80031e6:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031e8:	a912      	add	r1, sp, #72	; 0x48
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031ea:	9d02      	ldr	r5, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80031ec:	9412      	str	r4, [sp, #72]	; 0x48
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ee:	9213      	str	r2, [sp, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80031f0:	9316      	str	r3, [sp, #88]	; 0x58
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031f2:	f7fd fbf3 	bl	80009dc <HAL_GPIO_Init>
 80031f6:	e7a9      	b.n	800314c <MX_TIM5_Init+0xd8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031f8:	4b25      	ldr	r3, [pc, #148]	; (8003290 <MX_TIM5_Init+0x21c>)
 80031fa:	9203      	str	r2, [sp, #12]
 80031fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031fe:	4826      	ldr	r0, [pc, #152]	; (8003298 <MX_TIM5_Init+0x224>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003200:	f042 0201 	orr.w	r2, r2, #1
 8003204:	631a      	str	r2, [r3, #48]	; 0x30
 8003206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003208:	f003 0301 	and.w	r3, r3, #1
 800320c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800320e:	2240      	movs	r2, #64	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003210:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003212:	a912      	add	r1, sp, #72	; 0x48
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003214:	9c03      	ldr	r4, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003216:	9212      	str	r2, [sp, #72]	; 0x48
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003218:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800321a:	9316      	str	r3, [sp, #88]	; 0x58
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800321c:	f7fd fbde 	bl	80009dc <HAL_GPIO_Init>
 8003220:	e794      	b.n	800314c <MX_TIM5_Init+0xd8>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003222:	4b1b      	ldr	r3, [pc, #108]	; (8003290 <MX_TIM5_Init+0x21c>)
 8003224:	9204      	str	r2, [sp, #16]
 8003226:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003228:	481c      	ldr	r0, [pc, #112]	; (800329c <MX_TIM5_Init+0x228>)
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800322a:	f042 0208 	orr.w	r2, r2, #8
 800322e:	631a      	str	r2, [r3, #48]	; 0x30
 8003230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003232:	f003 0308 	and.w	r3, r3, #8
 8003236:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003238:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800323c:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800323e:	a912      	add	r1, sp, #72	; 0x48
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003240:	9c04      	ldr	r4, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003242:	9212      	str	r2, [sp, #72]	; 0x48
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003244:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003246:	9316      	str	r3, [sp, #88]	; 0x58
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003248:	f7fd fbc8 	bl	80009dc <HAL_GPIO_Init>
 800324c:	e77e      	b.n	800314c <MX_TIM5_Init+0xd8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800324e:	4b10      	ldr	r3, [pc, #64]	; (8003290 <MX_TIM5_Init+0x21c>)
 8003250:	9205      	str	r2, [sp, #20]
 8003252:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003254:	4810      	ldr	r0, [pc, #64]	; (8003298 <MX_TIM5_Init+0x224>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003256:	f042 0201 	orr.w	r2, r2, #1
 800325a:	631a      	str	r2, [r3, #48]	; 0x30
 800325c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003264:	2201      	movs	r2, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003266:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003268:	a912      	add	r1, sp, #72	; 0x48
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800326a:	9c05      	ldr	r4, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800326c:	9212      	str	r2, [sp, #72]	; 0x48
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800326e:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003270:	9316      	str	r3, [sp, #88]	; 0x58
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003272:	f7fd fbb3 	bl	80009dc <HAL_GPIO_Init>
 8003276:	e769      	b.n	800314c <MX_TIM5_Init+0xd8>
 8003278:	200000d4 	.word	0x200000d4
 800327c:	40000c00 	.word	0x40000c00
 8003280:	40010000 	.word	0x40010000
 8003284:	40000400 	.word	0x40000400
 8003288:	40000800 	.word	0x40000800
 800328c:	40014000 	.word	0x40014000
 8003290:	40023800 	.word	0x40023800
 8003294:	40021000 	.word	0x40021000
 8003298:	40020000 	.word	0x40020000
 800329c:	40020c00 	.word	0x40020c00

080032a0 <MX_TIM9_Init>:
{
 80032a0:	b530      	push	{r4, r5, lr}
  htim9.Instance = TIM9;
 80032a2:	4c79      	ldr	r4, [pc, #484]	; (8003488 <MX_TIM9_Init+0x1e8>)
 80032a4:	4b79      	ldr	r3, [pc, #484]	; (800348c <MX_TIM9_Init+0x1ec>)
 80032a6:	6023      	str	r3, [r4, #0]
{
 80032a8:	b09d      	sub	sp, #116	; 0x74
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80032aa:	2300      	movs	r3, #0
  htim9.Init.Period = 65535;
 80032ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80032b0:	4620      	mov	r0, r4
  htim9.Init.Period = 65535;
 80032b2:	60e2      	str	r2, [r4, #12]
  htim9.Init.Prescaler = 0;
 80032b4:	6063      	str	r3, [r4, #4]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80032b6:	9307      	str	r3, [sp, #28]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80032b8:	930b      	str	r3, [sp, #44]	; 0x2c
  TIM_OC_InitTypeDef sConfigOC = {0};
 80032ba:	9315      	str	r3, [sp, #84]	; 0x54
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032bc:	60a3      	str	r3, [r4, #8]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032be:	6123      	str	r3, [r4, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032c0:	61a3      	str	r3, [r4, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80032c2:	9308      	str	r3, [sp, #32]
 80032c4:	9309      	str	r3, [sp, #36]	; 0x24
 80032c6:	930a      	str	r3, [sp, #40]	; 0x28
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80032c8:	930c      	str	r3, [sp, #48]	; 0x30
 80032ca:	930d      	str	r3, [sp, #52]	; 0x34
 80032cc:	930e      	str	r3, [sp, #56]	; 0x38
 80032ce:	930f      	str	r3, [sp, #60]	; 0x3c
  TIM_OC_InitTypeDef sConfigOC = {0};
 80032d0:	9316      	str	r3, [sp, #88]	; 0x58
 80032d2:	9317      	str	r3, [sp, #92]	; 0x5c
 80032d4:	9318      	str	r3, [sp, #96]	; 0x60
 80032d6:	9319      	str	r3, [sp, #100]	; 0x64
 80032d8:	931a      	str	r3, [sp, #104]	; 0x68
 80032da:	931b      	str	r3, [sp, #108]	; 0x6c
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80032dc:	f7fd ff98 	bl	8001210 <HAL_TIM_Base_Init>
 80032e0:	2800      	cmp	r0, #0
 80032e2:	d149      	bne.n	8003378 <MX_TIM9_Init+0xd8>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80032e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80032e8:	a907      	add	r1, sp, #28
 80032ea:	4867      	ldr	r0, [pc, #412]	; (8003488 <MX_TIM9_Init+0x1e8>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80032ec:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80032ee:	f7fe fa47 	bl	8001780 <HAL_TIM_ConfigClockSource>
 80032f2:	2800      	cmp	r0, #0
 80032f4:	d13d      	bne.n	8003372 <MX_TIM9_Init+0xd2>
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 80032f6:	4864      	ldr	r0, [pc, #400]	; (8003488 <MX_TIM9_Init+0x1e8>)
 80032f8:	f7fe f80a 	bl	8001310 <HAL_TIM_PWM_Init>
 80032fc:	2800      	cmp	r0, #0
 80032fe:	d135      	bne.n	800336c <MX_TIM9_Init+0xcc>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8003300:	2206      	movs	r2, #6
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8003302:	2300      	movs	r3, #0
  if (HAL_TIM_SlaveConfigSynchro(&htim9, &sSlaveConfig) != HAL_OK)
 8003304:	a90b      	add	r1, sp, #44	; 0x2c
 8003306:	4860      	ldr	r0, [pc, #384]	; (8003488 <MX_TIM9_Init+0x1e8>)
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8003308:	920b      	str	r2, [sp, #44]	; 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800330a:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim9, &sSlaveConfig) != HAL_OK)
 800330c:	f7fe faec 	bl	80018e8 <HAL_TIM_SlaveConfigSynchro>
 8003310:	bb48      	cbnz	r0, 8003366 <MX_TIM9_Init+0xc6>
  sConfigOC.Pulse = 0;
 8003312:	2300      	movs	r3, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003314:	2560      	movs	r5, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003316:	a915      	add	r1, sp, #84	; 0x54
 8003318:	461a      	mov	r2, r3
 800331a:	485b      	ldr	r0, [pc, #364]	; (8003488 <MX_TIM9_Init+0x1e8>)
  sConfigOC.Pulse = 0;
 800331c:	9316      	str	r3, [sp, #88]	; 0x58
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800331e:	9317      	str	r3, [sp, #92]	; 0x5c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003320:	9319      	str	r3, [sp, #100]	; 0x64
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003322:	9515      	str	r5, [sp, #84]	; 0x54
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003324:	f7fe f91c 	bl	8001560 <HAL_TIM_PWM_ConfigChannel>
 8003328:	b108      	cbz	r0, 800332e <MX_TIM9_Init+0x8e>
    Error_Handler();
 800332a:	f7fe ffa5 	bl	8002278 <Error_Handler>
  if(timHandle->Instance==TIM1)
 800332e:	6823      	ldr	r3, [r4, #0]
 8003330:	4957      	ldr	r1, [pc, #348]	; (8003490 <MX_TIM9_Init+0x1f0>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003332:	2200      	movs	r2, #0
  if(timHandle->Instance==TIM1)
 8003334:	428b      	cmp	r3, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003336:	9211      	str	r2, [sp, #68]	; 0x44
 8003338:	9210      	str	r2, [sp, #64]	; 0x40
 800333a:	9212      	str	r2, [sp, #72]	; 0x48
 800333c:	9213      	str	r2, [sp, #76]	; 0x4c
 800333e:	9214      	str	r2, [sp, #80]	; 0x50
  if(timHandle->Instance==TIM1)
 8003340:	d033      	beq.n	80033aa <MX_TIM9_Init+0x10a>
  else if(timHandle->Instance==TIM2)
 8003342:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003346:	d047      	beq.n	80033d8 <MX_TIM9_Init+0x138>
  else if(timHandle->Instance==TIM3)
 8003348:	4952      	ldr	r1, [pc, #328]	; (8003494 <MX_TIM9_Init+0x1f4>)
 800334a:	428b      	cmp	r3, r1
 800334c:	d05c      	beq.n	8003408 <MX_TIM9_Init+0x168>
  else if(timHandle->Instance==TIM4)
 800334e:	4952      	ldr	r1, [pc, #328]	; (8003498 <MX_TIM9_Init+0x1f8>)
 8003350:	428b      	cmp	r3, r1
 8003352:	d06e      	beq.n	8003432 <MX_TIM9_Init+0x192>
  else if(timHandle->Instance==TIM5)
 8003354:	4951      	ldr	r1, [pc, #324]	; (800349c <MX_TIM9_Init+0x1fc>)
 8003356:	428b      	cmp	r3, r1
 8003358:	f000 8081 	beq.w	800345e <MX_TIM9_Init+0x1be>
  else if(timHandle->Instance==TIM9)
 800335c:	494b      	ldr	r1, [pc, #300]	; (800348c <MX_TIM9_Init+0x1ec>)
 800335e:	428b      	cmp	r3, r1
 8003360:	d00d      	beq.n	800337e <MX_TIM9_Init+0xde>
}
 8003362:	b01d      	add	sp, #116	; 0x74
 8003364:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8003366:	f7fe ff87 	bl	8002278 <Error_Handler>
 800336a:	e7d2      	b.n	8003312 <MX_TIM9_Init+0x72>
    Error_Handler();
 800336c:	f7fe ff84 	bl	8002278 <Error_Handler>
 8003370:	e7c6      	b.n	8003300 <MX_TIM9_Init+0x60>
    Error_Handler();
 8003372:	f7fe ff81 	bl	8002278 <Error_Handler>
 8003376:	e7be      	b.n	80032f6 <MX_TIM9_Init+0x56>
    Error_Handler();
 8003378:	f7fe ff7e 	bl	8002278 <Error_Handler>
 800337c:	e7b2      	b.n	80032e4 <MX_TIM9_Init+0x44>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800337e:	4b48      	ldr	r3, [pc, #288]	; (80034a0 <MX_TIM9_Init+0x200>)
 8003380:	9206      	str	r2, [sp, #24]
 8003382:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003384:	4847      	ldr	r0, [pc, #284]	; (80034a4 <MX_TIM9_Init+0x204>)
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003386:	f042 0210 	orr.w	r2, r2, #16
 800338a:	631a      	str	r2, [r3, #48]	; 0x30
 800338c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338e:	f003 0310 	and.w	r3, r3, #16
 8003392:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003394:	2420      	movs	r4, #32
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003396:	2202      	movs	r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8003398:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800339a:	a910      	add	r1, sp, #64	; 0x40
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800339c:	9d06      	ldr	r5, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800339e:	9410      	str	r4, [sp, #64]	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033a0:	9211      	str	r2, [sp, #68]	; 0x44
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80033a2:	9314      	str	r3, [sp, #80]	; 0x50
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80033a4:	f7fd fb1a 	bl	80009dc <HAL_GPIO_Init>
}
 80033a8:	e7db      	b.n	8003362 <MX_TIM9_Init+0xc2>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80033aa:	4b3d      	ldr	r3, [pc, #244]	; (80034a0 <MX_TIM9_Init+0x200>)
 80033ac:	9201      	str	r2, [sp, #4]
 80033ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80033b0:	483c      	ldr	r0, [pc, #240]	; (80034a4 <MX_TIM9_Init+0x204>)
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80033b2:	f042 0210 	orr.w	r2, r2, #16
 80033b6:	631a      	str	r2, [r3, #48]	; 0x30
 80033b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ba:	f003 0310 	and.w	r3, r3, #16
 80033be:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80033c0:	f44f 7400 	mov.w	r4, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033c4:	2202      	movs	r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80033c6:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80033c8:	a910      	add	r1, sp, #64	; 0x40
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80033ca:	9d01      	ldr	r5, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80033cc:	9410      	str	r4, [sp, #64]	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ce:	9211      	str	r2, [sp, #68]	; 0x44
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80033d0:	9314      	str	r3, [sp, #80]	; 0x50
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80033d2:	f7fd fb03 	bl	80009dc <HAL_GPIO_Init>
 80033d6:	e7c4      	b.n	8003362 <MX_TIM9_Init+0xc2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033d8:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 80033dc:	9202      	str	r2, [sp, #8]
 80033de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033e0:	4831      	ldr	r0, [pc, #196]	; (80034a8 <MX_TIM9_Init+0x208>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033e2:	f042 0201 	orr.w	r2, r2, #1
 80033e6:	631a      	str	r2, [r3, #48]	; 0x30
 80033e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ea:	f003 0301 	and.w	r3, r3, #1
 80033ee:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80033f0:	f44f 4400 	mov.w	r4, #32768	; 0x8000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033f4:	2202      	movs	r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80033f6:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033f8:	a910      	add	r1, sp, #64	; 0x40
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033fa:	9d02      	ldr	r5, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80033fc:	9410      	str	r4, [sp, #64]	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033fe:	9211      	str	r2, [sp, #68]	; 0x44
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003400:	9314      	str	r3, [sp, #80]	; 0x50
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003402:	f7fd faeb 	bl	80009dc <HAL_GPIO_Init>
 8003406:	e7ac      	b.n	8003362 <MX_TIM9_Init+0xc2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003408:	4b25      	ldr	r3, [pc, #148]	; (80034a0 <MX_TIM9_Init+0x200>)
 800340a:	9203      	str	r2, [sp, #12]
 800340c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800340e:	4826      	ldr	r0, [pc, #152]	; (80034a8 <MX_TIM9_Init+0x208>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003410:	f042 0201 	orr.w	r2, r2, #1
 8003414:	631a      	str	r2, [r3, #48]	; 0x30
 8003416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003418:	f003 0301 	and.w	r3, r3, #1
 800341c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800341e:	2240      	movs	r2, #64	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003420:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003422:	a910      	add	r1, sp, #64	; 0x40
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003424:	9c03      	ldr	r4, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003426:	9210      	str	r2, [sp, #64]	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003428:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800342a:	9314      	str	r3, [sp, #80]	; 0x50
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800342c:	f7fd fad6 	bl	80009dc <HAL_GPIO_Init>
 8003430:	e797      	b.n	8003362 <MX_TIM9_Init+0xc2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003432:	4b1b      	ldr	r3, [pc, #108]	; (80034a0 <MX_TIM9_Init+0x200>)
 8003434:	9204      	str	r2, [sp, #16]
 8003436:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003438:	481c      	ldr	r0, [pc, #112]	; (80034ac <MX_TIM9_Init+0x20c>)
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800343a:	f042 0208 	orr.w	r2, r2, #8
 800343e:	631a      	str	r2, [r3, #48]	; 0x30
 8003440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003442:	f003 0308 	and.w	r3, r3, #8
 8003446:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003448:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800344c:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800344e:	a910      	add	r1, sp, #64	; 0x40
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003450:	9c04      	ldr	r4, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003452:	9210      	str	r2, [sp, #64]	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003454:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003456:	9314      	str	r3, [sp, #80]	; 0x50
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003458:	f7fd fac0 	bl	80009dc <HAL_GPIO_Init>
 800345c:	e781      	b.n	8003362 <MX_TIM9_Init+0xc2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800345e:	4b10      	ldr	r3, [pc, #64]	; (80034a0 <MX_TIM9_Init+0x200>)
 8003460:	9205      	str	r2, [sp, #20]
 8003462:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003464:	4810      	ldr	r0, [pc, #64]	; (80034a8 <MX_TIM9_Init+0x208>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003466:	f042 0201 	orr.w	r2, r2, #1
 800346a:	631a      	str	r2, [r3, #48]	; 0x30
 800346c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003474:	2201      	movs	r2, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003476:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003478:	a910      	add	r1, sp, #64	; 0x40
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800347a:	9c05      	ldr	r4, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800347c:	9210      	str	r2, [sp, #64]	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800347e:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003480:	9314      	str	r3, [sp, #80]	; 0x50
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003482:	f7fd faab 	bl	80009dc <HAL_GPIO_Init>
 8003486:	e76c      	b.n	8003362 <MX_TIM9_Init+0xc2>
 8003488:	200001ac 	.word	0x200001ac
 800348c:	40014000 	.word	0x40014000
 8003490:	40010000 	.word	0x40010000
 8003494:	40000400 	.word	0x40000400
 8003498:	40000800 	.word	0x40000800
 800349c:	40000c00 	.word	0x40000c00
 80034a0:	40023800 	.word	0x40023800
 80034a4:	40021000 	.word	0x40021000
 80034a8:	40020000 	.word	0x40020000
 80034ac:	40020c00 	.word	0x40020c00

080034b0 <HAL_TIM_Base_MspInit>:
  if(tim_baseHandle->Instance==TIM1)
 80034b0:	6803      	ldr	r3, [r0, #0]
 80034b2:	4a33      	ldr	r2, [pc, #204]	; (8003580 <HAL_TIM_Base_MspInit+0xd0>)
 80034b4:	4293      	cmp	r3, r2
{
 80034b6:	b086      	sub	sp, #24
  if(tim_baseHandle->Instance==TIM1)
 80034b8:	d01e      	beq.n	80034f8 <HAL_TIM_Base_MspInit+0x48>
  else if(tim_baseHandle->Instance==TIM2)
 80034ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034be:	d029      	beq.n	8003514 <HAL_TIM_Base_MspInit+0x64>
  else if(tim_baseHandle->Instance==TIM3)
 80034c0:	4a30      	ldr	r2, [pc, #192]	; (8003584 <HAL_TIM_Base_MspInit+0xd4>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d034      	beq.n	8003530 <HAL_TIM_Base_MspInit+0x80>
  else if(tim_baseHandle->Instance==TIM4)
 80034c6:	4a30      	ldr	r2, [pc, #192]	; (8003588 <HAL_TIM_Base_MspInit+0xd8>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d03e      	beq.n	800354a <HAL_TIM_Base_MspInit+0x9a>
  else if(tim_baseHandle->Instance==TIM5)
 80034cc:	4a2f      	ldr	r2, [pc, #188]	; (800358c <HAL_TIM_Base_MspInit+0xdc>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d048      	beq.n	8003564 <HAL_TIM_Base_MspInit+0xb4>
  else if(tim_baseHandle->Instance==TIM9)
 80034d2:	4a2f      	ldr	r2, [pc, #188]	; (8003590 <HAL_TIM_Base_MspInit+0xe0>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d001      	beq.n	80034dc <HAL_TIM_Base_MspInit+0x2c>
}
 80034d8:	b006      	add	sp, #24
 80034da:	4770      	bx	lr
    __HAL_RCC_TIM9_CLK_ENABLE();
 80034dc:	4b2d      	ldr	r3, [pc, #180]	; (8003594 <HAL_TIM_Base_MspInit+0xe4>)
 80034de:	2200      	movs	r2, #0
 80034e0:	9205      	str	r2, [sp, #20]
 80034e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034e4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80034e8:	645a      	str	r2, [r3, #68]	; 0x44
 80034ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034f0:	9305      	str	r3, [sp, #20]
 80034f2:	9b05      	ldr	r3, [sp, #20]
}
 80034f4:	b006      	add	sp, #24
 80034f6:	4770      	bx	lr
    __HAL_RCC_TIM1_CLK_ENABLE();
 80034f8:	4b26      	ldr	r3, [pc, #152]	; (8003594 <HAL_TIM_Base_MspInit+0xe4>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	9200      	str	r2, [sp, #0]
 80034fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003500:	f042 0201 	orr.w	r2, r2, #1
 8003504:	645a      	str	r2, [r3, #68]	; 0x44
 8003506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003508:	f003 0301 	and.w	r3, r3, #1
 800350c:	9300      	str	r3, [sp, #0]
 800350e:	9b00      	ldr	r3, [sp, #0]
}
 8003510:	b006      	add	sp, #24
 8003512:	4770      	bx	lr
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003514:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8003518:	2200      	movs	r2, #0
 800351a:	9201      	str	r2, [sp, #4]
 800351c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800351e:	f042 0201 	orr.w	r2, r2, #1
 8003522:	641a      	str	r2, [r3, #64]	; 0x40
 8003524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003526:	f003 0301 	and.w	r3, r3, #1
 800352a:	9301      	str	r3, [sp, #4]
 800352c:	9b01      	ldr	r3, [sp, #4]
 800352e:	e7d3      	b.n	80034d8 <HAL_TIM_Base_MspInit+0x28>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003530:	4b18      	ldr	r3, [pc, #96]	; (8003594 <HAL_TIM_Base_MspInit+0xe4>)
 8003532:	2200      	movs	r2, #0
 8003534:	9202      	str	r2, [sp, #8]
 8003536:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003538:	f042 0202 	orr.w	r2, r2, #2
 800353c:	641a      	str	r2, [r3, #64]	; 0x40
 800353e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003540:	f003 0302 	and.w	r3, r3, #2
 8003544:	9302      	str	r3, [sp, #8]
 8003546:	9b02      	ldr	r3, [sp, #8]
 8003548:	e7c6      	b.n	80034d8 <HAL_TIM_Base_MspInit+0x28>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800354a:	4b12      	ldr	r3, [pc, #72]	; (8003594 <HAL_TIM_Base_MspInit+0xe4>)
 800354c:	2200      	movs	r2, #0
 800354e:	9203      	str	r2, [sp, #12]
 8003550:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003552:	f042 0204 	orr.w	r2, r2, #4
 8003556:	641a      	str	r2, [r3, #64]	; 0x40
 8003558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355a:	f003 0304 	and.w	r3, r3, #4
 800355e:	9303      	str	r3, [sp, #12]
 8003560:	9b03      	ldr	r3, [sp, #12]
 8003562:	e7b9      	b.n	80034d8 <HAL_TIM_Base_MspInit+0x28>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003564:	4b0b      	ldr	r3, [pc, #44]	; (8003594 <HAL_TIM_Base_MspInit+0xe4>)
 8003566:	2200      	movs	r2, #0
 8003568:	9204      	str	r2, [sp, #16]
 800356a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800356c:	f042 0208 	orr.w	r2, r2, #8
 8003570:	641a      	str	r2, [r3, #64]	; 0x40
 8003572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003574:	f003 0308 	and.w	r3, r3, #8
 8003578:	9304      	str	r3, [sp, #16]
 800357a:	9b04      	ldr	r3, [sp, #16]
 800357c:	e7ac      	b.n	80034d8 <HAL_TIM_Base_MspInit+0x28>
 800357e:	bf00      	nop
 8003580:	40010000 	.word	0x40010000
 8003584:	40000400 	.word	0x40000400
 8003588:	40000800 	.word	0x40000800
 800358c:	40000c00 	.word	0x40000c00
 8003590:	40014000 	.word	0x40014000
 8003594:	40023800 	.word	0x40023800

08003598 <MX_USART1_UART_Init>:
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003598:	4b0b      	ldr	r3, [pc, #44]	; (80035c8 <MX_USART1_UART_Init+0x30>)
 800359a:	4a0c      	ldr	r2, [pc, #48]	; (80035cc <MX_USART1_UART_Init+0x34>)
{
 800359c:	b510      	push	{r4, lr}
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 800359e:	210c      	movs	r1, #12
  huart1.Instance = USART1;
 80035a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80035a2:	f44f 34e1 	mov.w	r4, #115200	; 0x1c200
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80035a6:	2200      	movs	r2, #0
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80035a8:	4618      	mov	r0, r3
  huart1.Init.BaudRate = 115200;
 80035aa:	605c      	str	r4, [r3, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80035ac:	6159      	str	r1, [r3, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80035ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80035b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80035b2:	611a      	str	r2, [r3, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80035b4:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80035b6:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80035b8:	f7fe fa82 	bl	8001ac0 <HAL_UART_Init>
 80035bc:	b900      	cbnz	r0, 80035c0 <MX_USART1_UART_Init+0x28>
 80035be:	bd10      	pop	{r4, pc}
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80035c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80035c4:	f7fe be58 	b.w	8002278 <Error_Handler>
 80035c8:	2000029c 	.word	0x2000029c
 80035cc:	40011000 	.word	0x40011000

080035d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80035d0:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(uartHandle->Instance==USART1)
 80035d2:	6802      	ldr	r2, [r0, #0]
 80035d4:	4b26      	ldr	r3, [pc, #152]	; (8003670 <HAL_UART_MspInit+0xa0>)
{
 80035d6:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035d8:	2400      	movs	r4, #0
  if(uartHandle->Instance==USART1)
 80035da:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035dc:	9404      	str	r4, [sp, #16]
 80035de:	9403      	str	r4, [sp, #12]
 80035e0:	9405      	str	r4, [sp, #20]
 80035e2:	9406      	str	r4, [sp, #24]
 80035e4:	9407      	str	r4, [sp, #28]
  if(uartHandle->Instance==USART1)
 80035e6:	d001      	beq.n	80035ec <HAL_UART_MspInit+0x1c>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80035e8:	b009      	add	sp, #36	; 0x24
 80035ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 80035ec:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 80035f0:	9401      	str	r4, [sp, #4]
 80035f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80035f4:	4e1f      	ldr	r6, [pc, #124]	; (8003674 <HAL_UART_MspInit+0xa4>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80035f6:	f042 0210 	orr.w	r2, r2, #16
 80035fa:	645a      	str	r2, [r3, #68]	; 0x44
 80035fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035fe:	f002 0210 	and.w	r2, r2, #16
 8003602:	9201      	str	r2, [sp, #4]
 8003604:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003606:	9402      	str	r4, [sp, #8]
 8003608:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800360a:	f042 0201 	orr.w	r2, r2, #1
 800360e:	631a      	str	r2, [r3, #48]	; 0x30
 8003610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003612:	f003 0301 	and.w	r3, r3, #1
 8003616:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003618:	f44f 63c0 	mov.w	r3, #1536	; 0x600
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800361c:	2203      	movs	r2, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800361e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003620:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003622:	9303      	str	r3, [sp, #12]
 8003624:	4605      	mov	r5, r0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003626:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003628:	4813      	ldr	r0, [pc, #76]	; (8003678 <HAL_UART_MspInit+0xa8>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800362a:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800362c:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800362e:	9307      	str	r3, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003630:	f8dd e008 	ldr.w	lr, [sp, #8]
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8003634:	4f11      	ldr	r7, [pc, #68]	; (800367c <HAL_UART_MspInit+0xac>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003636:	f7fd f9d1 	bl	80009dc <HAL_GPIO_Init>
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800363a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800363e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003642:	f44f 7380 	mov.w	r3, #256	; 0x100
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003646:	4630      	mov	r0, r6
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003648:	60b4      	str	r4, [r6, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800364a:	60f4      	str	r4, [r6, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800364c:	6174      	str	r4, [r6, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800364e:	61b4      	str	r4, [r6, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003650:	6234      	str	r4, [r6, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003652:	6274      	str	r4, [r6, #36]	; 0x24
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8003654:	6037      	str	r7, [r6, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8003656:	6071      	str	r1, [r6, #4]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003658:	6132      	str	r2, [r6, #16]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800365a:	61f3      	str	r3, [r6, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800365c:	f7fd f816 	bl	800068c <HAL_DMA_Init>
 8003660:	b918      	cbnz	r0, 800366a <HAL_UART_MspInit+0x9a>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8003662:	63ae      	str	r6, [r5, #56]	; 0x38
 8003664:	63b5      	str	r5, [r6, #56]	; 0x38
}
 8003666:	b009      	add	sp, #36	; 0x24
 8003668:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 800366a:	f7fe fe05 	bl	8002278 <Error_Handler>
 800366e:	e7f8      	b.n	8003662 <HAL_UART_MspInit+0x92>
 8003670:	40011000 	.word	0x40011000
 8003674:	2000023c 	.word	0x2000023c
 8003678:	40020000 	.word	0x40020000
 800367c:	40026440 	.word	0x40026440

08003680 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003680:	f8df d034 	ldr.w	sp, [pc, #52]	; 80036b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003684:	480d      	ldr	r0, [pc, #52]	; (80036bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003686:	490e      	ldr	r1, [pc, #56]	; (80036c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003688:	4a0e      	ldr	r2, [pc, #56]	; (80036c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800368a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800368c:	e002      	b.n	8003694 <LoopCopyDataInit>

0800368e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800368e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003690:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003692:	3304      	adds	r3, #4

08003694 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003694:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003696:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003698:	d3f9      	bcc.n	800368e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800369a:	4a0b      	ldr	r2, [pc, #44]	; (80036c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800369c:	4c0b      	ldr	r4, [pc, #44]	; (80036cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800369e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036a0:	e001      	b.n	80036a6 <LoopFillZerobss>

080036a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036a4:	3204      	adds	r2, #4

080036a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036a8:	d3fb      	bcc.n	80036a2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80036aa:	f7ff f871 	bl	8002790 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80036ae:	f000 f811 	bl	80036d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80036b2:	f7fe fd47 	bl	8002144 <main>
  bx  lr    
 80036b6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80036b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80036bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036c0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80036c4:	0800378c 	.word	0x0800378c
  ldr r2, =_sbss
 80036c8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80036cc:	200002e0 	.word	0x200002e0

080036d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80036d0:	e7fe      	b.n	80036d0 <ADC_IRQHandler>
	...

080036d4 <__libc_init_array>:
 80036d4:	b570      	push	{r4, r5, r6, lr}
 80036d6:	4e0d      	ldr	r6, [pc, #52]	; (800370c <__libc_init_array+0x38>)
 80036d8:	4c0d      	ldr	r4, [pc, #52]	; (8003710 <__libc_init_array+0x3c>)
 80036da:	1ba4      	subs	r4, r4, r6
 80036dc:	10a4      	asrs	r4, r4, #2
 80036de:	2500      	movs	r5, #0
 80036e0:	42a5      	cmp	r5, r4
 80036e2:	d109      	bne.n	80036f8 <__libc_init_array+0x24>
 80036e4:	4e0b      	ldr	r6, [pc, #44]	; (8003714 <__libc_init_array+0x40>)
 80036e6:	4c0c      	ldr	r4, [pc, #48]	; (8003718 <__libc_init_array+0x44>)
 80036e8:	f000 f82c 	bl	8003744 <_init>
 80036ec:	1ba4      	subs	r4, r4, r6
 80036ee:	10a4      	asrs	r4, r4, #2
 80036f0:	2500      	movs	r5, #0
 80036f2:	42a5      	cmp	r5, r4
 80036f4:	d105      	bne.n	8003702 <__libc_init_array+0x2e>
 80036f6:	bd70      	pop	{r4, r5, r6, pc}
 80036f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80036fc:	4798      	blx	r3
 80036fe:	3501      	adds	r5, #1
 8003700:	e7ee      	b.n	80036e0 <__libc_init_array+0xc>
 8003702:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003706:	4798      	blx	r3
 8003708:	3501      	adds	r5, #1
 800370a:	e7f2      	b.n	80036f2 <__libc_init_array+0x1e>
 800370c:	08003784 	.word	0x08003784
 8003710:	08003784 	.word	0x08003784
 8003714:	08003784 	.word	0x08003784
 8003718:	08003788 	.word	0x08003788

0800371c <memcpy>:
 800371c:	b510      	push	{r4, lr}
 800371e:	1e43      	subs	r3, r0, #1
 8003720:	440a      	add	r2, r1
 8003722:	4291      	cmp	r1, r2
 8003724:	d100      	bne.n	8003728 <memcpy+0xc>
 8003726:	bd10      	pop	{r4, pc}
 8003728:	f811 4b01 	ldrb.w	r4, [r1], #1
 800372c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003730:	e7f7      	b.n	8003722 <memcpy+0x6>

08003732 <memset>:
 8003732:	4402      	add	r2, r0
 8003734:	4603      	mov	r3, r0
 8003736:	4293      	cmp	r3, r2
 8003738:	d100      	bne.n	800373c <memset+0xa>
 800373a:	4770      	bx	lr
 800373c:	f803 1b01 	strb.w	r1, [r3], #1
 8003740:	e7f9      	b.n	8003736 <memset+0x4>
	...

08003744 <_init>:
 8003744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003746:	bf00      	nop
 8003748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800374a:	bc08      	pop	{r3}
 800374c:	469e      	mov	lr, r3
 800374e:	4770      	bx	lr

08003750 <_fini>:
 8003750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003752:	bf00      	nop
 8003754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003756:	bc08      	pop	{r3}
 8003758:	469e      	mov	lr, r3
 800375a:	4770      	bx	lr
